/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/visits/{reference}/cancel': {
    /** Cancel an existing booked visit */
    put: operations['cancelVisit']
  }
  '/visits/{applicationReference}/book': {
    /** Book a visit (end of flow) */
    put: operations['bookAVisit']
  }
  '/visits/notification/visit/{reference}/ignore': {
    /** Do not change an existing booked visit and ignore all notifications */
    put: operations['ignoreVisitNotifications']
  }
  '/visits/application/{reference}/slot/change': {
    /** Change an incomplete application */
    put: operations['changeIncompleteApplication']
  }
  '/visits/application/{bookingReference}/change': {
    /** Create an application for an existing visit */
    put: operations['createApplicationForAnExistingVisit']
  }
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/public/booker/register/auth': {
    /**
     * Authenticate one login details against pre populated bookers
     * @description Authenticate one login details against pre populated bookers and return BookerReference object to be used for all other api calls for booker information
     */
    put: operations['bookerAuthorisation']
  }
  '/visits/application/slot/reserve': {
    /** Create an initial application and reserve a slot */
    post: operations['createInitialApplication']
  }
  '/visits/{reference}': {
    /**
     * Get a visit
     * @description Retrieve a BOOKED or CANCELLED visit by visit reference
     */
    get: operations['getVisitsByReference']
  }
  '/visits/{reference}/history': {
    /**
     * Get visit history
     * @description Retrieve visit history by visit reference
     */
    get: operations['getVisitHistoryByReference']
  }
  '/visits/session-template': {
    /**
     * Get visits for a session template reference and date
     * @description Retrieve visits for session template reference and date
     */
    get: operations['getVisitsBySessionTemplate']
  }
  '/visits/search': {
    /**
     * Get visits
     * @description Retrieve visits with optional filters, sorted by start timestamp descending
     */
    get: operations['getVisitsByFilterPageable']
  }
  '/visits/search/future/{prisonerId}': {
    /**
     * Get future visits for a prisoner
     * @description Get future visits for given prisoner number
     */
    get: operations['getFutureVisitsForPrisoner']
  }
  '/visits/notification/{prisonCode}/groups': {
    /**
     * get future notification visit groups by prison code
     * @description Retrieve future notification visit groups by prison code
     */
    get: operations['getFutureNotificationVisitGroups']
  }
  '/visits/notification/{prisonCode}/count': {
    /**
     * Get notification count for a prison
     * @description Retrieve notification count by prison code
     */
    get: operations['getNotificationCountForPrison']
  }
  '/visits/notification/visit/{reference}/types': {
    /**
     * get visit notification types by booking reference
     * @description Retrieve visit  notification types by booking reference
     */
    get: operations['getNotificationTypesForBookingReference']
  }
  '/visits/notification/count': {
    /**
     * Get notification count
     * @description Retrieve notification count by visit reference
     */
    get: operations['getNotificationCount']
  }
  '/visit-sessions': {
    /**
     * Returns all visit sessions which are within the reservable time period - whether or not they are full
     * @description Retrieve all visits for a specified prisoner
     */
    get: operations['getVisitSessions']
  }
  '/visit-sessions/schedule': {
    /**
     * Returns session scheduled for given prison and date
     * @description Returns session scheduled for given prison and date
     */
    get: operations['getSessionSchedule']
  }
  '/visit-sessions/capacity': {
    /**
     * Returns the VSIP session capacity for the given sessions
     * @description Returns the VSIP session capacity for the given sessions
     */
    get: operations['getSessionCapacity']
  }
  '/visit-sessions/available': {
    /**
     * Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
     * @description Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
     */
    get: operations['getAvailableVisitSessions']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/public/booker/{bookerReference}/visits/cancelled': {
    /**
     * Get public cancelled visits by booker reference
     * @description Get public cancelled visits by booker reference
     */
    get: operations['getCancelledPublicVisitsByBookerReference']
  }
  '/public/booker/{bookerReference}/visits/booked/past': {
    /**
     * Get public past visits by booker reference
     * @description Get public past visits by booker reference
     */
    get: operations['getPastPublicBookedVisitsByBookerReference']
  }
  '/public/booker/{bookerReference}/visits/booked/future': {
    /**
     * Get future public booked visits by booker reference
     * @description Get future public booked visits by booker reference
     */
    get: operations['getFuturePublicBookedVisitsByBookerReference']
  }
  '/public/booker/{bookerReference}/permitted/prisoners': {
    /**
     * Get permitted prisoners associated with a booker.
     * @description Get permitted prisoners associated with a booker.
     */
    get: operations['getPermittedPrisonersForBooker']
  }
  '/public/booker/{bookerReference}/permitted/prisoners/{prisonerId}/permitted/visitors': {
    /**
     * Get permitted visitors for a prisoner associated with that booker.
     * @description Get permitted visitors for a prisoner associated with that booker.
     */
    get: operations['getPermittedVisitorsForPrisoner']
  }
  '/prisoner/{prisonId}/{prisonerId}/profile': {
    /**
     * Get a prisoner's profile page
     * @description Get the prisoner's profile page
     */
    get: operations['getPrisonerProfile']
  }
  '/config/prisons/user-type/{type}/supported': {
    /**
     * Get supported prisons
     * @description Get all supported prisons id's
     */
    get: operations['getSupportedPrisons']
  }
  '/config/prisons/prison/{prisonCode}': {
    /**
     * Gets prison by given prison id/code
     * @description Gets prison by given prison id/code
     */
    get: operations['getPrison']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    CancelVisitOrchestrationDto: {
      cancelOutcome: components['schemas']['OutcomeDto']
      /**
       * @description application method
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
    }
    /**
     * @description Contact Phone Number
     * @example 01234 567890
     */
    OutcomeDto: {
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
      /**
       * @description Outcome text
       * @example Because he got covid
       */
      text?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Contact */
    ContactDto: {
      /**
       * @description Contact Name
       * @example John Smith
       */
      name: string
      /**
       * @description Contact Phone Number
       * @example 01234 567890
       */
      telephone?: string
    }
    /** @description Visit */
    VisitDto: {
      /**
       * @description Application Reference
       * @example dfs-wjs-eqr
       */
      applicationReference: string
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prison Name
       * @example Moorland (HMP & YOI)
       */
      prisonName?: string
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference?: string
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED'
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      /** @description Visit Notes */
      visitNotes?: components['schemas']['VisitNoteDto'][]
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /**
       * Format: date-time
       * @description The visit created date and time
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The visit modified date and time
       */
      modifiedTimestamp: string
    }
    /** @description VisitNote */
    VisitNoteDto: {
      /**
       * @description Note type
       * @example VISITOR_CONCERN
       * @enum {string}
       */
      type: 'VISITOR_CONCERN' | 'VISIT_OUTCOMES' | 'VISIT_COMMENT' | 'STATUS_CHANGED_REASON'
      /**
       * @description Note text
       * @example Visitor is concerned that his mother in-law is coming!
       */
      text: string
    }
    /** @description Visitor */
    VisitorDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description true if visitor is the contact for the visit otherwise false
       * @example true
       */
      visitContact?: boolean
    }
    /** @description Visitor support */
    VisitorSupportDto: {
      /**
       * @description Support text description
       * @example visually impaired assistance
       */
      description: string
    }
    BookingOrchestrationRequestDto: {
      /** @description Username or Identifier for user who actioned this request */
      actionedBy: string
      /**
       * @description application method
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /** @description allow over booking method */
      allowOverBooking: boolean
    }
    IgnoreVisitNotificationsDto: {
      /** @description Reason why the visit's notifications can be ignored */
      reason: string
      /** @description Username for user who actioned this request */
      actionedBy: string
    }
    /** @description Visitor support */
    ApplicationSupportDto: {
      /**
       * @description Support text description, if empty is given then existing support text will be removed
       * @example visually impaired assistance
       */
      description: string
    }
    ChangeApplicationDto: {
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      applicationRestriction?: 'OPEN' | 'CLOSED'
      /**
       * @description Session template reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * Format: date
       * @description The date for the visit
       * @example 2018-12-01
       */
      sessionDate: string
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
      visitorSupport?: components['schemas']['ApplicationSupportDto']
      /** @description allow over booking */
      allowOverBooking: boolean
    }
    /** @description Visit */
    ApplicationDto: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description session template Reference
       * @example dfs-wjs-eqr
       */
      sessionTemplateReference?: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      /** @description Visit Notes */
      visitNotes: components['schemas']['VisitNoteDto'][]
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /**
       * Format: date-time
       * @description The visit created date and time
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The visit modified date and time
       */
      modifiedTimestamp: string
      /**
       * @description Is the application reserved
       * @example true
       */
      reserved: boolean
      /**
       * @description Is the application complete
       * @example true
       */
      completed: boolean
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM'
    }
    CreateApplicationDto: {
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Session template reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * Format: date
       * @description The date for the visit
       * @example 2018-12-01
       */
      sessionDate: string
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      applicationRestriction: 'OPEN' | 'CLOSED'
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
      visitorSupport?: components['schemas']['ApplicationSupportDto']
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM'
      /**
       * @description actioned by (Booker reference - if PUBLIC user type Or User Name - if staff user type)
       * @example asd-asd-asd or STAFF_USER
       */
      actionedBy: string
      /** @description allow over booking */
      allowOverBooking: boolean
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Auth detail Dto */
    AuthDetailDto: {
      /** @description auth reference/sub */
      oneLoginSub: string
      /** @description auth email */
      email: string
      /** @description auth phone number */
      phoneNumber?: string
    }
    /** @description Booker reference Object, to be used with all other api call for booker information */
    BookerReference: {
      /** @description This value is the booker reference and should be used to acquire booker information */
      value: string
    }
    /** @description Event Audit */
    EventAuditOrchestrationDto: {
      /**
       * @description The type of event
       * @enum {string}
       */
      type:
        | 'RESERVED_VISIT'
        | 'CHANGING_VISIT'
        | 'MIGRATED_VISIT'
        | 'BOOKED_VISIT'
        | 'UPDATED_VISIT'
        | 'CANCELLED_VISIT'
        | 'NON_ASSOCIATION_EVENT'
        | 'PRISONER_RELEASED_EVENT'
        | 'PRISONER_RESTRICTION_CHANGE_EVENT'
        | 'PRISON_VISITS_BLOCKED_FOR_DATE'
        | 'IGNORE_VISIT_NOTIFICATIONS_EVENT'
      /**
       * @description What was the application method for this event
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /**
       * @description Actioned by full name
       * @example Aled Evans
       */
      actionedByFullName?: string
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM'
      /** @description Session template used for this event */
      sessionTemplateReference?: string
      /** @description Notes added against the event */
      text?: string
      /**
       * Format: date-time
       * @description event creat date and time
       */
      createTimestamp: string
    }
    /** @description Visit */
    VisitHistoryDetailsDto: {
      /** @description The visit details */
      eventsAudit: components['schemas']['EventAuditOrchestrationDto'][]
      visit: components['schemas']['VisitDto']
    }
    /** @description Timeslot for the visit */
    SessionTimeSlotDto: {
      /**
       * Format: HH:mm
       * @example 13:45
       */
      startTime: string
      /**
       * Format: HH:mm
       * @example 13:45
       */
      endTime: string
    }
    VisitPreviewDto: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerId: string
      /**
       * @description First name of the prisoner
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the prisoner
       * @example Smith
       */
      lastName: string
      /**
       * @description Visit reference
       * @example dp-we-rs-te
       */
      visitReference: string
      /**
       * Format: int32
       * @description Number of visitors added to the visit
       * @example 10
       */
      visitorCount: number
      visitTimeSlot: components['schemas']['SessionTimeSlotDto']
    }
    PageVisitDto: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitDto'][]
      /** Format: int32 */
      number?: number
      pageable?: components['schemas']['PageableObject']
      /** Format: int32 */
      numberOfElements?: number
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject'][]
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      /** Format: int32 */
      pageSize?: number
      unpaged?: boolean
    }
    SortObject: {
      direction?: string
      nullHandling?: string
      ascending?: boolean
      property?: string
      ignoreCase?: boolean
    }
    OrchestrationNotificationGroupDto: {
      /**
       * @description notification group Reference
       * @example v9*d7*ed*7u
       */
      reference: string
      /**
       * @description notification event type
       * @example NON_ASSOCIATION_EVENT
       * @enum {string}
       */
      type:
        | 'NON_ASSOCIATION_EVENT'
        | 'PRISONER_RELEASED_EVENT'
        | 'PRISONER_RESTRICTION_CHANGE_EVENT'
        | 'PRISON_VISITS_BLOCKED_FOR_DATE'
      /** @description List of details of affected visits */
      affectedVisits: components['schemas']['OrchestrationPrisonerVisitsNotificationDto'][]
    }
    /** @description List of details of affected visits */
    OrchestrationPrisonerVisitsNotificationDto: {
      /**
       * @description Prisoner Number
       * @example AF34567G
       */
      prisonerNumber: string
      /**
       * @description Booked by user name
       * @example SMITH1
       */
      bookedByUserName: string
      /**
       * Format: date
       * @description The date of the visit
       * @example 2023-11-08
       */
      visitDate: string
      /**
       * @description Visit Booking Reference
       * @example v9-d7-ed-7u
       */
      bookingReference: string
      /**
       * @description Booked by name
       * @example John Smith
       */
      bookedByName: string
    }
    NotificationCountDto: {
      /** Format: int32 */
      count: number
    }
    /** @description Visit Session */
    VisitSessionDto: {
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * @description The type of visits taking place within this session
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description The prison id
       * @example LEI
       */
      prisonId: string
      /**
       * Format: int32
       * @description The number of concurrent visits which may take place within this session
       * @example 1
       */
      openVisitCapacity: number
      /**
       * Format: int32
       * @description The count of open visit bookings already reserved or booked for this session
       * @example 1
       */
      openVisitBookedCount?: number
      /**
       * Format: int32
       * @description The number of closed visits which may take place within this session
       * @example 1
       */
      closedVisitCapacity: number
      /**
       * Format: int32
       * @description The count of closed visit bookings already reserved or booked for this session
       * @example 1
       */
      closedVisitBookedCount?: number
      /**
       * Format: date-time
       * @description The start timestamp for this visit session
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The end timestamp for this visit session
       */
      endTimestamp: string
      /** @description Session conflicts */
      sessionConflicts?: ('NON_ASSOCIATION' | 'DOUBLE_BOOKING_OR_RESERVATION')[]
    }
    /** @description Session Capacity */
    SessionCapacityDto: {
      /**
       * Format: int32
       * @description closed capacity
       * @example 10
       */
      closed: number
      /**
       * Format: int32
       * @description open capacity
       * @example 50
       */
      open: number
    }
    /** @description Validity period for the session template */
    SessionDateRangeDto: {
      /**
       * Format: date
       * @description The start of the Validity period for the session template
       * @example 2019-11-02
       */
      validFromDate: string
      /**
       * Format: date
       * @description The end of the Validity period for the session template
       * @example 2019-12-02
       */
      validToDate?: string
    }
    /** @description Session schedule */
    SessionScheduleDto: {
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
      sessionDateRange: components['schemas']['SessionDateRangeDto']
      capacity: components['schemas']['SessionCapacityDto']
      /**
       * @description visit type
       * @example Social
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description Determines behaviour of location groups. True will mean the location groups are inclusive, false means they are exclusive. */
      areLocationGroupsInclusive: boolean
      /**
       * @description prisoner location group
       * @example Wing C
       */
      prisonerLocationGroupNames: string[]
      /**
       * @description prisoner category groups
       * @example Category A Prisoners
       */
      prisonerCategoryGroupNames: string[]
      /**
       * @description prisoner incentive level groups
       * @example Enhanced Incentive Level Prisoners
       */
      prisonerIncentiveLevelGroupNames: string[]
      /**
       * Format: int32
       * @description number of weeks until the weekly day is repeated
       * @example 1
       */
      weeklyFrequency: number
    }
    /** @description Visit Session */
    AvailableVisitSessionDto: {
      /**
       * Format: date
       * @description Session date
       * @example 2020-11-01
       */
      sessionDate: string
      /**
       * @description sessionTemplateReference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      sessionRestriction: 'OPEN' | 'CLOSED'
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Visit */
    OrchestrationVisitDto: {
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Visit Status
       * @example BOOKED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED'
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      visitContact: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['OrchestrationVisitorDto'][]
      visitorSupport?: components['schemas']['VisitorSupportDto']
    }
    /** @description Visitor */
    OrchestrationVisitorDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description Visitor's first name
       * @example James
       */
      firstName?: string
      /**
       * @description Visitor's last name
       * @example James
       */
      lastName?: string
    }
    BookerPrisonerInfoDto: {
      prisoner: components['schemas']['PrisonerDto']
      /**
       * Format: int32
       * @description Available VOs - a total of VOs and PVOs
       * @example 0
       */
      availableVos: number
      /**
       * Format: date
       * @description Next available VO date
       * @example 2024-08-01
       */
      nextAvailableVoDate: string
    }
    /** @description Incentive level */
    CurrentIncentive: {
      level: components['schemas']['IncentiveLevel']
      /**
       * Format: date-time
       * @description Date time of the incentive
       */
      dateTime: string
      /**
       * Format: date
       * @description Schedule new review date
       * @example 2022-11-10
       */
      nextReviewDate: string
    }
    /** @description Incentive level */
    IncentiveLevel: {
      /**
       * @description code
       * @example STD
       */
      code?: string
      /**
       * @description description
       * @example Standard
       */
      description: string
    }
    /** @description Prisoner Details */
    PrisonerDto: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description In prison cell location
       * @example A-1-002
       */
      cellLocation?: string
      currentIncentive?: components['schemas']['CurrentIncentive']
    }
    /** @description A visitor for a prisoner */
    VisitorInfoDto: {
      /**
       * Format: int64
       * @description Identifier for this contact (Person in NOMIS)
       * @example 5871791
       */
      visitorId: number
      /**
       * @description First name
       * @example John
       */
      firstName: string
      /**
       * @description Last name
       * @example Smith
       */
      lastName: string
      /**
       * Format: date
       * @description Date of birth
       * @example 2000-01-31
       */
      dateOfBirth?: string
    }
    /** @description Alert */
    AlertDto: {
      /**
       * @description Alert Type
       * @example X
       */
      alertType: string
      /**
       * @description Alert Type Description
       * @example Security
       */
      alertTypeDescription: string
      /**
       * @description Alert Code
       * @example XER
       */
      alertCode: string
      /**
       * @description Alert Code Description
       * @example Escape Risk
       */
      alertCodeDescription: string
      /**
       * @description Alert comments
       * @example Profession lock pick.
       */
      comment?: string
      /**
       * Format: date
       * @description Date of the alert, which might differ to the date it was created
       * @example 2019-08-20
       */
      dateCreated: string
      /**
       * Format: date
       * @description Date the alert expires
       * @example 2020-08-20
       */
      dateExpires?: string
      /**
       * @description True / False based on presence of expiry date
       * @example true
       */
      expired: boolean
      /**
       * @description True / False based on alert status
       * @example false
       */
      active: boolean
    }
    PrisonerProfileDto: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerId: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId?: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description In prison cell location
       * @example A-1-002
       */
      cellLocation?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description Category description (from list of assessments)
       * @example Category C
       */
      category?: string
      /**
       * @description Convicted Status
       * @example Convicted
       * @enum {string}
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description Incentive level
       * @example Standard
       */
      incentiveLevel?: string
      /** @description Alert */
      alerts?: components['schemas']['AlertDto'][]
      visitBalances?: components['schemas']['VisitBalancesDto']
      /** @description Past and future visits for the prisoner based on configured duration. */
      visits: components['schemas']['VisitSummaryDto'][]
    }
    /** @description Balances of visit orders and privilege visit orders */
    VisitBalancesDto: {
      /**
       * Format: int32
       * @description Balance of visit orders remaining
       */
      remainingVo: number
      /**
       * Format: int32
       * @description Balance of privilege visit orders remaining
       */
      remainingPvo: number
      /**
       * Format: date
       * @description Date of last IEP adjustment for Visit orders
       */
      latestIepAdjustDate?: string
      /**
       * Format: date
       * @description Date of last IEP adjustment for Privilege Visit orders
       */
      latestPrivIepAdjustDate?: string
    }
    /** @description Visit Summary */
    VisitSummaryDto: {
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prison name
       * @example MDI Prison
       */
      prisonName?: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED'
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorSummaryDto'][]
    }
    /** @description Full Visitor details */
    VisitorSummaryDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description Visitor's first name
       * @example John
       */
      firstName?: string
      /**
       * @description Visitor's last name
       * @example Smith
       */
      lastName?: string
    }
    /** @description Prison dto */
    PrisonDto: {
      /**
       * @description prison code
       * @example BHI
       */
      code: string
      /**
       * @description prison name
       * @example HMP Hewell
       */
      prisonName: string
      /**
       * @description is prison active
       * @example true
       */
      active: boolean
      /**
       * Format: int32
       * @description minimum number of days notice from the current date to booked a visit
       * @example 2
       */
      policyNoticeDaysMin: number
      /**
       * Format: int32
       * @description maximum number of days notice from the current date to booked a visit
       * @example 28
       */
      policyNoticeDaysMax: number
      /**
       * Format: int32
       * @description Max number of total visitors
       */
      maxTotalVisitors: number
      /**
       * Format: int32
       * @description Max number of adults
       */
      maxAdultVisitors: number
      /**
       * Format: int32
       * @description Max number of children
       */
      maxChildVisitors: number
      /**
       * Format: int32
       * @description Age of adults in years
       */
      adultAgeYears: number
      /** @description exclude dates */
      excludeDates: string[]
      /** @description prison user client */
      clients: components['schemas']['PrisonUserClientDto'][]
    }
    /** @description Prison user client dto */
    PrisonUserClientDto: {
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM'
      /**
       * @description is prison user client active
       * @example true
       */
      active: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Cancel an existing booked visit */
  cancelVisit: {
    parameters: {
      path: {
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitOrchestrationDto']
      }
    }
    responses: {
      /** @description Visit cancelled */
      200: {
        content: {
          '*/*': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to cancel a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to cancel a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Book a visit (end of flow) */
  bookAVisit: {
    parameters: {
      path: {
        /**
         * @description applicationReference
         * @example dfs-wjs-eqr
         */
        applicationReference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingOrchestrationRequestDto']
      }
    }
    responses: {
      /** @description Visit updated */
      200: {
        content: {
          '*/*': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to book a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to book a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Do not change an existing booked visit and ignore all notifications */
  ignoreVisitNotifications: {
    parameters: {
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IgnoreVisitNotificationsDto']
      }
    }
    responses: {
      /** @description Visit notifications cleared and reason noted. */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to ignore visit notifications. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to ignore visit notifications. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Change an incomplete application */
  changeIncompleteApplication: {
    parameters: {
      path: {
        /**
         * @description reference
         * @example dfs-wjs-eqr
         */
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeApplicationDto']
      }
    }
    responses: {
      /** @description Visit slot changed */
      200: {
        content: {
          '*/*': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to changed a visit slot */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to changed a visit slot */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit slot not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Create an application for an existing visit */
  createApplicationForAnExistingVisit: {
    parameters: {
      path: {
        /**
         * @description bookingReference
         * @example v9-d7-ed-7u
         */
        bookingReference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApplicationDto']
      }
    }
    responses: {
      /** @description Visit created */
      201: {
        content: {
          '*/*': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to change a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to change a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /**
   * Authenticate one login details against pre populated bookers
   * @description Authenticate one login details against pre populated bookers and return BookerReference object to be used for all other api calls for booker information
   */
  bookerAuthorisation: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthDetailDto']
      }
    }
    responses: {
      /** @description One login details matched with pre populated booker */
      200: {
        content: {
          '*/*': components['schemas']['BookerReference']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions for this action */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booker not authorised / not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Create an initial application and reserve a slot */
  createInitialApplication: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApplicationDto']
      }
    }
    responses: {
      /** @description Visit slot reserved */
      201: {
        content: {
          '*/*': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to reserve a slot */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to reserve a slot */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a visit
   * @description Retrieve a BOOKED or CANCELLED visit by visit reference
   */
  getVisitsByReference: {
    parameters: {
      path: {
        reference: string
      }
    }
    responses: {
      /** @description Visit Information Returned */
      200: {
        content: {
          '*/*': components['schemas']['VisitDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get visit history
   * @description Retrieve visit history by visit reference
   */
  getVisitHistoryByReference: {
    parameters: {
      path: {
        reference: string
      }
    }
    responses: {
      /** @description Visit History Information Returned */
      200: {
        content: {
          '*/*': components['schemas']['VisitHistoryDetailsDto']
        }
      }
      /** @description Incorrect request to Get visit history */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve visit history */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get visits for a session template reference and date
   * @description Retrieve visits for session template reference and date
   */
  getVisitsBySessionTemplate: {
    parameters: {
      query: {
        /**
         * @description Session template reference
         * @example v9-d7-ed-7u
         */
        sessionTemplateReference?: string
        /**
         * @description Get visits for session date
         * @example 2023-05-31
         */
        sessionDate: string
        /**
         * @description To filter visits by status
         * @example BOOKED
         */
        visitStatus: string
        /**
         * @description Visit Restriction(s) - OPEN / CLOSED / UNKNOWN
         * @example OPEN
         */
        visitRestrictions?: string
        /**
         * @description Filter results by prison id/code
         * @example MDI
         */
        prisonCode: string
      }
    }
    responses: {
      /** @description Visit details returned */
      200: {
        content: {
          '*/*': components['schemas']['VisitPreviewDto'][]
        }
      }
      /** @description Incorrect request to Get visits for session template */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve visits for session template */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get visits
   * @description Retrieve visits with optional filters, sorted by start timestamp descending
   */
  getVisitsByFilterPageable: {
    parameters: {
      query: {
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId?: string
        /**
         * @description Filter results by prison id/code
         * @example MDI
         */
        prisonId?: string
        /**
         * @description Filter results by visits that start on or after the given date
         * @example 2021-11-03
         */
        visitStartDate?: string
        /**
         * @description Filter results by visits that start on or before the given date
         * @example 2021-11-03
         */
        visitEndDate?: string
        /**
         * @description Filter results by visit status
         * @example BOOKED
         */
        visitStatus: string[]
        /**
         * @description Pagination page number, starting at zero
         * @example 0
         */
        page: number
        /**
         * @description Pagination size per page
         * @example 50
         */
        size: number
      }
    }
    responses: {
      /** @description Visit Information Returned */
      200: {
        content: {
          '*/*': components['schemas']['PageVisitDto']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve visits */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get future visits for a prisoner
   * @description Get future visits for given prisoner number
   */
  getFutureVisitsForPrisoner: {
    parameters: {
      path: {
        prisonerId: string
      }
    }
    responses: {
      /** @description Returned future visits for a prisoner */
      200: {
        content: {
          '*/*': components['schemas']['VisitDto'][]
        }
      }
      /** @description Incorrect request to get future visits for a prisoner */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get future visits for a prisoner */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get future notification visit groups by prison code
   * @description Retrieve future notification visit groups by prison code
   */
  getFutureNotificationVisitGroups: {
    parameters: {
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
    }
    responses: {
      /** @description Retrieved future notification visit groups by prison code */
      200: {
        content: {
          'application/json': components['schemas']['OrchestrationNotificationGroupDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get notification count for a prison
   * @description Retrieve notification count by prison code
   */
  getNotificationCountForPrison: {
    parameters: {
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
    }
    responses: {
      /** @description Retrieve notification count for a prison */
      200: {
        content: {
          'application/json': components['schemas']['NotificationCountDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get visit notification types by booking reference
   * @description Retrieve visit  notification types by booking reference
   */
  getNotificationTypesForBookingReference: {
    parameters: {
      path: {
        /**
         * @description bookingReference
         * @example v9*d7*ed*7u
         */
        reference: string
      }
    }
    responses: {
      /** @description Retrieved visit  notification types by booking reference */
      200: {
        content: {
          'application/json': (
            | 'NON_ASSOCIATION_EVENT'
            | 'PRISONER_RELEASED_EVENT'
            | 'PRISONER_RESTRICTION_CHANGE_EVENT'
            | 'PRISON_VISITS_BLOCKED_FOR_DATE'
          )[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get notification count
   * @description Retrieve notification count by visit reference
   */
  getNotificationCount: {
    responses: {
      /** @description Retrieve notification count */
      200: {
        content: {
          'application/json': components['schemas']['NotificationCountDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Returns all visit sessions which are within the reservable time period - whether or not they are full
   * @description Retrieve all visits for a specified prisoner
   */
  getVisitSessions: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId?: string
        /**
         * @description Override the default minimum number of days notice from the current date
         * @example 2
         */
        min?: number
        /**
         * @description Override the default maximum number of days to book-ahead from the current date
         * @example 28
         */
        max?: number
      }
    }
    responses: {
      /** @description Visit session information returned */
      200: {
        content: {
          '*/*': components['schemas']['VisitSessionDto'][]
        }
      }
      /** @description Incorrect request to Get visit sessions */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Returns session scheduled for given prison and date
   * @description Returns session scheduled for given prison and date
   */
  getSessionSchedule: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example CLI
         */
        prisonId: string
        /**
         * @description Session date
         * @example 2023-01-31
         */
        date: string
      }
    }
    responses: {
      /** @description Session templates returned */
      200: {
        content: {
          '*/*': components['schemas']['SessionScheduleDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Returns the VSIP session capacity for the given sessions
   * @description Returns the VSIP session capacity for the given sessions
   */
  getSessionCapacity: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example CLI
         */
        prisonId: string
        /**
         * @description Session date
         * @example 2020-11-01
         */
        sessionDate: string
        /**
         * @description Session start time
         * @example 13:30:00
         */
        sessionStartTime: string
        /**
         * @description Session end time
         * @example 14:30:00
         */
        sessionEndTime: string
      }
    }
    responses: {
      /** @description the session capacity for the given sessions */
      200: {
        content: {
          '*/*': components['schemas']['SessionCapacityDto']
        }
      }
      /** @description Incorrect request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Capacity not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
   * @description Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
   */
  getAvailableVisitSessions: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId: string
        /**
         * @description Filter sessions by session restriction - OPEN or CLOSED, if prisoner has CLOSED it will use that
         * @example CLOSED
         */
        sessionRestriction?: 'OPEN' | 'CLOSED'
        /**
         * @description List of visitors who require visit sessions
         * @example 4729510,4729220
         */
        visitors?: number[]
        /** @description Defaults to true if not passed. If true, will not return visit times that clash with higher priority legal or medical appointments. */
        withAppointmentsCheck?: boolean
        /**
         * @description The current application reference to be excluded from capacity count and double booking
         * @example dfs-wjs-eqr
         */
        excludedApplicationReference?: string
        /** @description Advances the available visits slots sought from date by n days. Defaults to 0 if not passed. */
        advanceFromDateByDays?: number
      }
    }
    responses: {
      /** @description Visit session information returned */
      200: {
        content: {
          '*/*': components['schemas']['AvailableVisitSessionDto'][]
        }
      }
      /** @description Incorrect request to Get visit sessions */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  /**
   * Get public cancelled visits by booker reference
   * @description Get public cancelled visits by booker reference
   */
  getCancelledPublicVisitsByBookerReference: {
    parameters: {
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
    }
    responses: {
      /** @description cancelled public visits returned */
      200: {
        content: {
          '*/*': components['schemas']['OrchestrationVisitDto'][]
        }
      }
      /** @description Incorrect request to get cancelled public visits by booker reference */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get public past visits by booker reference
   * @description Get public past visits by booker reference
   */
  getPastPublicBookedVisitsByBookerReference: {
    parameters: {
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
    }
    responses: {
      /** @description past public visits returned */
      200: {
        content: {
          '*/*': components['schemas']['OrchestrationVisitDto'][]
        }
      }
      /** @description Incorrect request to get past public visits by booker reference */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get future public booked visits by booker reference
   * @description Get future public booked visits by booker reference
   */
  getFuturePublicBookedVisitsByBookerReference: {
    parameters: {
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
    }
    responses: {
      /** @description Future public booked visits returned */
      200: {
        content: {
          '*/*': components['schemas']['OrchestrationVisitDto'][]
        }
      }
      /** @description Incorrect request to get future booked visits by booker reference */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get permitted prisoners associated with a booker.
   * @description Get permitted prisoners associated with a booker.
   */
  getPermittedPrisonersForBooker: {
    parameters: {
      path: {
        /**
         * @description Booker's unique reference.
         * @example A12345DC
         */
        bookerReference: string
      }
    }
    responses: {
      /** @description Returned prisoners associated with a booker */
      200: {
        content: {
          '*/*': components['schemas']['BookerPrisonerInfoDto'][]
        }
      }
      /** @description Incorrect request to get prisoners associated with a booker */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get prisoners associated with a booker */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get permitted visitors for a prisoner associated with that booker.
   * @description Get permitted visitors for a prisoner associated with that booker.
   */
  getPermittedVisitorsForPrisoner: {
    parameters: {
      path: {
        bookerReference: string
        /**
         * @description Prisoner Id for whom visitors need to be returned.
         * @example A12345DC
         */
        prisonerId: string
      }
    }
    responses: {
      /** @description Returned permitted permitted visitors for a prisoner associated with that booker */
      200: {
        content: {
          '*/*': components['schemas']['VisitorInfoDto'][]
        }
      }
      /** @description Incorrect request to get permitted visitors for a prisoner associated with that booker */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get permitted visitors for a prisoner associated with that booker */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a prisoner's profile page
   * @description Get the prisoner's profile page
   */
  getPrisonerProfile: {
    parameters: {
      path: {
        prisonId: string
        prisonerId: string
      }
    }
    responses: {
      /** @description Prisoner Profile Returned */
      200: {
        content: {
          '*/*': components['schemas']['PrisonerProfileDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve a prisoner's profile */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner profile not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect request to the prisoner profile page */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get supported prisons
   * @description Get all supported prisons id's
   */
  getSupportedPrisons: {
    parameters: {
      path: {
        /**
         * @description type
         * @example STAFF
         */
        type: string
      }
    }
    responses: {
      /** @description Supported prisons returned */
      200: {
        content: {
          'application/json': string[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets prison by given prison id/code
   * @description Gets prison by given prison id/code
   */
  getPrison: {
    parameters: {
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
    }
    responses: {
      /** @description prison returned */
      200: {
        content: {
          '*/*': components['schemas']['PrisonDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get prison */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
