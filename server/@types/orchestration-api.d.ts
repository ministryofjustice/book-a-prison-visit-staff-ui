/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/visits/{reference}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Cancel an existing booked visit */
    put: operations['cancelVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{applicationReference}/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update an existing visit */
    put: operations['updateAVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{applicationReference}/book': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Book a visit (end of flow) */
    put: operations['bookAVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/requests/{reference}/reject': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Reject a visit request
     * @description Endpoint to reject a visit request by visit reference
     */
    put: operations['rejectVisitRequestByReference']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/requests/{reference}/approve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Approve a visit request
     * @description Endpoint to approve a visit request by visit reference
     */
    put: operations['approveVisitRequestByReference']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/visit/{reference}/ignore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Do not change an existing booked visit and ignore all notifications */
    put: operations['ignoreVisitNotifications']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/application/{reference}/slot/change': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Change an incomplete application */
    put: operations['changeIncompleteApplication']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/application/{bookingReference}/change': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Create an application for an existing visit */
    put: operations['createApplicationForAnExistingVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/register/auth': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Authenticate one login details against pre populated bookers
     * @description Authenticate one login details against pre populated bookers and return BookerReference object to be used for all other api calls for booker information
     */
    put: operations['bookerAuthorisation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/sessions/session/{sessionTemplateReference}/exclude-date/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Remove exclude date for a given session template
     * @description Remove exclude date for a given session template
     */
    put: operations['removeExcludeDateForSessionTemplate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/sessions/session/{sessionTemplateReference}/exclude-date/add': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Add exclude date for a given session template
     * @description Add exclude date for a given session template
     */
    put: operations['addExcludeDateForSessionTemplate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/prison/{prisonCode}/exclude-date/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Remove exclude date for a given prison
     * @description Remove exclude date for a given prison
     */
    put: operations['removeExcludeDateForPrison']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/prison/{prisonCode}/exclude-date/add': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Add exclude date for a given prison
     * @description Add exclude date for a given prison
     */
    put: operations['addExcludeDateForPrison']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/application/slot/reserve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create an initial application and reserve a slot */
    post: operations['createInitialApplication']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/permitted/prisoners/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register prisoner to a booker
     * @description Register prisoner to a booker
     */
    post: operations['registerPrisoner']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{reference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a visit
     * @description Retrieve a BOOKED or CANCELLED visit by visit reference
     */
    get: operations['getVisitsByReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{reference}/detailed': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a detailed summary of the visit including prisoner, visitor, event audit and notification event details
     * @description Retrieve a detailed summary of the visit given a visit reference
     */
    get: operations['getVisitFullDetailsByReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/session-template': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get visits for a session template reference and date
     * @description Retrieve visits for session template reference and date
     */
    get: operations['getVisitsBySessionTemplate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get visits
     * @description Retrieve visits with optional filters, sorted by start timestamp descending
     */
    get: operations['getVisitsByFilterPageable']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/search/future/{prisonerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get future visits for a prisoner
     * @description Get future visits for given prisoner number
     */
    get: operations['getFutureVisitsForPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/requests/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all visit requests for a prison
     * @description Retrieve a list of visit requests for a prison
     */
    get: operations['getVisitRequestsForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/requests/{prisonCode}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get count of visit requests for a prison
     * @description Returns an Int count for how many visit requests are open for a prison
     */
    get: operations['getVisitRequestsCountForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/{prisonCode}/visits': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get future visits with notifications by prison code
     * @description Retrieve future visits that have a notification event attribute associated, empty response if no future visits with notifications found.
     */
    get: operations['getFutureNotificationVisits']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/notification/{prisonCode}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get notification count for a prison
     * @description Retrieve notification count by prison code
     */
    get: operations['getNotificationCountForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/external-system/{clientReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get visit reference from given client reference */
    get: operations['getVisitReferenceByClientReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns all visit sessions which are within the reservable time period - whether or not they are full
     * @description Retrieve all visits for a specified prisoner
     */
    get: operations['getVisitSessions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/session': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a single VSIP session
     * @description Returns a single VSIP session
     */
    get: operations['getVisitSession']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns session scheduled for given prison and date
     * @description Returns session scheduled for given prison and date
     */
    get: operations['getSessionSchedule']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/public/available': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns available visit sessions with sessions marked for review for a specified prisoner and visitors combination for the date range passed in.
     * @description Returns available visit sessions with sessions marked for review for a specified prisoner and visitors combination for the date range passed in. Marks sessions for review if prisoner alerts / restrictions or visitor restrictions are found. Used by Visits Public only, not PVB
     */
    get: operations['getAvailableVisitSessions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/capacity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the VSIP session capacity for the given sessions
     * @description Returns the VSIP session capacity for the given sessions
     */
    get: operations['getSessionCapacity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/available': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
     * @description Returns only available visit sessions for a specified prisoner by restriction and within the reservable time period
     */
    get: operations['getAvailableVisitSessions_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-sessions/available/restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the restriction type of available sessions
     * @description Returns the restriction of available sessions given a prisoner and optionally a list of visitors [OPEN / CLOSED]
     */
    get: operations['getSessionRestrictionType']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/visits/cancelled': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get public cancelled visits by booker reference
     * @description Get public cancelled visits by booker reference
     */
    get: operations['getCancelledPublicVisitsByBookerReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/visits/booked/past': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get public past visits by booker reference
     * @description Get public past visits by booker reference
     */
    get: operations['getPastPublicBookedVisitsByBookerReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/visits/booked/future': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get future public booked visits by booker reference
     * @description Get future public booked visits by booker reference
     */
    get: operations['getFuturePublicBookedVisitsByBookerReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/permitted/prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get permitted prisoners associated with a booker.
     * @description Get permitted prisoners associated with a booker.
     */
    get: operations['getPermittedPrisonersForBooker']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/permitted/prisoners/{prisonerId}/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Validates prisoner associated with a booker
     * @description Validates prisoner associated with a booker
     */
    get: operations['validatePrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/public/booker/{bookerReference}/permitted/prisoners/{prisonerId}/permitted/visitors': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get permitted visitors for a prisoner associated with that booker.
     * @description Get permitted visitors for a prisoner associated with that booker.
     */
    get: operations['getPermittedVisitorsForPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonId}/{prisonerId}/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a prisoner's profile page
     * @description Get the prisoner's profile page
     */
    get: operations['getPrisonerProfile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/sessions/session/{sessionTemplateReference}/exclude-date/{excludeDate}/isExcluded': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Endpoint to check if the date passed has been excluded for visits for the session template
     * @description Returns true if the date passed has been excluded for visits for the session template, false otherwise.
     */
    get: operations['isDateExcludedForSessionTemplateVisits']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/sessions/session/{sessionTemplateReference}/exclude-date/past': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all past exclude dates for a given session template
     * @description Get all past exclude dates for a given session template
     */
    get: operations['getPastExcludeDatesForSessionTemplate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/sessions/session/{sessionTemplateReference}/exclude-date/future': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all current or future exclude dates for a given session template
     * @description Get current or future exclude dates for a given session template
     */
    get: operations['getFutureExcludeDatesForSessionTemplate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/user-type/{type}/supported': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get supported prisons
     * @description Get all supported prisons id's
     */
    get: operations['getSupportedPrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/user-type/{type}/supported/detailed': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get supported prisons with detailed prison details by user type
     * @description Get all supported prisons with detailed prison details by user type
     */
    get: operations['getSupportedPrisonDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/prison/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets prison by given prison id/code
     * @description Gets prison by given prison id/code
     */
    get: operations['getPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/prison/{prisonCode}/exclude-date/{excludeDate}/isExcluded': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Endpoint to check if the date passed has been excluded for visits by the prison
     * @description Returns true if the date passed has been excluded for visits by the prison, false otherwise.
     */
    get: operations['isDateExcludedForPrisonVisits']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/prison/{prisonCode}/exclude-date/past': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all past exclude dates for a given prison
     * @description Get all past exclude dates for a given prison
     */
    get: operations['getPastExcludeDatesForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/config/prisons/prison/{prisonCode}/exclude-date/future': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all current or future exclude dates for a given prison
     * @description Get current or future exclude dates for a given prison
     */
    get: operations['getFutureExcludeDatesForPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    CancelVisitOrchestrationDto: {
      /** @description Outcome - status and text */
      cancelOutcome: components['schemas']['OutcomeDto']
      /**
       * @description application method
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /** @description Username for user who actioned this request */
      actionedBy: string
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
    }
    /**
     * @description Contact Phone Number
     * @example 01234 567890
     */
    OutcomeDto: {
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
        | 'BOOKER_CANCELLED'
      /**
       * @description Outcome text
       * @example Because he got covid
       */
      text?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
    }
    /** @description Contact */
    ContactDto: {
      /**
       * @description Contact Name
       * @example John Smith
       */
      name: string
      /**
       * @description Contact Phone Number
       * @example 01234 567890
       */
      telephone?: string
      /**
       * @description Contact Email Address
       * @example email@example.com
       */
      email?: string
    }
    /** @description Visit */
    VisitDto: {
      /**
       * @description Application Reference
       * @example dfs-wjs-eqr
       */
      applicationReference: string
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prison Name
       * @example Moorland (HMP & YOI)
       */
      prisonName?: string
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference?: string
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN'
      /**
       * @description Visit Sub Status
       * @example AUTO_APPROVED
       * @enum {string}
       */
      visitSubStatus:
        | 'APPROVED'
        | 'AUTO_APPROVED'
        | 'REQUESTED'
        | 'REJECTED'
        | 'AUTO_REJECTED'
        | 'WITHDRAWN'
        | 'CANCELLED'
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
        | 'BOOKER_CANCELLED'
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /** @description Visit Notes */
      visitNotes?: components['schemas']['VisitNoteDto'][]
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
      /** @description Additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /**
       * Format: date-time
       * @description The visit created date and time
       * @example 2018-12-01T13:45:00
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The visit modified date and time
       * @example 2018-12-01T13:45:00
       */
      modifiedTimestamp: string
      /**
       * Format: date-time
       * @description Date the visit was first booked or migrated
       * @example 2018-12-01T13:45:00
       */
      firstBookedDateTime?: string
      /** @description External system details associated with the visit */
      visitExternalSystemDetails?: components['schemas']['VisitExternalSystemDetails']
    }
    VisitExternalSystemDetails: {
      /**
       * @description Client name
       * @example client_name
       */
      clientName?: string
      /**
       * @description Client visit reference
       * @example Reference ID in the client system
       */
      clientVisitReference?: string
    }
    /** @description VisitNote */
    VisitNoteDto: {
      /**
       * @description Note type
       * @example VISITOR_CONCERN
       * @enum {string}
       */
      type: 'VISITOR_CONCERN' | 'VISIT_OUTCOMES' | 'VISIT_COMMENT' | 'STATUS_CHANGED_REASON'
      /**
       * @description Note text
       * @example Visitor is concerned that his mother in-law is coming!
       */
      text: string
    }
    /** @description Visitor */
    VisitorDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description true if visitor is the contact for the visit otherwise false
       * @example true
       */
      visitContact?: boolean
    }
    /** @description Visitor support */
    VisitorSupportDto: {
      /**
       * @description Support text description
       * @example visually impaired assistance
       */
      description: string
    }
    ApplicationValidationErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      validationErrors: (
        | 'APPLICATION_INVALID_PRISONER_NOT_FOUND'
        | 'APPLICATION_INVALID_PRISON_PRISONER_MISMATCH'
        | 'APPLICATION_INVALID_SESSION_NOT_AVAILABLE'
        | 'APPLICATION_INVALID_SESSION_TEMPLATE_NOT_FOUND'
        | 'APPLICATION_INVALID_NON_ASSOCIATION_VISITS'
        | 'APPLICATION_INVALID_VISIT_ALREADY_BOOKED'
        | 'APPLICATION_INVALID_NO_VO_BALANCE'
        | 'APPLICATION_INVALID_NO_SLOT_CAPACITY'
      )[]
    }
    BookingOrchestrationRequestDto: {
      /** @description Username or Identifier for user who actioned this request */
      actionedBy: string
      /**
       * @description application method
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /** @description allow over booking method */
      allowOverBooking: boolean
      /**
       * @description User type for user who actioned this request
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      /** @description flag to determine if visit should be a request or instant booking */
      isRequestBooking?: boolean
    }
    RejectVisitRequestBodyDto: {
      /** @description Reference of the visit for rejection */
      visitReference: string
      /** @description Username for user who actioned this request */
      actionedBy: string
    }
    OrchestrationApproveRejectVisitRequestResponseDto: {
      /** @description Reference of the approved visit */
      visitReference: string
      /** @description First name of the prisoner being visited */
      prisonerFirstName: string
      /** @description Last name of the prisoner being visited */
      prisonerLastName: string
    }
    ApproveVisitRequestBodyDto: {
      /** @description Reference of the visit for approval */
      visitReference: string
      /** @description Username for user who actioned this request */
      actionedBy: string
    }
    IgnoreVisitNotificationsDto: {
      /** @description Reason why the visit's notifications can be ignored */
      reason: string
      /** @description Username for user who actioned this request */
      actionedBy: string
    }
    /** @description Visitor support */
    ApplicationSupportDto: {
      /**
       * @description Support text description, if empty is given then existing support text will be removed
       * @example visually impaired assistance
       */
      description: string
    }
    ChangeApplicationDto: {
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      applicationRestriction?: 'OPEN' | 'CLOSED'
      /**
       * @description Session template reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * Format: date
       * @description The date for the visit
       * @example 2018-12-01
       */
      sessionDate: string
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
      /** @description additional support associated with the visit, if null support will not be updated */
      visitorSupport?: components['schemas']['ApplicationSupportDto']
      /** @description allow over booking */
      allowOverBooking: boolean
    }
    /** @description Visit */
    ApplicationDto: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description session template Reference
       * @example dfs-wjs-eqr
       */
      sessionTemplateReference?: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /** @description Visit Notes */
      visitNotes: components['schemas']['VisitNoteDto'][]
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
      /** @description Additional support associated with the application */
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /**
       * Format: date-time
       * @description The visit created date and time
       * @example 2018-12-01T13:45:00
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The visit modified date and time
       * @example 2018-12-01T13:45:00
       */
      modifiedTimestamp: string
      /**
       * @description Is the application reserved
       * @example true
       */
      reserved: boolean
      /**
       * @description Status of the application
       * @example IN_PROGRESS
       * @enum {string}
       */
      applicationStatus: 'IN_PROGRESS' | 'ACCEPTED'
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
    }
    CreateApplicationDto: {
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Session template reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * Format: date
       * @description The date for the visit
       * @example 2018-12-01
       */
      sessionDate: string
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      applicationRestriction: 'OPEN' | 'CLOSED'
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
      /** @description additional support associated with the visit, if null support will not be updated */
      visitorSupport?: components['schemas']['ApplicationSupportDto']
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      /**
       * @description actioned by (Booker reference - if PUBLIC user type Or User Name - if staff user type)
       * @example asd-asd-asd or STAFF_USER
       */
      actionedBy: string
      /** @description allow over booking */
      allowOverBooking: boolean
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Auth detail Dto */
    AuthDetailDto: {
      /** @description auth reference/sub */
      oneLoginSub: string
      /** @description auth email */
      email: string
      /** @description auth phone number */
      phoneNumber?: string
    }
    /** @description Booker reference Object, to be used with all other api call for booker information */
    BookerReference: {
      /** @description This value is the booker reference and should be used to acquire booker information */
      value: string
    }
    /** @description Prison exclude date */
    ExcludeDateDto: {
      /**
       * Format: date
       * @description exclude date
       * @example 2024-26-12
       */
      excludeDate: string
      /** @description full name of user who added the exclude date or username if full name is not available. */
      actionedBy: string
    }
    /** @description Details to register a prisoner to a booker. */
    RegisterPrisonerForBookerDto: {
      /**
       * @description Prisoner Id
       * @example A1234AA
       */
      prisonerId: string
      /**
       * @description Prisoner first name
       * @example James
       */
      prisonerFirstName: string
      /**
       * @description Prisoner last name
       * @example Smith
       */
      prisonerLastName: string
      /**
       * Format: date
       * @description Prisoner date of birth
       * @example 1960-01-30
       */
      prisonerDateOfBirth: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
    }
    /** @description An address */
    AddressDto: {
      /**
       * @description Address Type
       * @example BUS
       */
      addressType?: string
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise?: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City
       * @example Liverpool
       */
      town?: string
      /**
       * @description Postal Code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description County
       * @example HEREFORD
       */
      county?: string
      /**
       * @description Country
       * @example ENG
       */
      country?: string
      /**
       * @description Additional Information
       * @example This is a comment text
       */
      comment?: string
      /**
       * @description Primary Address
       * @example false
       */
      primary: boolean
      /**
       * @description No Fixed Address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * Format: date
       * @description Date Added
       * @example 2000-10-31
       */
      startDate?: string
      /**
       * Format: date
       * @description Date ended
       * @example 2000-10-31
       */
      endDate?: string
      /** @description The phone number associated with the address */
      phones: components['schemas']['TelephoneDto'][]
      /** @description The address usages/types */
      addressUsages: components['schemas']['AddressUsageDto'][]
    }
    /** @description An Offender's address usage */
    AddressUsageDto: {
      /**
       * @description The address usages
       * @example HDC
       */
      addressUsage?: string
      /**
       * @description The address usages description
       * @example HDC Address
       */
      addressUsageDescription?: string
      /**
       * @description Active Flag
       * @example true
       */
      activeFlag?: boolean
    }
    /** @description AlertDto returned from orchestration, made of fields from AlertResponseDto from Alerts API call */
    AlertDto: {
      /**
       * @description Alert Type
       * @example X
       */
      alertType: string
      /**
       * @description Alert Type Description
       * @example Security
       */
      alertTypeDescription: string
      /**
       * @description Alert Code
       * @example XER
       */
      alertCode: string
      /**
       * @description Alert Code Description
       * @example Escape Risk
       */
      alertCodeDescription: string
      /**
       * @description Alert comments
       * @example Profession lock pick.
       */
      comment?: string
      /**
       * Format: date
       * @description Date of the alert, which might differ to the date it was created
       * @example 2019-08-20
       */
      startDate: string
      /**
       * Format: date
       * @description Date the alert expires
       * @example 2020-08-20
       */
      expiryDate?: string
      /**
       * Format: date
       * @description Date the alert was last updated.
       * @example 2020-08-20
       */
      updatedDate?: string
      /**
       * @description True / False based on alert status
       * @example false
       */
      active: boolean
    }
    /** @description Event Audit with actioned by user's full name populated */
    EventAuditOrchestrationDto: {
      /**
       * @description The type of event
       * @enum {string}
       */
      type:
        | 'RESERVED_VISIT'
        | 'CHANGING_VISIT'
        | 'MIGRATED_VISIT'
        | 'BOOKED_VISIT'
        | 'UPDATED_VISIT'
        | 'CANCELLED_VISIT'
        | 'REQUESTED_VISIT'
        | 'REQUESTED_VISIT_APPROVED'
        | 'NON_ASSOCIATION_EVENT'
        | 'PRISONER_RELEASED_EVENT'
        | 'PRISONER_RECEIVED_EVENT'
        | 'PRISONER_RESTRICTION_CHANGE_EVENT'
        | 'PRISONER_ALERTS_UPDATED_EVENT'
        | 'PRISON_VISITS_BLOCKED_FOR_DATE'
        | 'SESSION_VISITS_BLOCKED_FOR_DATE'
        | 'IGNORE_VISIT_NOTIFICATIONS_EVENT'
        | 'PERSON_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_UNAPPROVED_EVENT'
        | 'UPDATED_NON_ASSOCIATION_VISIT_EVENT'
        | 'CANCELLED_NON_ASSOCIATION_VISIT_EVENT'
        | 'IGNORED_NON_ASSOCIATION_VISIT_NOTIFICATIONS_EVENT'
        | 'PAIRED_VISIT_CANCELLED_IGNORED_OR_UPDATED_EVENT'
      /**
       * @description What was the application method for this event
       * @enum {string}
       */
      applicationMethodType:
        | 'PHONE'
        | 'WEBSITE'
        | 'EMAIL'
        | 'IN_PERSON'
        | 'NOT_KNOWN'
        | 'NOT_APPLICABLE'
        | 'BY_PRISONER'
      /**
       * @description Actioned by full name
       * @example Aled Evans
       */
      actionedByFullName?: string
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      /** @description Notes added against the event */
      text?: string
      /**
       * Format: date-time
       * @description event creat date and time
       * @example 2018-12-01T13:45:00
       */
      createTimestamp: string
    }
    /** @description Offender restriction */
    OffenderRestrictionDto: {
      /**
       * Format: int64
       * @description restriction id
       */
      restrictionId: number
      /** @description Restriction comment text */
      comment?: string
      /** @description code of restriction type */
      restrictionType: string
      /** @description description of restriction type */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Date from which the restrictions applies
       * @example 1980-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Date restriction applies to, or indefinitely if null
       * @example 1980-01-01
       */
      expiryDate?: string
      /** @description true if restriction is within the start date and optional expiry date range */
      active: boolean
    }
    /** @description Prison Information */
    PrisonRegisterPrisonDto: {
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Name of the prison
       * @example Moorland HMP
       */
      prisonName: string
    }
    PrisonerDetailsDto: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description In prison cell location
       * @example A-1-002
       */
      cellLocation?: string
      /**
       * @description current prison or outside with last movement information.
       * @example Outside - released from Leeds
       */
      locationDescription?: string
      /** @description Prisoner alerts */
      prisonerAlerts: components['schemas']['AlertDto'][]
      /** @description Prisoner restrictions */
      prisonerRestrictions: components['schemas']['OffenderRestrictionDto'][]
    }
    /** @description A contact for a prisoner */
    RestrictionDto: {
      /**
       * Format: int32
       * @description Restriction Id
       * @example 123
       */
      restrictionId: number
      /**
       * @description Restriction Type Code
       * @example 123
       */
      restrictionType: string
      /**
       * @description Description of Restriction Type
       * @example 123
       */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Date from which the restriction applies
       * @example 2000-10-31
       */
      startDate: string
      /**
       * Format: date
       * @description Restriction Expiry
       * @example 2000-10-31
       */
      expiryDate?: string
      /** @description True if applied globally to the contact or False if applied in the context of a visit */
      globalRestriction: boolean
      /**
       * @description Additional Information
       * @example This is a comment text
       */
      comment?: string
    }
    /** @description Telephone Details */
    TelephoneDto: {
      /**
       * @description Telephone number
       * @example 0114 2345678
       */
      number: string
      /**
       * @description Telephone type
       * @example TEL
       */
      type: string
      /**
       * @description Telephone extension number
       * @example 123
       */
      ext?: string
    }
    VisitBookingDetailsDto: {
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN'
      /**
       * @description Visit Sub Status
       * @example AUTO_APPROVED
       * @enum {string}
       */
      visitSubStatus:
        | 'APPROVED'
        | 'AUTO_APPROVED'
        | 'REQUESTED'
        | 'REJECTED'
        | 'AUTO_REJECTED'
        | 'WITHDRAWN'
        | 'CANCELLED'
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
        | 'BOOKER_CANCELLED'
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference?: string
      /** @description Visit Notes */
      visitNotes?: components['schemas']['VisitNoteDto'][]
      /** @description Contact associated with the visit */
      visitContact?: components['schemas']['VisitContactDto']
      /** @description Additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto']
      /** @description Prison code and name */
      prison: components['schemas']['PrisonRegisterPrisonDto']
      /** @description Prisoner details */
      prisoner: components['schemas']['PrisonerDetailsDto']
      /** @description Prisoner details */
      visitors: components['schemas']['VisitorDetailsDto'][]
      events: components['schemas']['EventAuditOrchestrationDto'][]
      notifications: components['schemas']['VisitNotificationDto'][]
    }
    /** @description Visit notification details */
    VisitContactDto: {
      /**
       * Format: int64
       * @description Main contact ID associated with the visit
       * @example 1234
       */
      visitContactId?: number
      /**
       * @description Contact Name
       * @example John Smith
       */
      name: string
      /**
       * @description Contact Phone Number
       * @example 01234 567890
       */
      telephone?: string
      /**
       * @description Contact Email Address
       * @example email@example.com
       */
      email?: string
    }
    /** @description Visit notification details */
    VisitNotificationDto: {
      /**
       * @description notification event type
       * @enum {string}
       */
      type:
        | 'NON_ASSOCIATION_EVENT'
        | 'PRISONER_RELEASED_EVENT'
        | 'PRISONER_RESTRICTION_CHANGE_EVENT'
        | 'PRISON_VISITS_BLOCKED_FOR_DATE'
        | 'SESSION_VISITS_BLOCKED_FOR_DATE'
        | 'PRISONER_RECEIVED_EVENT'
        | 'PRISONER_ALERTS_UPDATED_EVENT'
        | 'PERSON_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_UNAPPROVED_EVENT'
      /**
       * Format: date-time
       * @description notification created at
       * @example 2018-12-01T13:45:00
       */
      createdDateTime: string
      /** @description notification additional data */
      additionalData: components['schemas']['VisitNotificationEventAttributeDto'][]
    }
    VisitNotificationEventAttributeDto: {
      /**
       * @description Name of the attribute associated with the notification event
       * @example VISITOR_RESTRICTION
       * @enum {string}
       */
      attributeName: 'VISITOR_RESTRICTION' | 'VISITOR_RESTRICTION_ID' | 'VISITOR_ID' | 'PAIRED_VISIT'
      /**
       * @description Value of the attribute associated with the notification event
       * @example BAN
       */
      attributeValue: string
    }
    /** @description Visitor details */
    VisitorDetailsDto: {
      /**
       * Format: int64
       * @description Identifier for this contact (Person in NOMIS)
       * @example 5871791
       */
      personId?: number
      /**
       * @description First name
       * @example John
       */
      firstName: string
      /**
       * @description Last name
       * @example Smith
       */
      lastName: string
      /**
       * Format: date
       * @description Date of birth
       * @example 1980-01-28
       */
      dateOfBirth?: string
      /**
       * @description Description of relationship to Prisoner
       * @example Responsible Officer
       */
      relationshipDescription?: string
      /** @description List of restrictions associated with the contact */
      restrictions: components['schemas']['RestrictionDto'][]
      /** @description Primary address for the contact or the first address if no primary address available, null if address list is empty */
      primaryAddress?: components['schemas']['AddressDto']
    }
    /**
     * @description To filter visits by status
     * @example BOOKED
     */
    visitStatus: ('BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN')[]
    /**
     * @description Visit Restriction(s) - OPEN / CLOSED / UNKNOWN
     * @example OPEN
     */
    visitRestrictions: ('OPEN' | 'CLOSED' | 'UNKNOWN')[]
    SessionTimeSlotDto: {
      /**
       * Format: HH:mm
       * @description The start time of the generated visit session(s)
       * @example 10:30
       */
      startTime: string
      /**
       * Format: HH:mm
       * @description The end time of the generated visit session(s)
       * @example 11:30
       */
      endTime: string
    }
    VisitPreviewDto: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerId: string
      /**
       * @description First name of the prisoner
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the prisoner
       * @example Smith
       */
      lastName: string
      /**
       * @description Visit reference
       * @example dp-we-rs-te
       */
      visitReference: string
      /**
       * Format: int32
       * @description Number of visitors added to the visit
       * @example 10
       */
      visitorCount: number
      /** @description Timeslot for the visit */
      visitTimeSlot: components['schemas']['SessionTimeSlotDto']
      /**
       * Format: date-time
       * @description Date the visit was first booked or migrated
       * @example 2018-12-01T13:45:00
       */
      firstBookedDateTime: string
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
    }
    PageVisitDto: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    OrchestrationVisitRequestSummaryDto: {
      /** @description Visit reference */
      visitReference: string
      /**
       * Format: date
       * @description Visit date
       */
      visitDate: string
      /**
       * Format: date
       * @description Date the visit request was made
       */
      requestedOnDate: string
      /** @description First name of the prisoner who is being visited */
      prisonerFirstName: string
      /** @description Last name of the prisoner who is being visited */
      prisonerLastName: string
      /** @description ID of the prisoner who is being visited */
      prisonNumber: string
      /** @description Name of the main contact for the visit request */
      mainContact?: string
    }
    VisitRequestsCountDto: {
      /** Format: int32 */
      count: number
    }
    OrchestrationVisitNotificationsDto: {
      /**
       * @description Visit Booking Reference
       * @example v9-d7-ed-7u
       */
      visitReference: string
      /**
       * @description Prisoner Number
       * @example AF34567G
       */
      prisonerNumber: string
      /**
       * @description username of the last user to book the visit
       * @example SMITH1
       */
      bookedByUserName: string
      /**
       * Format: date
       * @description The date of the visit
       * @example 2023-11-08
       */
      visitDate: string
      /**
       * @description Booked by name
       * @example John Smith
       */
      bookedByName: string
      /** @description A list of filtered notifications for a visit */
      notifications: components['schemas']['VisitNotificationEventDto'][]
    }
    /** @description Visit notification event details. */
    VisitNotificationEventDto: {
      /**
       * @description Notification Event Type
       * @enum {string}
       */
      type:
        | 'NON_ASSOCIATION_EVENT'
        | 'PRISONER_RELEASED_EVENT'
        | 'PRISONER_RESTRICTION_CHANGE_EVENT'
        | 'PRISON_VISITS_BLOCKED_FOR_DATE'
        | 'SESSION_VISITS_BLOCKED_FOR_DATE'
        | 'PRISONER_RECEIVED_EVENT'
        | 'PRISONER_ALERTS_UPDATED_EVENT'
        | 'PERSON_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
        | 'VISITOR_UNAPPROVED_EVENT'
      /**
       * @description Notification Event Reference
       * @example aa-bb-cc-dd
       */
      notificationEventReference: string
      /**
       * Format: date-time
       * @description Created date and time
       * @example 2018-12-01T13:45:00
       */
      createdDateTime: string
      /** @description Additional data, empty list if no additional data associated */
      additionalData: components['schemas']['VisitNotificationEventAttributeDto'][]
    }
    NotificationCountDto: {
      /** Format: int32 */
      count: number
    }
    /** @description Visit Session */
    VisitSessionDto: {
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * @description Visit Room
       * @example Visits Main Hall
       */
      visitRoom: string
      /**
       * @description The type of visits taking place within this session
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description The prison id
       * @example LEI
       */
      prisonId: string
      /**
       * Format: int32
       * @description The number of concurrent visits which may take place within this session
       * @example 1
       */
      openVisitCapacity: number
      /**
       * Format: int32
       * @description The count of open visit bookings already reserved or booked for this session
       * @example 1
       */
      openVisitBookedCount?: number
      /**
       * Format: int32
       * @description The number of closed visits which may take place within this session
       * @example 1
       */
      closedVisitCapacity: number
      /**
       * Format: int32
       * @description The count of closed visit bookings already reserved or booked for this session
       * @example 1
       */
      closedVisitBookedCount?: number
      /**
       * Format: date-time
       * @description The start timestamp for this visit session
       * @example 2020-11-01T12:00:00
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The end timestamp for this visit session
       * @example 2020-11-01T14:30:00
       */
      endTimestamp: string
      /** @description Session conflicts */
      sessionConflicts?: ('NON_ASSOCIATION' | 'DOUBLE_BOOKING_OR_RESERVATION')[]
    }
    /** @description Session Capacity */
    SessionCapacityDto: {
      /**
       * Format: int32
       * @description closed capacity
       * @example 10
       */
      closed: number
      /**
       * Format: int32
       * @description open capacity
       * @example 50
       */
      open: number
    }
    SessionDateRangeDto: {
      /**
       * Format: date
       * @description The start of the Validity period for the session template
       * @example 2019-11-02
       */
      validFromDate: string
      /**
       * Format: date
       * @description The end of the Validity period for the session template
       * @example 2019-12-02
       */
      validToDate?: string
    }
    /** @description Session schedule */
    SessionScheduleDto: {
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /** @description The time slot of the generated visit session(s) */
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
      /** @description Validity period for the session template */
      sessionDateRange: components['schemas']['SessionDateRangeDto']
      /** @description The capacity for the session */
      capacity: components['schemas']['SessionCapacityDto']
      /**
       * @description visit type
       * @example Social
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description Determines behaviour of location groups. True will mean the location groups are inclusive, false means they are exclusive. */
      areLocationGroupsInclusive: boolean
      /**
       * @description prisoner location group
       * @example Wing C
       */
      prisonerLocationGroupNames: string[]
      /** @description Determines behaviour of category groups. True will mean the category groups are inclusive, false means they are exclusive. */
      areCategoryGroupsInclusive: boolean
      /**
       * @description prisoner category groups
       * @example Category A Prisoners
       */
      prisonerCategoryGroupNames: string[]
      /** @description Determines behaviour of incentive groups. True will mean the incentive groups are inclusive, false means they are exclusive. */
      areIncentiveGroupsInclusive: boolean
      /**
       * @description prisoner incentive level groups
       * @example Enhanced Incentive Level Prisoners
       */
      prisonerIncentiveLevelGroupNames: string[]
      /**
       * Format: int32
       * @description number of weeks until the weekly day is repeated
       * @example 1
       */
      weeklyFrequency: number
      /**
       * @description visit room name
       * @example Visits Room
       */
      visitRoom: string
    }
    /** @description Visit Session */
    AvailableVisitSessionDto: {
      /**
       * Format: date
       * @description Session date
       * @example 2020-11-01
       */
      sessionDate: string
      /**
       * @description sessionTemplateReference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /** @description Session time slot */
      sessionTimeSlot: components['schemas']['SessionTimeSlotDto']
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      sessionRestriction: 'OPEN' | 'CLOSED'
      /**
       * @description Does session need review, defaults to false
       * @example true
       */
      sessionForReview: boolean
    }
    /** @description Visit Session restriction type */
    AvailableVisitSessionRestrictionDto: {
      /**
       * @description Session Restriction
       * @example OPEN
       * @enum {string}
       */
      sessionRestriction: 'OPEN' | 'CLOSED'
    }
    DlqMessage: {
      body: {
        [key: string]: unknown
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Visit */
    OrchestrationVisitDto: {
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prisoner first name
       * @example James
       */
      prisonerFirstName?: string
      /**
       * @description Prisoner last name
       * @example Smith
       */
      prisonerLastName?: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Visit Status
       * @example BOOKED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN'
      /**
       * @description Visit Sub Status
       * @example AUTO_APPROVED
       * @enum {string}
       */
      visitSubStatus:
        | 'APPROVED'
        | 'AUTO_APPROVED'
        | 'REQUESTED'
        | 'REJECTED'
        | 'AUTO_REJECTED'
        | 'WITHDRAWN'
        | 'CANCELLED'
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
        | 'DETAILS_CHANGED_AFTER_BOOKING'
        | 'BOOKER_CANCELLED'
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /** @description Contact associated with the visit */
      visitContact: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['OrchestrationVisitorDto'][]
      /** @description Additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto']
    }
    /** @description Visitor */
    OrchestrationVisitorDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description Visitor's first name
       * @example James
       */
      firstName?: string
      /**
       * @description Visitor's last name
       * @example James
       */
      lastName?: string
    }
    BookerPrisonerInfoDto: {
      /** @description Prisoner Details */
      prisoner: components['schemas']['PrisonerDto']
      /**
       * Format: int32
       * @description Available VOs - a total of VOs and PVOs
       * @example 0
       */
      availableVos: number
      /**
       * Format: date
       * @description Next available VO date
       * @example 2024-08-01
       */
      nextAvailableVoDate: string
      /** @description Current prison code for the prison that the booker registered the prisoner with */
      registeredPrison: components['schemas']['RegisteredPrisonDto']
    }
    CurrentIncentive: {
      /** @description Incentive level */
      level: components['schemas']['IncentiveLevel']
      /**
       * Format: date-time
       * @description Date time of the incentive
       * @example 2022-11-10T15:47:24
       */
      dateTime: string
      /**
       * Format: date
       * @description Schedule new review date
       * @example 2022-11-10
       */
      nextReviewDate: string
    }
    IncentiveLevel: {
      /**
       * @description code
       * @example STD
       */
      code?: string
      /**
       * @description description
       * @example Standard
       */
      description: string
    }
    PrisonerDto: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description In prison cell location
       * @example A-1-002
       */
      cellLocation?: string
      /** @description Incentive level */
      currentIncentive?: components['schemas']['CurrentIncentive']
      /**
       * @description current prison or outside with last movement information.
       * @example Outside - released from Leeds
       */
      locationDescription?: string
      /**
       * @description Convicted Status
       * @example Convicted
       * @enum {string}
       */
      convictedStatus?: 'Convicted' | 'Remand'
    }
    RegisteredPrisonDto: {
      /**
       * @description prison code
       * @example MDI
       */
      prisonCode: string
      /**
       * @description prison name
       * @example MDI
       */
      prisonName: string
    }
    BookerPrisonerValidationErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      /** @enum {string} */
      validationError:
        | 'PRISONER_RELEASED'
        | 'PRISONER_TRANSFERRED_SUPPORTED_PRISON'
        | 'PRISONER_TRANSFERRED_UNSUPPORTED_PRISON'
        | 'REGISTERED_PRISON_NOT_SUPPORTED'
    }
    /** @description A visitor for a prisoner */
    VisitorInfoDto: {
      /**
       * Format: int64
       * @description Identifier for this contact (Person in NOMIS)
       * @example 5871791
       */
      visitorId: number
      /**
       * @description First name
       * @example John
       */
      firstName: string
      /**
       * @description Last name
       * @example Smith
       */
      lastName: string
      /**
       * Format: date
       * @description Date of birth
       * @example 2000-01-31
       */
      dateOfBirth?: string
      /** @description Relevant visitor restrictions that impact visits or empty list if none */
      visitorRestrictions: components['schemas']['VisitorRestrictionDto'][]
    }
    /** @description Visitor restriction */
    VisitorRestrictionDto: {
      /**
       * @description Restriction Type
       * @example BAN
       * @enum {string}
       */
      restrictionType: 'BAN'
      /**
       * Format: date
       * @description Restriction Expiry
       * @example 2029-12-31
       */
      expiryDate?: string
    }
    PrisonerProfileDto: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerId: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId?: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description In prison cell location
       * @example A-1-002
       */
      cellLocation?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description Category description (from list of assessments)
       * @example Category C
       */
      category?: string
      /**
       * @description Convicted Status
       * @example Convicted
       * @enum {string}
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description Incentive level
       * @example Standard
       */
      incentiveLevel?: string
      /** @description Alert */
      alerts?: components['schemas']['AlertDto'][]
      /** @description Balances of visit orders and privilege visit orders */
      visitBalances?: components['schemas']['VisitBalancesDto']
      /** @description Past and future visits for the prisoner based on configured duration. */
      visits: components['schemas']['VisitSummaryDto'][]
      /** @description Prisoner restrictions */
      prisonerRestrictions: components['schemas']['OffenderRestrictionDto'][]
    }
    /** @description Balances of visit orders and privilege visit orders */
    VisitBalancesDto: {
      /**
       * Format: int32
       * @description Balance of visit orders remaining
       */
      remainingVo: number
      /**
       * Format: int32
       * @description Balance of privilege visit orders remaining
       */
      remainingPvo: number
      /**
       * Format: date
       * @description Date of last IEP adjustment for Visit orders
       */
      latestIepAdjustDate?: string
      /**
       * Format: date
       * @description Date of last IEP adjustment for Privilege Visit orders
       */
      latestPrivIepAdjustDate?: string
    }
    /** @description Visit Summary */
    VisitSummaryDto: {
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prison name
       * @example MDI Prison
       */
      prisonName?: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'BOOKED' | 'CANCELLED' | 'REQUESTED' | 'REJECTED' | 'AUTO_REJECTED' | 'WITHDRAWN'
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * Format: date-time
       * @description The date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       * @example 2018-12-01T13:45:00
       */
      endTimestamp: string
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorSummaryDto'][]
    }
    /** @description Full Visitor details */
    VisitorSummaryDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description Visitor's first name
       * @example John
       */
      firstName?: string
      /**
       * @description Visitor's last name
       * @example Smith
       */
      lastName?: string
    }
    /** @description Is the date passed excluded */
    IsExcludeDateDto: {
      /** @description True if the date is excluded, false if not excluded by prison for visits. */
      isExcluded: boolean
      excluded?: boolean
    }
    /** @description Prison dto */
    PrisonDto: {
      /**
       * @description prison code
       * @example BHI
       */
      code: string
      /**
       * @description prison name
       * @example HMP Hewell
       */
      prisonName: string
      /**
       * @description is prison active
       * @example true
       */
      active: boolean
      /**
       * Format: int32
       * @description minimum number of days notice from the current date to booked a visit
       * @example 2
       */
      policyNoticeDaysMin: number
      /**
       * Format: int32
       * @description maximum number of days notice from the current date to booked a visit
       * @example 28
       */
      policyNoticeDaysMax: number
      /**
       * Format: int32
       * @description Max number of total visitors
       */
      maxTotalVisitors: number
      /**
       * Format: int32
       * @description Max number of adults
       */
      maxAdultVisitors: number
      /**
       * Format: int32
       * @description Max number of children
       */
      maxChildVisitors: number
      /**
       * Format: int32
       * @description Age of adults in years
       */
      adultAgeYears: number
      /**
       * @description Contact email address of prison
       * @example example@example.com
       */
      emailAddress?: string
      /** @description Contact number of prison */
      phoneNumber?: string
      /** @description Web address of prison */
      webAddress?: string
      /** @description prison user client */
      clients: components['schemas']['PrisonUserClientDto'][]
    }
    /** @description Prison user client dto */
    PrisonUserClientDto: {
      /**
       * @description User type
       * @example STAFF
       * @enum {string}
       */
      userType: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      /**
       * @description is prison user client active
       * @example true
       */
      active: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  cancelVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitOrchestrationDto']
      }
    }
    responses: {
      /** @description Visit cancelled */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to cancel a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to cancel a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description applicationReference
         * @example dfs-wjs-eqr
         */
        applicationReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingOrchestrationRequestDto']
      }
    }
    responses: {
      /** @description Visit updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to update a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Application validation failed */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApplicationValidationErrorResponse']
        }
      }
    }
  }
  bookAVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description applicationReference
         * @example dfs-wjs-eqr
         */
        applicationReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingOrchestrationRequestDto']
      }
    }
    responses: {
      /** @description Visit updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to book a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to book a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Application validation failed */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApplicationValidationErrorResponse']
        }
      }
    }
  }
  rejectVisitRequestByReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description visit reference */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RejectVisitRequestBodyDto']
      }
    }
    responses: {
      /** @description Successfully rejected visit request */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrchestrationApproveRejectVisitRequestResponseDto']
        }
      }
      /** @description Incorrect request to reject visit request by reference (not found or not in correct sub status) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  approveVisitRequestByReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description visit reference */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ApproveVisitRequestBodyDto']
      }
    }
    responses: {
      /** @description Successfully approved visit request */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrchestrationApproveRejectVisitRequestResponseDto']
        }
      }
      /** @description Incorrect request to approve visit request by reference (not found or not in correct sub status) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  ignoreVisitNotifications: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example v9-d7-ed-7u
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IgnoreVisitNotificationsDto']
      }
    }
    responses: {
      /** @description Visit notifications cleared and reason noted. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to ignore visit notifications. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to ignore visit notifications. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  changeIncompleteApplication: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description reference
         * @example dfs-wjs-eqr
         */
        reference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeApplicationDto']
      }
    }
    responses: {
      /** @description Visit slot changed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to changed a visit slot */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to changed a visit slot */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit slot not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createApplicationForAnExistingVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookingReference
         * @example v9-d7-ed-7u
         */
        bookingReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApplicationDto']
      }
    }
    responses: {
      /** @description Visit created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to change a visit */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to change a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  bookerAuthorisation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthDetailDto']
      }
    }
    responses: {
      /** @description One login details matched with pre populated booker */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['BookerReference']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions for this action */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booker not authorised / not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeExcludeDateForSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example aaa-bbb-ccc
         */
        sessionTemplateReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description Exclude dates successfully removed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to remove exclude date */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session Template not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addExcludeDateForSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example aaa-bbb-ccc
         */
        sessionTemplateReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description Exclude dates successfully added */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to add exclude date */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session template not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeExcludeDateForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison code
         * @example HEI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description Exclude dates successfully removed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to remove exclude date */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addExcludeDateForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison code
         * @example HEI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ExcludeDateDto']
      }
    }
    responses: {
      /** @description Exclude dates successfully added */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*':
            | '100 CONTINUE'
            | '101 SWITCHING_PROTOCOLS'
            | '102 PROCESSING'
            | '103 EARLY_HINTS'
            | '103 CHECKPOINT'
            | '200 OK'
            | '201 CREATED'
            | '202 ACCEPTED'
            | '203 NON_AUTHORITATIVE_INFORMATION'
            | '204 NO_CONTENT'
            | '205 RESET_CONTENT'
            | '206 PARTIAL_CONTENT'
            | '207 MULTI_STATUS'
            | '208 ALREADY_REPORTED'
            | '226 IM_USED'
            | '300 MULTIPLE_CHOICES'
            | '301 MOVED_PERMANENTLY'
            | '302 FOUND'
            | '302 MOVED_TEMPORARILY'
            | '303 SEE_OTHER'
            | '304 NOT_MODIFIED'
            | '305 USE_PROXY'
            | '307 TEMPORARY_REDIRECT'
            | '308 PERMANENT_REDIRECT'
            | '400 BAD_REQUEST'
            | '401 UNAUTHORIZED'
            | '402 PAYMENT_REQUIRED'
            | '403 FORBIDDEN'
            | '404 NOT_FOUND'
            | '405 METHOD_NOT_ALLOWED'
            | '406 NOT_ACCEPTABLE'
            | '407 PROXY_AUTHENTICATION_REQUIRED'
            | '408 REQUEST_TIMEOUT'
            | '409 CONFLICT'
            | '410 GONE'
            | '411 LENGTH_REQUIRED'
            | '412 PRECONDITION_FAILED'
            | '413 PAYLOAD_TOO_LARGE'
            | '413 REQUEST_ENTITY_TOO_LARGE'
            | '414 URI_TOO_LONG'
            | '414 REQUEST_URI_TOO_LONG'
            | '415 UNSUPPORTED_MEDIA_TYPE'
            | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
            | '417 EXPECTATION_FAILED'
            | '418 I_AM_A_TEAPOT'
            | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
            | '420 METHOD_FAILURE'
            | '421 DESTINATION_LOCKED'
            | '422 UNPROCESSABLE_ENTITY'
            | '423 LOCKED'
            | '424 FAILED_DEPENDENCY'
            | '425 TOO_EARLY'
            | '426 UPGRADE_REQUIRED'
            | '428 PRECONDITION_REQUIRED'
            | '429 TOO_MANY_REQUESTS'
            | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
            | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
            | '500 INTERNAL_SERVER_ERROR'
            | '501 NOT_IMPLEMENTED'
            | '502 BAD_GATEWAY'
            | '503 SERVICE_UNAVAILABLE'
            | '504 GATEWAY_TIMEOUT'
            | '505 HTTP_VERSION_NOT_SUPPORTED'
            | '506 VARIANT_ALSO_NEGOTIATES'
            | '507 INSUFFICIENT_STORAGE'
            | '508 LOOP_DETECTED'
            | '509 BANDWIDTH_LIMIT_EXCEEDED'
            | '510 NOT_EXTENDED'
            | '511 NETWORK_AUTHENTICATION_REQUIRED'
        }
      }
      /** @description Incorrect request to add exclude date */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to add exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createInitialApplication: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApplicationDto']
      }
    }
    responses: {
      /** @description Visit slot reserved */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApplicationDto']
        }
      }
      /** @description Incorrect request to reserve a slot */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to reserve a slot */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  registerPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookerReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterPrisonerForBookerDto']
      }
    }
    responses: {
      /** @description Registration successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request to register a prisoner to a booker */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions for this action */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner registration failed */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': 'FAILED_REGISTRATION'
        }
      }
    }
  }
  getVisitsByReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve a visit */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitFullDetailsByReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        reference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Detailed visit summary returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitBookingDetailsDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve a detailed visit summary */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to get a detailed visit summary */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitsBySessionTemplate: {
    parameters: {
      query: {
        /**
         * @description Session template reference
         * @example v9-d7-ed-7u
         */
        sessionTemplateReference?: string
        /**
         * @description Get visits for session date
         * @example 2023-05-31
         */
        sessionDate: string
        /**
         * @description To filter visits by status
         * @example BOOKED
         */
        visitStatus: components['schemas']['visitStatus']
        /**
         * @description Visit Restriction(s) - OPEN / CLOSED / UNKNOWN
         * @example OPEN
         */
        visitRestrictions?: components['schemas']['visitRestrictions']
        /**
         * @description Filter results by prison id/code
         * @example MDI
         */
        prisonCode: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit details returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitPreviewDto'][]
        }
      }
      /** @description Incorrect request to Get visits for session template */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve visits for session template */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitsByFilterPageable: {
    parameters: {
      query: {
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId?: string
        /**
         * @description Filter results by prison id/code
         * @example MDI
         */
        prisonId?: string
        /**
         * @description Filter results by visits that start on or after the given date
         * @example 2021-11-03
         */
        visitStartDate?: string
        /**
         * @description Filter results by visits that start on or before the given date
         * @example 2021-11-03
         */
        visitEndDate?: string
        /**
         * @description Filter results by visit status
         * @example BOOKED
         */
        visitStatus: string[]
        /**
         * @description Pagination page number, starting at zero
         * @example 0
         */
        page: number
        /**
         * @description Pagination size per page
         * @example 50
         */
        size: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageVisitDto']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve visits */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFutureVisitsForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned future visits for a prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitDto'][]
        }
      }
      /** @description Incorrect request to get future visits for a prisoner */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get future visits for a prisoner */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitRequestsForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully retrieved all visit requests for a prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrchestrationVisitRequestSummaryDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitRequestsCountForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully retrieve count of visit requests for a prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitRequestsCountDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFutureNotificationVisits: {
    parameters: {
      query?: {
        /** @description list of notificationEventTypes */
        types?: (
          | 'NON_ASSOCIATION_EVENT'
          | 'PRISONER_RELEASED_EVENT'
          | 'PRISONER_RESTRICTION_CHANGE_EVENT'
          | 'PRISON_VISITS_BLOCKED_FOR_DATE'
          | 'SESSION_VISITS_BLOCKED_FOR_DATE'
          | 'PRISONER_RECEIVED_EVENT'
          | 'PRISONER_ALERTS_UPDATED_EVENT'
          | 'PERSON_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_UNAPPROVED_EVENT'
        )[]
      }
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Retrieved future visits with notifications by prison code */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrchestrationVisitNotificationsDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNotificationCountForPrison: {
    parameters: {
      query?: {
        /** @description list of notificationEventTypes */
        types?: (
          | 'NON_ASSOCIATION_EVENT'
          | 'PRISONER_RELEASED_EVENT'
          | 'PRISONER_RESTRICTION_CHANGE_EVENT'
          | 'PRISON_VISITS_BLOCKED_FOR_DATE'
          | 'SESSION_VISITS_BLOCKED_FOR_DATE'
          | 'PRISONER_RECEIVED_EVENT'
          | 'PRISONER_ALERTS_UPDATED_EVENT'
          | 'PERSON_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_RESTRICTION_UPSERTED_EVENT'
          | 'VISITOR_UNAPPROVED_EVENT'
        )[]
      }
      header?: never
      path: {
        /**
         * @description prisonCode
         * @example CFI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Retrieve notification count for a prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationCountDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitReferenceByClientReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description clientReference
         * @example AABDC234
         */
        clientReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit reference returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve a visit reference by client reference */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to get a visit reference by client reference */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to get a visit reference by client reference */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitSessions: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId?: string
        /**
         * @description Override the default minimum number of days notice from the current date
         * @example 2
         */
        min?: number
        /**
         * @description Override the default maximum number of days to book-ahead from the current date
         * @example 28
         */
        max?: number
        /**
         * @description Username for the user making the request. Used to exclude user's pending applications from session capacity count. Optional, ignored if not passed in.
         * @example user-1
         */
        username?: string
        /**
         * @description user type for the session
         * @example STAFF
         */
        userType?: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit session information returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitSessionDto'][]
        }
      }
      /** @description Incorrect request to Get visit sessions  */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitSession: {
    parameters: {
      query: {
        /**
         * @description Prison code
         * @example MDI
         */
        prisonCode: string
        /**
         * @description Session date
         * @example 2020-11-01
         */
        sessionDate: string
        /**
         * @description Session template reference
         * @example xye-fjc-abc
         */
        sessionTemplateReference: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the session was found and returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitSessionDto']
        }
      }
      /** @description Incorrect request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionSchedule: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example CLI
         */
        prisonId: string
        /**
         * @description Session date
         * @example 2023-01-31
         */
        date: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Session templates returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SessionScheduleDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAvailableVisitSessions: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId: string
        /**
         * @description List of visitors who require visit sessions
         * @example 4729510,4729220
         */
        visitors?: number[]
        /**
         * @description The current application reference to be excluded from capacity count and double booking
         * @example dfs-wjs-eqr
         */
        excludedApplicationReference?: string
        /**
         * @description Username for the user making the request. Used to exclude user's pending applications from session capacity count. Optional, ignored if not passed in.
         * @example user-1
         */
        username?: string
        /**
         * @description user type for the session
         * @example PUBLIC
         */
        userType?: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit session information returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['AvailableVisitSessionDto'][]
        }
      }
      /** @description Incorrect request to Get visit sessions  */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionCapacity: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example CLI
         */
        prisonId: string
        /**
         * @description Session date
         * @example 2020-11-01
         */
        sessionDate: string
        /**
         * @description Session start time
         * @example 13:30:00
         */
        sessionStartTime: string
        /**
         * @description Session end time
         * @example 14:30:00
         */
        sessionEndTime: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the session capacity for the given sessions */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SessionCapacityDto']
        }
      }
      /** @description Incorrect request  */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Capacity not found  */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAvailableVisitSessions_1: {
    parameters: {
      query: {
        /**
         * @description Query by NOMIS Prison Identifier
         * @example MDI
         */
        prisonId: string
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId: string
        /**
         * @description Filter sessions by session restriction - OPEN or CLOSED, if prisoner has CLOSED it will use that
         * @example CLOSED
         */
        sessionRestriction?: 'OPEN' | 'CLOSED'
        /**
         * @description List of visitors who require visit sessions
         * @example 4729510,4729220
         */
        visitors?: number[]
        /** @description Defaults to true if not passed. If true, will not return visit times that clash with higher priority legal or medical appointments. */
        withAppointmentsCheck?: boolean
        /**
         * @description The current application reference to be excluded from capacity count and double booking
         * @example dfs-wjs-eqr
         */
        excludedApplicationReference?: string
        /** @description For PVB only. Allows service to advance the opening session slot booking window by n days on top of any other overrides. Defaults to 0 if not passed. */
        pvbAdvanceFromDateByDays?: number
        /** @description minimum override in days for opening session slot booking window, E.g. 2 will set min booking window to today + 2 days */
        fromDateOverride?: number
        /** @description maximum override in days for closing session slot booking window, E.g. 28 will set max booking window to today + 28 days */
        toDateOverride?: number
        /**
         * @description Username for the user making the request. Used to exclude user's pending applications from session capacity count. Optional, ignored if not passed in.
         * @example user-1
         */
        username?: string
        /**
         * @description user type for the session
         * @example PUBLIC
         */
        userType?: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit session information returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['AvailableVisitSessionDto'][]
        }
      }
      /** @description Incorrect request to Get visit sessions  */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionRestrictionType: {
    parameters: {
      query: {
        /**
         * @description Filter results by prisoner id
         * @example A12345DC
         */
        prisonerId: string
        /**
         * @description List of visitors who require visit sessions
         * @example 4729510,4729220
         */
        visitors?: number[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Available visit session restriction returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['AvailableVisitSessionRestrictionDto']
        }
      }
      /** @description Incorrect request to Get available visit session restriction */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getCancelledPublicVisitsByBookerReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description cancelled public visits returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['OrchestrationVisitDto'][]
        }
      }
      /** @description Incorrect request to get cancelled public visits by booker reference */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPastPublicBookedVisitsByBookerReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description past public visits returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['OrchestrationVisitDto'][]
        }
      }
      /** @description Incorrect request to get past public visits by booker reference */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFuturePublicBookedVisitsByBookerReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description bookerReference
         * @example asd-aed-vhj
         */
        bookerReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Future public booked visits returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['OrchestrationVisitDto'][]
        }
      }
      /** @description Incorrect request to get future booked visits by booker reference */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPermittedPrisonersForBooker: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booker's unique reference.
         * @example A12345DC
         */
        bookerReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned prisoners associated with a booker */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['BookerPrisonerInfoDto'][]
        }
      }
      /** @description Incorrect request to get prisoners associated with a booker */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get prisoners associated with a booker */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  validatePrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookerReference: string
        /**
         * @description Prisoner Id for whom visitors need to be returned.
         * @example A12345DC
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Validation passed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request to validate prisoner associated with a booker */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions for this action */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner validation failed */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookerPrisonerValidationErrorResponse']
        }
      }
    }
  }
  getPermittedVisitorsForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookerReference: string
        /**
         * @description Prisoner Id for whom visitors need to be returned.
         * @example A12345DC
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned permitted permitted visitors for a prisoner associated with that booker */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['VisitorInfoDto'][]
        }
      }
      /** @description Incorrect request to get permitted visitors for a prisoner associated with that booker */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get permitted visitors for a prisoner associated with that booker */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerProfile: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonId: string
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prisoner Profile Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PrisonerProfileDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve a prisoner's profile */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner profile not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect request to the prisoner profile page */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  isDateExcludedForSessionTemplateVisits: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example aaa-bbb-ccc
         */
        sessionTemplateReference: string
        /**
         * @description date to be checked if excluded for session template
         * @example 2024-12-26
         */
        excludeDate: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response if the date is excluded for the session template */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IsExcludeDateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to check if date excluded */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPastExcludeDatesForSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example aaa-bbb-ccc
         */
        sessionTemplateReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Exclude dates successfully returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ExcludeDateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFutureExcludeDatesForSessionTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description session template reference
         * @example aaa-bbb-ccc
         */
        sessionTemplateReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Exclude dates successfully returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ExcludeDateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session template not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSupportedPrisons: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description type
         * @example STAFF
         */
        type: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Supported prisons returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          /** @example [
           *       "HEI",
           *       "MDI"
           *     ] */
          'application/json': string[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSupportedPrisonDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description type
         * @example STAFF
         */
        type: 'STAFF' | 'PUBLIC' | 'SYSTEM' | 'PRISONER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Supported prisons returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PrisonRegisterPrisonDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get supported prison details */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison id
         * @example BHI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prison returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PrisonDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to get prison */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  isDateExcludedForPrisonVisits: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison code
         * @example HEI
         */
        prisonCode: string
        /**
         * @description date to be checked if excluded by prison for visits
         * @example 2024-12-26
         */
        excludeDate: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response if the date is excluded for visits at the prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IsExcludeDateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to check if date excluded */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPastExcludeDatesForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison code
         * @example HEI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Exclude dates successfully returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ExcludeDateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFutureExcludeDatesForPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description prison code
         * @example HEI
         */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Exclude dates successfully returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ExcludeDateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view exclude dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found on visit-scheduler */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
