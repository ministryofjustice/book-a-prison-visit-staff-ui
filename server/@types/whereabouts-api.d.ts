/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendance/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates existing attendance information
     * @description Updates the attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used.
     */
    put: operations['putAttendance']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cell/make-cell-move': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Make a cell move for an offender. Triggers the creation of a MOVED_CELL case note. */
    post: operations['makeCellMove']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create new attendance records for multiple offenders (This endpoint does not trigger IEP warnings)
     * @description Stores new attendance record for multiple offenders, posts attendance details back up to PNOMIS
     */
    post: operations['postAttendances']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prison}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Request attendance details
     * @description Returns set of attendance details for set of booking ids
     */
    get: operations['getAttendanceForBookings']
    put?: never
    /**
     * Request attendance details
     * @description Returns set of attendance details for set of booking ids
     */
    post: operations['getAttendanceForBookingsByPost']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prison}/attendance-over-date-range': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Request attendance details
     * @description Returns set of attendance details for set of booking ids
     */
    post: operations['getAttendanceForBookingsOverDateRangeByPost']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create new attendance
     * @description Stores new attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used.
     */
    post: operations['postAttendance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * createAppointment
     * @description Create an appointment
     */
    post: operations['createAppointment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/events/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * getEvents
     * @description All scheduled events for offender.  This endpoint filters out cancelled events.
     */
    get: operations['getEvents']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cell/cell-move-reason/booking/{bookingId}/bed-assignment-sequence/{bedAssignmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Return cell move reason */
    get: operations['getCellMoveReason']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prison}/{event-location}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Request attendance details
     * @description Returns set of attendance details
     */
    get: operations['getAttendanceForEventLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prison}/unaccounted-for': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Request unaccounted for prisoners
     * @description Return a set of prisoners that haven't attended a scheduled activity
     */
    get: operations['getPrisonersUnaccountedFor']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prison}/absences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Request absences details
     * @description Returns set of attendance details for attendances with an absent reason
     */
    get: operations['getAbsences']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prison}/absences-for-scheduled-activities/{absentReason}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Request absences
     * @description Return a set of absences for all offenders that have scheduled activity
     */
    get: operations['getAbsencesForReason']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/offender/{offenderNo}/unacceptable-absences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Request unacceptable absence details
     * @description Returns unacceptable absence attendance details for an offender
     */
    get: operations['getAttendanceDetailsForOffender']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/offender/{offenderNo}/unacceptable-absence-count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Return counts of unacceptable absences and totals over time for an offender */
    get: operations['getAttendanceSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/changes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Return all changes relating to an attendance */
    get: operations['getAttendanceChanges']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendance-statistics/{prison}/over-date-range': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Request attendance statistics
     * @description Request attendance statistics
     */
    get: operations['getAttendanceForEventLocation_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{agencyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * getAppointments
     * @description List of appointments for the given agency that match the search criteria.
     */
    get: operations['getAppointments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * getAppointment
     * @description Return appointment details
     */
    get: operations['getAppointment']
    put?: never
    post?: never
    /**
     * deleteAppointment
     * @description Delete an appointment
     */
    delete: operations['deleteAppointment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/absence-reasons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['reasons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment/recurring/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * deleteRecurringAppointmentSequence
     * @description Delete the whole sequence of a recurring appointment
     */
    delete: operations['deleteRecurringAppointmentSequence']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    UpdateAttendanceDto: {
      attended: boolean
      paid: boolean
      /** @enum {string} */
      absentReason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      absentSubReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      comments?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status?: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    CellMoveDetails: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
      internalLocationDescriptionDestination: string
      cellMoveReasonCode: string
      commentText: string
    }
    CellMoveResponse: {
      cellMoveResult: components['schemas']['CellMoveResult']
    }
    CellMoveResult: {
      /** Format: int64 */
      bookingId: number
      agencyId: string
      /** Format: int64 */
      assignedLivingUnitId: number
      assignedLivingUnitDesc: string
      /** Format: int32 */
      bedAssignmentHistorySequence: number
      /** Format: int64 */
      caseNoteId?: number
    }
    /** @description Attendance parameters */
    AttendancesDto: {
      bookingActivities: components['schemas']['BookingActivity'][]
      /** Format: int64 */
      eventLocationId: number
      /** @enum {string} */
      period: 'AM' | 'PM' | 'ED'
      prisonId: string
      /** Format: date */
      eventDate: string
      /** @enum {string} */
      reason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      attended: boolean
      paid: boolean
      comments?: string
    }
    BookingActivity: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      activityId: number
    }
    AttendanceDto: {
      /** Format: int64 */
      id?: number
      /** Format: int64 */
      bookingId?: number
      /** Format: int64 */
      eventId?: number
      /** Format: int64 */
      eventLocationId?: number
      /** @enum {string} */
      period?: 'AM' | 'PM' | 'ED'
      prisonId?: string
      attended?: boolean
      /** @enum {string} */
      absentReason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      absentSubReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      paid?: boolean
      /** Format: date */
      eventDate?: string
      comments?: string
      /** Format: date-time */
      createDateTime?: string
      createUserId?: string
      /** Format: date-time */
      modifyDateTime?: string
      modifyUserId?: string
      /** Format: int64 */
      caseNoteId?: number
      locked?: boolean
      cellLocation?: string
      absentSubReasonDescription?: string
      absentReasonDescription?: string
    }
    AttendancesResponse: {
      attendances?: components['schemas']['AttendanceDto'][]
    }
    /** @description Attendance details */
    CreateAttendanceDto: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      eventId: number
      /** Format: int64 */
      eventLocationId: number
      /** @enum {string} */
      period: 'AM' | 'PM' | 'ED'
      prisonId: string
      attended: boolean
      paid: boolean
      /** @enum {string} */
      absentReason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      absentSubReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      /** Format: date */
      eventDate: string
      comments?: string
    }
    CreateAppointmentSpecification: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      locationId: number
      appointmentType: string
      comment?: string
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      repeat?: components['schemas']['Repeat']
    }
    Repeat: {
      /** @enum {string} */
      repeatPeriod: 'WEEKLY' | 'DAILY' | 'WEEKDAYS' | 'MONTHLY' | 'FORTNIGHTLY'
      /** Format: int64 */
      count: number
    }
    CreatedAppointmentDetailsDto: {
      /** Format: int64 */
      appointmentEventId: number
      /** Format: int64 */
      bookingId: number
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      appointmentType: string
      /** Format: int64 */
      locationId: number
    }
    DlqMessage: {
      body: {
        [key: string]: unknown
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    ScheduledEventDto: {
      /** Format: int64 */
      bookingId: number
      eventClass?: string
      /** Format: int64 */
      eventId?: number
      eventStatus?: string
      eventType?: string
      eventTypeDesc?: string
      eventSubType?: string
      eventSubTypeDesc?: string
      /** Format: date */
      eventDate?: string
      /** Format: date-time */
      startTime?: string
      /** Format: date-time */
      endTime?: string
      eventLocation?: string
      /** Format: int64 */
      eventLocationId?: number
      agencyId?: string
      eventSource?: string
      eventSourceCode?: string
      eventSourceDesc?: string
      eventOutcome?: string
      performance?: string
      outcomeComment?: string
      paid?: boolean
      payRate?: number
      locationCode?: string
      createUserId?: string
    }
    CellMoveReasonDto: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      bedAssignmentsSequence: number
      /** Format: int64 */
      caseNoteId: number
    }
    CellMoveReasonResponse: {
      cellMoveReason: components['schemas']['CellMoveReasonDto']
    }
    /** @description Prisoner Schedule */
    PrisonerScheduleDto: {
      /** @description Offender number (e.g. NOMS Number) */
      offenderNo: string
      /**
       * Format: int64
       * @description Activity id if any. Used to attend or pay the event
       */
      eventId?: number
      /**
       * Format: int64
       * @description Booking id for offender
       */
      bookingId?: number
      /**
       * Format: int64
       * @description The number which (uniquely) identifies the internal location associated with the Scheduled Event (Prisoner Schedule)
       */
      locationId: number
      /** @description Offender first name */
      firstName: string
      /** @description Offender last name */
      lastName: string
      /** @description Offender cell */
      cellLocation: string
      /** @description Event code */
      event: string
      /** @description Event type, e.g. VISIT, APP, PRISON_ACT */
      eventType: string
      /** @description Description of event code */
      eventDescription: string
      /** @description Location of the event */
      eventLocation: string
      /**
       * Format: int64
       * @description Id of an internal event location
       */
      eventLocationId?: number
      /** @description The event's status. Includes 'CANC', meaning cancelled for 'VISIT' */
      eventStatus: string
      /** @description Comment */
      comment: string
      /**
       * Format: date-time
       * @description Date and time at which event starts
       */
      startTime: string
      /**
       * Format: date-time
       * @description Date and time at which event ends
       */
      endTime?: string
      /** @description Attendance, possible values are the codes in the 'PS_PA_OC' reference domain */
      eventOutcome?: string
      /** @description Possible values are the codes in the 'PERFORMANCE' reference domain */
      performance?: string
      /** @description No-pay reason */
      outcomeComment?: string
      /** @description Activity paid flag */
      paid?: boolean
      /** @description Amount paid per activity session in pounds */
      payRate?: number
      /** @description Activity excluded flag */
      excluded?: boolean
      /**
       * @description Activity time slot
       * @enum {string}
       */
      timeSlot?: 'AM' | 'PM' | 'ED'
      /** @description The code for the activity location */
      locationCode?: string
      /** @description Event scheduled has been suspended */
      suspended?: boolean
    }
    ScheduledResponse: {
      scheduled: components['schemas']['PrisonerScheduleDto'][]
    }
    AbsenceDto: {
      /** Format: int64 */
      attendanceId?: number
      /** Format: int64 */
      bookingId?: number
      offenderNo?: string
      /** Format: int64 */
      eventId?: number
      /** Format: int64 */
      eventLocationId?: number
      /** Format: date */
      eventDate?: string
      /** @enum {string} */
      period?: 'AM' | 'PM' | 'ED'
      /** @enum {string} */
      reason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      subReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      subReasonDescription?: string
      eventDescription?: string
      comments?: string
      cellLocation?: string
      firstName?: string
      lastName?: string
      suspended?: boolean
    }
    AbsencesResponse: {
      description: string
      absences: components['schemas']['AbsenceDto'][]
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    AttendanceHistoryDto: {
      /** Format: date */
      eventDate: string
      activity?: string
      activityDescription?: string
      location?: string
      comments?: string
    }
    PageAttendanceHistoryDto: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AttendanceHistoryDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    AttendanceSummary: {
      /** Format: int32 */
      acceptableAbsence: number
      /** Format: int32 */
      unacceptableAbsence: number
      /** Format: int32 */
      total: number
    }
    AttendanceChangeDto: {
      /** Format: int64 */
      id: number
      /** Format: int64 */
      attendanceId: number
      /** Format: int64 */
      eventId: number
      /** Format: int64 */
      eventLocationId: number
      /** Format: int64 */
      bookingId: number
      /** @enum {string} */
      changedFrom:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'Attended'
      /** @enum {string} */
      changedTo:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'Attended'
      /** Format: date-time */
      changedOn?: string
      changedBy?: string
      prisonId?: string
    }
    AttendanceChangesResponse: {
      changes?: components['schemas']['AttendanceChangeDto'][]
    }
    PaidReasons: {
      /** Format: int32 */
      approvedCourse?: number
      /** Format: int32 */
      notRequired?: number
      /** Format: int32 */
      acceptableAbsence?: number
      acceptableAbsenceDescription: string
      approvedCourseDescription: string
      notRequiredDescription: string
    }
    Stats: {
      /** Format: int32 */
      scheduleActivities: number
      /** Format: int32 */
      notRecorded: number
      paidReasons?: components['schemas']['PaidReasons']
      unpaidReasons?: components['schemas']['UnpaidReasons']
      /** Format: int32 */
      suspended: number
      /** Format: int32 */
      attended: number
    }
    UnpaidReasons: {
      /** Format: int32 */
      restDay?: number
      /** Format: int32 */
      restInCellOrSick?: number
      /** Format: int32 */
      refused?: number
      /** Format: int32 */
      refusedIncentiveLevelWarning?: number
      /** Format: int32 */
      sessionCancelled?: number
      /** Format: int32 */
      unacceptableAbsence?: number
      /** Format: int32 */
      unacceptableAbsenceIncentiveLevelWarning?: number
      refusedDescription: string
      refusedIncentiveLevelWarningDescription: string
      sessionCancelledDescription: string
      unacceptableAbsenceDescription: string
      unacceptableAbsenceIncentiveLevelWarningDescription: string
      restDayDescription: string
      restInCellOrSickDescription: string
    }
    AppointmentSearchDto: {
      /** Format: int64 */
      id: number
      agencyId: string
      /** Format: int64 */
      locationId: number
      locationDescription: string
      appointmentTypeCode: string
      appointmentTypeDescription: string
      offenderNo: string
      firstName: string
      lastName: string
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      createUserId: string
    }
    AppointmentDetailsDto: {
      appointment: components['schemas']['AppointmentDto']
      /**
       * @deprecated
       * @description Not populated
       */
      videoLinkBooking?: components['schemas']['VideoLinkBookingDto']
      recurring?: components['schemas']['RecurringAppointmentDto']
    }
    AppointmentDto: {
      /** Format: int64 */
      id: number
      agencyId: string
      /** Format: int64 */
      locationId: number
      appointmentTypeCode: string
      offenderNo?: string
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      createUserId?: string
      comment?: string
    }
    RecurringAppointmentDto: {
      /** Format: int64 */
      id: number
      /** @enum {string} */
      repeatPeriod: 'WEEKLY' | 'DAILY' | 'WEEKDAYS' | 'MONTHLY' | 'FORTNIGHTLY'
      /** Format: int64 */
      count: number
      /** Format: date-time */
      startTime: string
    }
    VideoLinkAppointmentDto: {
      /** Format: int64 */
      id: number
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      appointmentId: number
      /** Format: int64 */
      videoLinkBookingId: number
      /** Format: int64 */
      mainAppointmentId?: number
      court: string
      courtId?: string
      /** @enum {string} */
      hearingType: 'MAIN' | 'PRE' | 'POST'
      createdByUsername?: string
      madeByTheCourt?: boolean
      /** Format: date-time */
      startTime?: string
      /** Format: date-time */
      endTime?: string
      /** Format: int64 */
      locationId?: number
    }
    VideoLinkBookingDto: {
      /** Format: int64 */
      id: number
      main: components['schemas']['VideoLinkAppointmentDto']
      pre?: components['schemas']['VideoLinkAppointmentDto']
      post?: components['schemas']['VideoLinkAppointmentDto']
    }
    AbsentReasonDto: {
      /** @enum {string} */
      code:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      name: string
    }
    AbsentReasonsDto: {
      paidReasons: components['schemas']['AbsentReasonDto'][]
      unpaidReasons: components['schemas']['AbsentReasonDto'][]
      triggersIEPWarning: (
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      )[]
      triggersAbsentSubReason: (
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      )[]
      paidSubReasons: components['schemas']['AbsentSubReasonDto'][]
      unpaidSubReasons: components['schemas']['AbsentSubReasonDto'][]
    }
    AbsentSubReasonDto: {
      /** @enum {string} */
      code:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      name: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  putAttendance: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendanceDto']
      }
    }
    responses: {
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  makeCellMove: {
    parameters: {
      query?: {
        lockTimeout?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CellMoveDetails']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CellMoveResponse']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CellMoveResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  postAttendances: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AttendancesDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  getAttendanceForBookings: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
        /** @description Booking ids (bookings=1&bookings=2) */
        bookings: number[]
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  getAttendanceForBookingsByPost: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  getAttendanceForBookingsOverDateRangeByPost: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        fromDate: string
        /** @description Date of event in format YYYY-MM-DD defaults to fromDate */
        toDate?: string
        /** @description Time period. Leave blank for AM + PM */
        period?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  postAttendance: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAttendanceDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendanceDto']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict creating an attendance. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAppointment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentSpecification']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatedAppointmentDetailsDto'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatedAppointmentDetailsDto'][]
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getEvents: {
    parameters: {
      query?: {
        /** @description Returned events must be scheduled on or after this date (in YYYY-MM-DD format).  This date must be on or after today. */
        fromDate?: string
        /** @description Returned events must be scheduled on or before this date (in YYYY-MM-DD format).  This date must be on or after the fromDate. */
        toDate?: string
      }
      header?: never
      path: {
        /** @example A1234AA */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEventDto'][]
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEventDto'][]
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEventDto'][]
        }
      }
    }
  }
  getCellMoveReason: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
        bedAssignmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CellMoveReasonResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceForEventLocation: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
        /** @description Location id of event */
        'event-location': number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  getPrisonersUnaccountedFor: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledResponse']
        }
      }
    }
  }
  getAbsences: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  getAbsencesForReason: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        fromDate: string
        /** @description Date of event in format YYYY-MM-DD defaults to fromDate */
        toDate?: string
        /** @description Time period */
        period?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
        /** @description Absent reason (e.g Refused, AcceptableAbsence) */
        absentReason:
          | 'ApprovedCourse'
          | 'AcceptableAbsence'
          | 'SessionCancelled'
          | 'RestInCellOrSick'
          | 'RestDay'
          | 'UnacceptableAbsence'
          | 'UnacceptableAbsenceIncentiveLevelWarning'
          | 'NotRequired'
          | 'Refused'
          | 'RefusedIncentiveLevelWarning'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AbsencesResponse']
        }
      }
    }
  }
  getAttendanceDetailsForOffender: {
    parameters: {
      query: {
        /** @description Start date of range to summarise in format YYYY-MM-DD */
        fromDate: string
        /** @description End date of range to summarise in format YYYY-MM-DD */
        toDate: string
        pageable: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /** @description offender or Prison number or Noms id */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageAttendanceHistoryDto']
        }
      }
    }
  }
  getAttendanceSummary: {
    parameters: {
      query: {
        /** @description Start date of range to summarise in format YYYY-MM-DD */
        fromDate: string
        /** @description End date of range to summarise in format YYYY-MM-DD */
        toDate: string
      }
      header?: never
      path: {
        /** @description offender or Prison number or Noms id */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendanceSummary']
        }
      }
    }
  }
  getAttendanceChanges: {
    parameters: {
      query: {
        /** @description Date and Time of change in format YYYY-MM-DDT09:10 */
        fromDateTime: string
        /** @description Date and Time of the change in format YYYY-MM-DDT:09:45 */
        toDateTime?: string
        /** @description The agency Id */
        agencyId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendanceChangesResponse']
        }
      }
    }
  }
  getAttendanceForEventLocation_1: {
    parameters: {
      query: {
        /** @description Time period. Leave blank for AM + PM */
        period?: 'AM' | 'PM' | 'ED'
        /** @description From date of event in format YYYY-MM-DD */
        fromDate: string
        /** @description To date of event in format YYYY-MM-DD */
        toDate: string
      }
      header?: never
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Stats']
        }
      }
    }
  }
  getAppointments: {
    parameters: {
      query: {
        /** @description Date the appointments are scheduled */
        date: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /**
         * @description The location prefix of any offenders' residence associated with a returned appointment
         * @example Block A
         */
        offenderLocationPrefix?: string
        /** @description Location id */
        locationId?: number
      }
      header?: never
      path: {
        /** @description The agency Id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSearchDto'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentDetailsDto']
        }
      }
      /** @description Appointment not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reasons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AbsentReasonsDto']
        }
      }
    }
  }
  deleteRecurringAppointmentSequence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the recurring appointment sequence. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Recurring appointment sequence not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
