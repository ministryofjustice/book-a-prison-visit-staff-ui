/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/absence-reasons': {
    get: operations['reasonsUsingGET']
  }
  '/agencies/{agencyId}/locations/groups': {
    /** List of all available Location Groups at agency. */
    get: operations['getAvailableLocationGroups']
  }
  '/agencies/{agencyId}/locations/whereabouts': {
    /** Whereabouts details (e.g. whether enabled) for prison. */
    get: operations['getWhereabouts']
  }
  '/appointment': {
    post: operations['createAppointment']
  }
  '/appointment/recurring/{id}': {
    delete: operations['deleteRecurringAppointmentSequence']
  }
  '/appointment/{id}': {
    get: operations['getAppointment']
    delete: operations['deleteAppointment']
  }
  '/appointments/{agencyId}': {
    get: operations['getAppointments']
  }
  '/attendance': {
    /** Stores new attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used. */
    post: operations['postAttendanceUsingPOST']
  }
  '/attendance/{id}': {
    /** Updates the attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used. */
    put: operations['putAttendanceUsingPUT']
  }
  '/attendance-statistics/{prison}/over-date-range': {
    /** Request attendance statistics */
    get: operations['getAttendanceForEventLocationUsingGET']
  }
  '/attendances': {
    /** Stores new attendance record for multiple offenders, posts attendance details back up to PNOMIS */
    post: operations['postAttendancesUsingPOST']
  }
  '/attendances/changes': {
    get: operations['getAttendanceChangesUsingGET']
  }
  '/attendances/offender/{offenderNo}/unacceptable-absence-count': {
    get: operations['getAttendanceSummaryUsingGET']
  }
  '/attendances/offender/{offenderNo}/unacceptable-absences': {
    /** Request unacceptable absence details */
    get: operations['getAttendanceDetailsForOffenderUsingGET']
  }
  '/attendances/{prison}': {
    /** Request attendance details */
    get: operations['getAttendanceForBookingsUsingGET']
    /** Request attendance details */
    post: operations['getAttendanceForBookingsByPostUsingPOST']
  }
  '/attendances/{prison}/absences': {
    /** Request absences details */
    get: operations['getAbsencesUsingGET']
  }
  '/attendances/{prison}/absences-for-scheduled-activities/{absentReason}': {
    /** Request absences */
    get: operations['getAbsencesForReasonUsingGET']
  }
  '/attendances/{prison}/attendance-for-scheduled-activities': {
    /** Request attendance details */
    get: operations['getAttendanceForOffendersThatHaveScheduleActivityUsingGET']
  }
  '/attendances/{prison}/attendance-over-date-range': {
    /** Request attendance details */
    post: operations['getAttendanceForBookingsOverDateRangeByPostUsingPOST']
  }
  '/attendances/{prison}/{event-location}': {
    /** Request attendance details */
    get: operations['getAttendanceForEventLocationUsingGET_1']
  }
  '/cell/cell-move-reason/booking/{bookingId}/bed-assignment-sequence/{bedAssignmentId}': {
    get: operations['getCellMoveReasonUsingGET']
  }
  '/cell/make-cell-move': {
    post: operations['makeCellMoveUsingPOST']
  }
  '/events/{offenderNo}': {
    /** All scheduled events for offender. */
    get: operations['getEvents']
  }
  '/locations/cellsWithCapacity/{agencyId}/{group}': {
    /** List of cells  by group at agency location which have capacity. */
    get: operations['getCellsWithCapacityForGroup']
  }
  '/locations/groups/{agencyId}/{name}': {
    /** List of cell locations by group at agency location. */
    get: operations['getLocationGroup']
  }
  '/locations/{agencyId}/{group}/location-prefix': {
    get: operations['getLocationPrefixFromGroup']
  }
  '/court/all-courts': {
    /** Return all court locations */
    get: operations['getCourtNamesUsingGET']
  }
  '/court/courts': {
    /** Return information about all courts. */
    get: operations['getCourtsUsingGET']
  }
  '/court/video-link-appointments': {
    /** Return video link appointments */
    post: operations['getVideoLinkAppointmentsUsingPOST']
  }
  '/court/video-link-booking-check': {
    post: operations['findAvailableVideoLinkBookingOptionsUsingPOST']
  }
  '/court/video-link-bookings': {
    post: operations['createVideoLinkBookingUsingPOST']
  }
  '/court/video-link-bookings/prison/{agencyId}/date/{date}': {
    get: operations['getVideoLinkBookingsByPrisonDateAndCourtUsingGET']
  }
  '/court/video-link-bookings/{videoBookingId}': {
    /** Return a video Link Booking */
    get: operations['getVideoLinkBookingUsingGET']
    put: operations['updateVideoLinkBookingUsingPUT']
    delete: operations['deleteVideoLinkBookingUsingDELETE']
  }
  '/court/video-link-bookings/{videoLinkBookingId}/comment': {
    put: operations['updateVideoLinkBookingCommentUsingPUT']
  }
  '/events/video-link-booking-events': {
    /** Return details of Video Link Booking Events (Create, Update, Delete) in CSV format. Restrict the response to events occurring within 'days' of start-date. */
    get: operations['getVideoLinkBookingEventsUsingGET']
  }
  '/video-link-rooms/{agencyId}': {
    /** List of all the Video Link Booking rooms in the prison. */
    get: operations['getVideoLinkBookingRooms']
  }
}

export interface components {
  schemas: {
    /** AbsenceDto */
    AbsenceDto: {
      /** Format: int64 */
      attendanceId?: number
      /** Format: int64 */
      bookingId?: number
      cellLocation?: string
      comments?: string
      eventDate?: string
      eventDescription?: string
      /** Format: int64 */
      eventId?: number
      /** Format: int64 */
      eventLocationId?: number
      firstName?: string
      lastName?: string
      offenderNo?: string
      /** @enum {string} */
      period?: 'AM' | 'ED' | 'PM'
      /** @enum {string} */
      reason?:
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      suspended?: boolean
    }
    /**
     * AbsencesResponse
     * @description Absences response
     */
    AbsencesResponse: {
      /** @description Set of absences */
      absences?: components['schemas']['AbsenceDto'][]
    }
    /** AbsentReasonsDto */
    AbsentReasonsDto: {
      /**
       * @description List of paid absent reasons
       * @example ["ApprovedCourse"]
       */
      paidReasons?: (
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      )[]
      /**
       * @description List of reasons that trigger IEP Warnings
       * @example ["UnacceptableAbsence"]
       */
      triggersIEPWarning?: (
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      )[]
      /**
       * @description List of unpaid absent reasons
       * @example ["RestInCellOrSick"]
       */
      unpaidReasons?: (
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      )[]
    }
    /**
     * AppointmentDetailsDto
     * @description Appointment details, linking video link bookings and recurring appointments
     */
    AppointmentDetailsDto: {
      /** @description Appointment details pulled from NOMIS */
      appointment: components['schemas']['AppointmentDto']
      /** @description Recurring appointment details */
      recurring?: components['schemas']['RecurringAppointmentDto']
      /** @description Video link booking details */
      videoLinkBooking?: components['schemas']['VideoLinkBookingDto']
    }
    /**
     * AppointmentDto
     * @description The data related to a single appointment.
     */
    AppointmentDto: {
      /**
       * @description The Id of the agency where the appointment is
       * @example MDI
       */
      agencyId: string
      /**
       * @description The code for the type of appointment this is
       * @example INTERV
       */
      appointmentTypeCode: string
      /** @description Additional information regarding the appointment */
      comment?: string
      /** @description Created by user id */
      createUserId?: string
      /** @description When the appointment is scheduled to end */
      endTime?: string
      /**
       * Format: int64
       * @description The event Id associated with this appointment
       */
      id: number
      /**
       * Format: int64
       * @description The Id of the location to be used for this appointment
       */
      locationId: number
      /** @description The NOMS Id of the offender who this appointment is for */
      offenderNo: string
      /** @description When the appointment is scheduled to start */
      startTime: string
    }
    /**
     * AppointmentSearchDto
     * @description The data related to a single appointment.
     */
    AppointmentSearchDto: {
      /**
       * @description The Id of the agency where the appointment is
       * @example MDI
       */
      agencyId: string
      /**
       * @description The code for the type of appointment this is
       * @example INTERV
       */
      appointmentTypeCode: string
      /** @description The description of the appointment type */
      appointmentTypeDescription: string
      /**
       * @description The name of the user who created this appointment
       * @example ASMITH
       */
      createUserId: string
      /** @description When the appointment is scheduled to end */
      endTime?: string
      /** @description Offender first name */
      firstName: string
      /**
       * Format: int64
       * @description The event Id associated with this appointment
       */
      id: number
      /** @description Offender last name */
      lastName: string
      /** @description The description of the location */
      locationDescription: string
      /**
       * Format: int64
       * @description The Id of the location to be used for this appointment
       */
      locationId: number
      /** @description The NOMS Id of the offender who this appointment is for */
      offenderNo: string
      /** @description When the appointment is scheduled to start */
      startTime: string
    }
    /** Attendance change */
    'Attendance change': {
      /**
       * Format: int64
       * @description Attendance id
       */
      attendanceId?: number
      /**
       * Format: int64
       * @description Booking id
       */
      bookingId?: number
      /** @description Changed by username */
      changedBy?: string
      /**
       * @description Previous attendance reason
       * @enum {string}
       */
      changedFrom?:
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'Attended'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      /** @description Date and time when the changed occurred */
      changedOn?: string
      /**
       * @description New attendance reason
       * @enum {string}
       */
      changedTo?:
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'Attended'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      /**
       * Format: int64
       * @description Event id
       */
      eventId?: number
      /**
       * Format: int64
       * @description Event location id
       */
      eventLocationId?: number
      /**
       * Format: int64
       * @description Id of the change record
       */
      id?: number
      /**
       * @description Id of the prison example
       * @example MDI
       */
      prisonId?: string
    }
    /**
     * AttendanceChangesResponse
     * @description Attendance changes
     */
    AttendanceChangesResponse: {
      /** @description Set of changes */
      changes?: components['schemas']['Attendance change'][]
    }
    /** AttendanceDto */
    AttendanceDto: {
      /** @enum {string} */
      absentReason?:
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      attended?: boolean
      /** Format: int64 */
      bookingId?: number
      /** Format: int64 */
      caseNoteId?: number
      cellLocation?: string
      comments?: string
      createDateTime?: string
      createUserId?: string
      eventDate?: string
      /** Format: int64 */
      eventId?: number
      /** Format: int64 */
      eventLocationId?: number
      /** Format: int64 */
      id?: number
      locked?: boolean
      modifyDateTime?: string
      modifyUserId?: string
      paid?: boolean
      /** @enum {string} */
      period?: 'AM' | 'ED' | 'PM'
      prisonId?: string
    }
    /**
     * AttendanceHistoryDto
     * @description Attendance data
     */
    AttendanceHistoryDto: {
      /**
       * @description Activity name
       * @example Industries - Food Packing
       */
      activity: string
      /**
       * @description Activity description
       * @example Workshop 7
       */
      activityDescription: string
      /**
       * @description Any activity outcome captured (n.b. for outcomes captured via Whereabouts, this is also the Case note text)
       * @example Healthcare issue - speak to SO
       */
      comments?: string
      /**
       * @description Date the event occurred
       * @example 2021-10-01
       */
      eventDate: string
      /**
       * @description Prison.
       * @example MDI
       */
      location: string
    }
    /**
     * AttendanceSummary
     * @description Attendances aggregate data
     */
    AttendanceSummary: {
      /**
       * Format: int32
       * @description Number of acceptable absences in period
       */
      acceptableAbsence?: number
      /**
       * Format: int32
       * @description Total number of attendances in period (which have an outcome)
       */
      total?: number
      /**
       * Format: int32
       * @description Number of unacceptable absences in period
       */
      unacceptableAbsence?: number
    }
    /**
     * AttendancesDto
     * @description Attend all parameters
     */
    AttendancesDto: {
      /**
       * @description Indication of attendance
       * @example true
       */
      attended?: boolean
      /** @description Set of active booking and activity ids */
      bookingActivities: components['schemas']['BookingActivity'][]
      /**
       * @description Comment describing the offenders absence
       * @example They had a medical appointment scheduled
       */
      comments?: string
      /**
       * @description Date the event is scheduled
       * @example 2019-10-01
       */
      eventDate: string
      /**
       * Format: int64
       * @description Id of the location the event is taking place
       * @example 4
       */
      eventLocationId: number
      /**
       * @description Indicates that the offender should be paid
       * @example true
       */
      paid?: boolean
      /**
       * @description Time period for the event
       * @example AM
       * @enum {string}
       */
      period: 'AM' | 'ED' | 'PM'
      /**
       * @description Id of prison the event is taking place
       * @example LEI
       */
      prisonId: string
      /**
       * @description Absent reason
       * @example Refused
       * @enum {string}
       */
      reason?:
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
    }
    /**
     * AttendancesResponse
     * @description Attendances response
     */
    AttendancesResponse: {
      /** @description Set of attendances */
      attendances?: components['schemas']['AttendanceDto'][]
    }
    /** BookingActivity */
    BookingActivity: {
      /** Format: int64 */
      activityId?: number
      /** Format: int64 */
      bookingId?: number
    }
    /**
     * CellAttribute
     * @description Cell Attribute Details
     */
    CellAttribute: {
      /**
       * @description Cell attribute code
       * @example LC
       */
      code: string
      /**
       * @description Cell attribute description
       * @example Listener cell
       */
      description: string
    }
    /**
     * CellMoveDetails
     * @description Cell move details
     */
    CellMoveDetails: {
      /**
       * Format: int64
       * @description Offender booking id
       * @example 1
       */
      bookingId: number
      /**
       * @description Cell move reason code
       * @example ADM
       */
      cellMoveReasonCode: string
      /**
       * @description Cell move reason comment
       * @example The prisoner has been moved for administrative purposes
       */
      commentText: string
      /**
       * @description Cell to be moved into
       * @example MDI-1-1
       */
      internalLocationDescriptionDestination: string
      /**
       * @description Offender number
       * @example G123V6
       */
      offenderNo: string
    }
    /**
     * CellMoveReasonDto
     * @description Cell move reason
     */
    CellMoveReasonDto: {
      /**
       * Format: int32
       * @description Bed assignment sequence. Used as a primary key when combined with the booking id
       * @example 2
       */
      bedAssignmentsSequence?: number
      /**
       * Format: int64
       * @description Offender booking id
       * @example 1
       */
      bookingId?: number
      /**
       * Format: int64
       * @description Id of the case note created
       * @example 3
       */
      caseNoteId?: number
    }
    /**
     * CellMoveReasonResponse
     * @description Cell move reason response
     */
    CellMoveReasonResponse: {
      cellMoveReason: components['schemas']['CellMoveReasonDto']
    }
    /**
     * CellMoveResponse
     * @description Cell move response
     */
    CellMoveResponse: {
      cellMoveResult: components['schemas']['CellMoveResult']
    }
    /**
     * CellMoveResult
     * @description Cell move result
     */
    CellMoveResult: {
      /**
       * @description Id of the establishment
       * @example MDI
       */
      agencyId?: string
      /**
       * @description Description of cell the offender has been moved to
       * @example MDI-2-2-006
       */
      assignedLivingUnitDesc?: string
      /**
       * Format: int64
       * @description Id of the cell location the offender has been moved to
       * @example 25700
       */
      assignedLivingUnitId?: number
      /**
       * Format: int32
       * @description Bed assignment sequence associated with the entry created for this cell move
       * @example 2
       */
      bedAssignmentHistorySequence?: number
      /**
       * Format: int64
       * @description Offender booking id
       * @example 1000
       */
      bookingId?: number
      /**
       * Format: int64
       * @description Case note id
       * @example 2
       */
      caseNoteId?: number
    }
    /**
     * CellWithAttributes
     * @description Cell with Attributes Details
     */
    CellWithAttributes: {
      /**
       * @description List of attributes for the cell.
       * @example Listener cell
       */
      attributes?: components['schemas']['CellAttribute'][]
      /**
       * Format: int32
       * @description Capacity of the location.
       * @example 20
       */
      capacity: number
      /**
       * @description Location description.
       * @example MDI-RES-HB1-ALE
       */
      description: string
      /**
       * Format: int64
       * @description Location identifier.
       * @example 721705
       */
      id: number
      /**
       * Format: int32
       * @description Current occupancy of location.
       * @example 10
       */
      noOfOccupants: number
      /**
       * @description User-friendly location description.
       * @example RES-HB1-ALE
       */
      userDescription?: string
    }
    /**
     * Court
     * @description Video Link Booking related information for a court
     */
    Court: {
      /** @description The court identifier. Unique. Defined by courts registry. */
      id: string
      /** @description A name for the court. */
      name: string
    }
    /** CourtLocationsResponse */
    CourtLocationsResponse: {
      courtLocations?: string[]
    }
    /**
     * CreateAppointmentSpecification
     * @description The data required to create an appointment
     */
    CreateAppointmentSpecification: {
      /**
       * @description Appointment type
       * @example INST
       */
      appointmentType: string
      /**
       * Format: int64
       * @description The offender booking id
       */
      bookingId: number
      /** @description Additional information */
      comment?: string
      /**
       * @description The estimated date time the appointment will end
       * @example 2021-05-23T17:00:00
       */
      endTime?: string
      /**
       * Format: int64
       * @description The location id of where the appointment will take place
       */
      locationId: number
      /** @description Describes how many times this appointment is to be repeated */
      repeat?: components['schemas']['Repeat']
      /**
       * @description The date and time the appointment is scheduled for
       * @example 2021-05-23T17:00:00
       */
      startTime: string
    }
    /**
     * CreateAttendanceDto
     * @description Create an attendance for a booking
     */
    CreateAttendanceDto: {
      /**
       * @description Reason the offender did not attendance the event
       * @example Refused
       * @enum {string}
       */
      absentReason?:
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      /**
       * @description Flag to indicate the offender attended the event
       * @example true
       */
      attended: boolean
      /**
       * Format: int64
       * @description Id of active booking
       * @example 1
       */
      bookingId: number
      /** @description Comments about non attendance. This also gets used for the IEP warning text */
      comments?: string
      /**
       * @description Date the event is scheduled
       * @example 2019-10-01
       */
      eventDate: string
      /**
       * Format: int64
       * @description Id of event
       * @example 2
       */
      eventId: number
      /**
       * Format: int64
       * @description Id of the location the event is taking place
       * @example 4
       */
      eventLocationId: number
      /**
       * @description Flag to indicate the offender should be paid
       * @example true
       */
      paid: boolean
      /**
       * @description Time period for the event
       * @example AM
       * @enum {string}
       */
      period: 'AM' | 'ED' | 'PM'
      /**
       * @description Id of prison the event is taking place
       * @example LEI
       */
      prisonId: string
    }
    /**
     * CreatedAppointmentDetailsDto
     * @description The details of an appointment that has just been created
     */
    CreatedAppointmentDetailsDto: {
      /**
       * Format: int64
       * @description The id of the appointment that was created.
       * @example 123456
       */
      appointmentEventId?: number
      /**
       * @description The scheduled event subType
       * @example ACTI
       */
      appointmentType?: string
      /**
       * Format: int64
       * @description The Booking id of the offender for whom the appointment was created.
       * @example 123456
       */
      bookingId: number
      /**
       * @description The end time of the appointment.
       * @example 2018-12-31T23:59
       */
      endTime?: string
      /**
       * Format: int64
       * @description The identifier of the appointments' Location. The location must be situated in the requestor's case load.
       * @example 25
       */
      locationId?: number
      /**
       * @description The start time of the appointment.
       * @example 2018-12-31T23:50
       */
      startTime?: string
    }
    /** ErrorResponse */
    ErrorResponse: {
      developerMessage?: string
      /** Format: int32 */
      errorCode?: number
      moreInfo?: string
      /** Format: int32 */
      status?: number
      userMessage?: string
    }
    /**
     * Interval
     * @description A closed time interval, being the intervening time between two time points including the start and end points themselves
     */
    Interval: {
      /**
       * @description The time at which the interval end, inclusive. ISO-8601 format (hh:mm)
       * @example 09:30
       */
      end?: string
      /**
       * @description The time at which the interval starts, inclusive. ISO-8601 format (hh:mm)
       * @example 09:00
       */
      start?: string
    }
    /**
     * Location
     * @description Location Details
     */
    Location: {
      /**
       * @description Identifier of Agency this location is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * Format: int32
       * @description Current occupancy of location.
       * @example 10
       */
      currentOccupancy?: number
      /**
       * @description Location description.
       * @example MDI-RES-HB1-ALE
       */
      description: string
      internalLocationCode: string
      /**
       * Format: int64
       * @description Location identifier.
       * @example 721705
       */
      locationId: number
      /**
       * @description Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations.
       * @example RES-HB1-ALE
       */
      locationPrefix?: string
      /**
       * @description Location type.
       * @example ROOM
       */
      locationType: string
      /**
       * @description What events this room can be used for.
       * @example APP
       */
      locationUsage?: string
      /**
       * Format: int32
       * @description Operational capacity of the location.
       * @example 20
       */
      operationalCapacity?: number
      /**
       * Format: int64
       * @description Identifier of this location's parent location.
       * @example 26960
       */
      parentLocationId?: number
      /**
       * @description User-friendly location description.
       * @example RES-HB1-ALE
       */
      userDescription?: string
    }
    /** LocationAndInterval */
    LocationAndInterval: {
      /** @description If present find the locations that can be used for the pre interval. */
      interval?: components['schemas']['Interval']
      /** Format: int64 */
      locationId: number
    }
    /**
     * LocationGroup
     * @description Cell Locations are grouped for unlock lists as a 2 level tree. The two levels are referred to as Location and Sub-Location in the prisonstaffhub UI. Each (location/sub-location) group has a name that is understood by prison officers and also serves as a key to retrieve the corresponding Cell Locations and information about their occupants.
     */
    LocationGroup: {
      /**
       * @description The child groups of this group
       * @example [{"name": "Landing A/1", "key":"1"}, {"name": "Landing A/2", "key": "2"}]
       */
      children: components['schemas']['LocationGroup'][]
      /**
       * @description A key for the group
       * @example A
       */
      key: string
      /**
       * @description The name of the group
       * @example Block A
       */
      name: string
    }
    /**
     * LocationIdAndDescription
     * @description A minimal representation of a NOMIS agency internal location.
     */
    LocationIdAndDescription: {
      /**
       * @description The NOMIS description of the location
       * @example VCC Room 16
       */
      description?: string
      /**
       * Format: int64
       * @description The NOMIS agency internal location identifier of the location
       * @example 12345
       */
      locationId?: number
    }
    /**
     * LocationPrefixDto
     * @description Location prefix response
     */
    LocationPrefixDto: {
      /**
       * @description Location prefix translated from group name
       * @example MDI-1-
       */
      locationPrefix?: string
    }
    /**
     * LocationTimeslot
     * @description Detail of a booked location, either pre, main or post
     */
    LocationTimeslot: {
      /**
       * @description Finish Time. ISO-8601 date-time format
       * @example 2020-12-23T09:30:00
       */
      endTime: string
      /**
       * Format: int64
       * @description The location identifier
       * @example 1
       */
      locationId: number
      /**
       * @description Start Time. ISO-8601 date-time format
       * @example 2020-12-23T09:00:00
       */
      startTime: string
    }
    /** Pageable */
    Pageable: {
      /** Format: int64 */
      offset?: number
      /** Format: int32 */
      pageNumber?: number
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      sort?: components['schemas']['Sort']
      unpaged?: boolean
    }
    /** Page«AttendanceHistoryDto» */
    'Page«AttendanceHistoryDto»': {
      content?: components['schemas']['AttendanceHistoryDto'][]
      empty?: boolean
      first?: boolean
      last?: boolean
      /** Format: int32 */
      number?: number
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['Pageable']
      /** Format: int32 */
      size?: number
      sort?: components['schemas']['Sort']
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
    }
    /** PaidReasons */
    PaidReasons: {
      /** Format: int32 */
      acceptableAbsence?: number
      /** Format: int32 */
      approvedCourse?: number
      /** Format: int32 */
      attended?: number
      /** Format: int32 */
      notRequired?: number
    }
    /**
     * RecurringAppointmentDto
     * @description Recurring appointment
     */
    RecurringAppointmentDto: {
      /**
       * Format: int64
       * @description Specifies the amount of times the repeat period will be applied
       */
      count: number
      /**
       * Format: int64
       * @description Recurring appointment sequence id
       * @example 1
       */
      id?: number
      /**
       * @description Repeat period
       * @example Daily
       * @enum {string}
       */
      repeatPeriod: 'Daily' | 'Fortnightly' | 'Monthly' | 'Weekday' | 'Weekly'
      /**
       * @description The start time of the first appointment in the sequence
       * @example 2020-12-23T10:00
       */
      startTime?: string
    }
    /**
     * Repeat
     * @description Describes how many times this appointment is to be repeated
     */
    Repeat: {
      /**
       * Format: int64
       * @description Specifies the amount of times the repeat period will be applied
       */
      count: number
      /**
       * @description Repeat period
       * @example Daily
       * @enum {string}
       */
      repeatPeriod: 'Daily' | 'Fortnightly' | 'Monthly' | 'Weekday' | 'Weekly'
    }
    /**
     * ScheduledEventDto
     * @description Scheduled Event
     */
    ScheduledEventDto: {
      /**
       * @description The agency ID for the booked internal location
       * @example WWI
       */
      agencyId?: string
      /**
       * Format: int64
       * @description Offender booking id
       */
      bookingId: number
      /** @description Staff member who created the appointment */
      createUserId?: string
      /** @description Date and time at which event ends */
      endTime?: string
      /** @description Class of event */
      eventClass: string
      /** @description Date on which event occurs */
      eventDate: string
      /**
       * Format: int64
       * @description Activity id if any. Used to attend or pay an activity.
       */
      eventId?: number
      /** @description Location at which event takes place (could be an internal location, agency or external address). */
      eventLocation?: string
      /**
       * Format: int64
       * @description Id of an internal event location
       */
      eventLocationId?: number
      /** @description Activity attendance, possible values are the codes in the 'PS_PA_OC' reference domain. */
      eventOutcome?: string
      /** @description Code identifying underlying source of event data */
      eventSource: string
      /** @description Source-specific code for the type or nature of the event */
      eventSourceCode?: string
      /** @description Source-specific description for type or nature of the event */
      eventSourceDesc?: string
      /** @description Status of event */
      eventStatus: string
      /** @description Sub type (or reason) of scheduled event (as a code) */
      eventSubType: string
      /** @description Description of scheduled event sub type */
      eventSubTypeDesc: string
      /** @description Type of scheduled event (as a code) */
      eventType: string
      /** @description Description of scheduled event type */
      eventTypeDesc: string
      /** @description The code for the activity location */
      locationCode?: string
      /** @description Activity no-pay reason. */
      outcomeComment?: string
      /** @description Activity paid flag. */
      paid?: boolean
      /**
       * Format: bigdecimal
       * @description Amount paid per activity session in pounds
       */
      payRate?: number
      /** @description Activity performance, possible values are the codes in the 'PERFORMANCE' reference domain. */
      performance?: string
      /** @description Date and time at which event starts */
      startTime?: string
    }
    /** Sort */
    Sort: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** Stats */
    Stats: {
      /** Format: int32 */
      notRecorded?: number
      paidReasons?: components['schemas']['PaidReasons']
      /** Format: int32 */
      scheduleActivities?: number
      /** Format: int32 */
      suspended?: number
      unpaidReasons?: components['schemas']['UnpaidReasons']
    }
    /** UnpaidReasons */
    UnpaidReasons: {
      /** Format: int32 */
      refused?: number
      /** Format: int32 */
      refusedIncentiveLevelWarning?: number
      /** Format: int32 */
      restDay?: number
      /** Format: int32 */
      restInCellOrSick?: number
      /** Format: int32 */
      sessionCancelled?: number
      /** Format: int32 */
      unacceptableAbsence?: number
    }
    /**
     * UpdateAttendanceDto
     * @description Attendance update details
     */
    UpdateAttendanceDto: {
      /**
       * @description Reason the offender did not attendance the event
       * @example Refused
       * @enum {string}
       */
      absentReason?:
        | 'AcceptableAbsence'
        | 'ApprovedCourse'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'RestDay'
        | 'RestInCellOrSick'
        | 'SessionCancelled'
        | 'UnacceptableAbsence'
      /**
       * @description Flag to indicate the offender attended the event
       * @example true
       */
      attended: boolean
      /** @description Comments about non attendance. This also gets used for the IEP warning text */
      comments?: string
      /**
       * @description Flag to indicate the offender should be paid
       * @example true
       */
      paid: boolean
    }
    /**
     * VideoLinkAppointmentDto
     * @description Video link appointment details
     */
    VideoLinkAppointmentDto: {
      /**
       * Format: int64
       * @description Appointment id, maps to nomis event id
       * @example 1
       */
      appointmentId?: number
      /**
       * Format: int64
       * @description Offender booking id
       * @example 1
       */
      bookingId?: number
      /**
       * @description The name of the court that requires the appointment
       * @example York Crown Court
       */
      court?: string
      /**
       * @description The identifier of the court that requires the appointment. If present this will be one of the identifier values from the courts register service.
       * @example CMBGMC
       */
      courtId?: string
      /**
       * @description Username of the appointment creator
       * @example john1
       */
      createdByUsername?: string
      /**
       * @description When the appointment is scheduled to end
       * @example 2020-12-24T10:00
       */
      endTime?: string
      /**
       * @description Type of court hearing
       * @example MAIN, PRE , POST
       * @enum {string}
       */
      hearingType?: 'MAIN' | 'POST' | 'PRE'
      /**
       * Format: int64
       * @description Court appointment id
       * @example 1
       */
      id?: number
      /**
       * Format: int64
       * @description The location id of where the appointment will take place
       */
      locationId?: number
      /** @description Determines if the appointment was made by the court */
      madeByTheCourt?: boolean
      /**
       * Format: int64
       * @description The id of the main appointment for the related video link booking
       */
      mainAppointmentId?: number
      /**
       * @description When the appointment is scheduled to start
       * @example 2020-12-23T10:00
       */
      startTime?: string
      /**
       * Format: int64
       * @description Video link booking id. This is the same for any related pre, post and main appointments
       * @example 1
       */
      videoLinkBookingId?: number
    }
    /**
     * VideoLinkAppointmentSpecification
     * @description Detail of a single Video Link Appointment, either pre, main or post
     */
    VideoLinkAppointmentSpecification: {
      /**
       * @description Finish Time of the appointment. ISO-8601 date-time format
       * @example 2020-12-23T09:30:00
       */
      endTime: string
      /**
       * Format: int64
       * @description The identifier of the appointment's location
       * @example 1
       */
      locationId: number
      /**
       * @description Start Time of the appointment. ISO-8601 date-time format
       * @example 2020-12-23T09:00:00
       */
      startTime: string
    }
    /** VideoLinkAppointmentsResponse */
    VideoLinkAppointmentsResponse: {
      appointments?: components['schemas']['VideoLinkAppointmentDto'][]
    }
    /**
     * VideoLinkBookingDto
     * @description Video link appointment booking
     */
    VideoLinkBookingDto: {
      /**
       * Format: int64
       * @description id of the video link appointment booking
       */
      id: number
      /** @description Main appointment */
      main: components['schemas']['VideoLinkAppointmentDto']
      /** @description Post appointment */
      post?: components['schemas']['VideoLinkAppointmentDto']
      /** @description Pre appointment */
      pre?: components['schemas']['VideoLinkAppointmentDto']
    }
    /** VideoLinkBookingOption */
    VideoLinkBookingOption: {
      /** @description The location (by location id) and Interval for the main appointment (the court appearance). */
      main: components['schemas']['LocationAndInterval']
      /** @description The location and Interval for the post-hearing appointment. */
      post?: components['schemas']['LocationAndInterval']
      /** @description The location and Interval for the pre-hearing appointment. */
      pre?: components['schemas']['LocationAndInterval']
    }
    /** VideoLinkBookingOptions */
    VideoLinkBookingOptions: {
      /** @description If the specification could not be met then up to three alternative booking times are offered. */
      alternatives?: components['schemas']['VideoLinkBookingOption'][]
      /** @description True if the specified rooms are available at the specified times. */
      matched?: boolean
    }
    /**
     * VideoLinkBookingResponse
     * @description Video Link Booking details
     */
    VideoLinkBookingResponse: {
      /**
       * @description Agency Id
       * @example WWI
       */
      agencyId: string
      /**
       * Format: int64
       * @description Offender booking Id
       * @example 1
       */
      bookingId: number
      /**
       * @description Free text comments
       * @example Requires special access
       */
      comment?: string
      /**
       * @description The name of the court that requires the appointment. May be a place-holder
       * @example York Crown Court
       */
      court: string
      /**
       * @description The identifier for the court that requires the appointment. If present this will be one of the identifier values from the courts register service.
       * @example CMBGMC
       */
      courtId?: string
      /** @description Main appointment */
      main: components['schemas']['LocationTimeslot']
      /** @description Post-hearing appointment */
      post?: components['schemas']['LocationTimeslot']
      /** @description Pre-hearing appointment */
      pre?: components['schemas']['LocationTimeslot']
      /**
       * Format: int64
       * @description Video Link booking Id
       * @example 1
       */
      videoLinkBookingId: number
    }
    /** VideoLinkBookingSearchSpecification */
    VideoLinkBookingSearchSpecification: {
      /**
       * @description The locations must be within the agency (prison) having this identifier.
       * @example WWI
       */
      agencyId?: string
      /**
       * @description The appointment intervals are all on this date.
       * @example 2021-01-01
       */
      date?: string
      /** @description Specifies the desired main apointment start, end and location. */
      mainAppointment: components['schemas']['LocationAndInterval']
      /** @description If present specifies the desired post-appointment start, end and location. */
      postAppointment?: components['schemas']['LocationAndInterval']
      /** @description If present specifies the desired pre-appointment start, end and location. */
      preAppointment?: components['schemas']['LocationAndInterval']
      /**
       * Format: int64
       * @description When checking that the appointment locations and intervals are free, or when searching for alternatives treat appointments for this video link booking as free
       */
      vlbIdToExclude?: number
    }
    /**
     * VideoLinkBookingSpecification
     * @description Video Link Booking details
     */
    VideoLinkBookingSpecification: {
      /**
       * Format: int64
       * @description Offender booking Id
       * @example 1
       */
      bookingId?: number
      /**
       * @description Free text comments
       * @example Requires special access
       */
      comment?: string
      /**
       * @description The location of the court that requires the appointment
       * @example York Crown Court
       */
      court?: string
      /**
       * @description The identifier of the court that requires the appointment.  This must be one of the court identifier values from the courts register service.
       * @example CMBGMC
       */
      courtId?: string
      /** @description Booking placed by the court */
      madeByTheCourt: boolean
      /** @description Main appointment */
      main: components['schemas']['VideoLinkAppointmentSpecification']
      /** @description Post-hearing appointment */
      post?: components['schemas']['VideoLinkAppointmentSpecification']
      /** @description Pre-hearing appointment */
      pre?: components['schemas']['VideoLinkAppointmentSpecification']
    }
    /** VideoLinkBookingUpdateSpecification */
    VideoLinkBookingUpdateSpecification: {
      /**
       * @description Free text comments
       * @example Requires special access
       */
      comment?: string
      /**
       * @description The identifier of the court that requires the appointment.
       * @example CMBGMC
       */
      courtId: string
      /** @description Main appointment */
      main: components['schemas']['VideoLinkAppointmentSpecification']
      /** @description Post-hearing appointment */
      post?: components['schemas']['VideoLinkAppointmentSpecification']
      /** @description Pre-hearing appointment */
      pre?: components['schemas']['VideoLinkAppointmentSpecification']
    }
    /**
     * WhereaboutsConfig
     * @description Whereabouts Details
     */
    WhereaboutsConfig: {
      /** @description Whether this prison is enabled for whereabouts */
      enabled: boolean
    }
  }
}

export interface operations {
  reasonsUsingGET: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AbsentReasonsDto']
        }
      }
    }
  }
  /** List of all available Location Groups at agency. */
  getAvailableLocationGroups: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse'][]
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse'][]
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse'][]
        }
      }
    }
  }
  /** Whereabouts details (e.g. whether enabled) for prison. */
  getWhereabouts: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['WhereaboutsConfig']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAppointment: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['CreatedAppointmentDetailsDto'][]
        }
      }
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentSpecification']
      }
    }
  }
  deleteRecurringAppointmentSequence: {
    parameters: {
      path: {
        /** The id of the recurring appointment sequence. */
        id: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Recurring appointment sequence not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointment: {
    parameters: {
      path: {
        /** id */
        id: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentDetailsDto']
        }
      }
      /** Appointment not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAppointment: {
    parameters: {
      path: {
        /** id */
        id: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Appointment not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointments: {
    parameters: {
      path: {
        /** The agency Id */
        agencyId: string
      }
      query: {
        /** Date the appointments are scheduled */
        date: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'ED' | 'PM'
        /** The location prefix of any offenders' residence associated with a returned appointment */
        offenderLocationPrefix?: string
        /** Location id */
        locationId?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentDto'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse'][]
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse'][]
        }
      }
    }
  }
  /** Stores new attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used. */
  postAttendanceUsingPOST: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['AttendanceDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Conflict creating an attendance. */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAttendanceDto']
      }
    }
  }
  /** Updates the attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used. */
  putAttendanceUsingPUT: {
    parameters: {
      path: {
        /** id */
        id: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': { [key: string]: unknown }
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendanceDto']
      }
    }
  }
  /** Request attendance statistics */
  getAttendanceForEventLocationUsingGET: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
      }
      query: {
        /** Time period. Leave blank for AM + PM */
        period: 'AM' | 'ED' | 'PM'
        /** From date of event in format YYYY-MM-DD */
        fromDate: string
        /** To date of event in format YYYY-MM-DD */
        toDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Stats']
        }
      }
    }
  }
  /** Stores new attendance record for multiple offenders, posts attendance details back up to PNOMIS */
  postAttendancesUsingPOST: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AttendancesDto']
      }
    }
  }
  getAttendanceChangesUsingGET: {
    parameters: {
      query: {
        /** Date and Time of change in format YYYY-MM-DDT09:10 */
        fromDateTime: string
        /** Date and Time of the change in format YYYY-MM-DDT:09:45 */
        toDateTime: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendanceChangesResponse']
        }
      }
    }
  }
  getAttendanceSummaryUsingGET: {
    parameters: {
      path: {
        /** offender or Prison number or Noms id */
        offenderNo: string
      }
      query: {
        /** Start date of range to summarise in format YYYY-MM-DD */
        fromDate: string
        /** End date of range to summarise in format YYYY-MM-DD */
        toDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendanceSummary']
        }
      }
    }
  }
  /** Request unacceptable absence details */
  getAttendanceDetailsForOffenderUsingGET: {
    parameters: {
      path: {
        /** offender or Prison number or Noms id */
        offenderNo: string
      }
      query: {
        offset?: number
        pageNumber?: number
        pageSize?: number
        paged?: boolean
        'sort.sorted'?: boolean
        'sort.unsorted'?: boolean
        unpaged?: boolean
        /** Start date of range to summarise in format YYYY-MM-DD */
        fromDate: string
        /** End date of range to summarise in format YYYY-MM-DD */
        toDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Page«AttendanceHistoryDto»']
        }
      }
    }
  }
  /** Request attendance details */
  getAttendanceForBookingsUsingGET: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
      }
      query: {
        /** Date of event in format YYYY-MM-DD */
        date: string
        /** Time period */
        period: 'AM' | 'ED' | 'PM'
        /** Booking ids (bookings=1&bookings=2) */
        bookings: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /** Request attendance details */
  getAttendanceForBookingsByPostUsingPOST: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
      }
      query: {
        /** Date of event in format YYYY-MM-DD */
        date: string
        /** Time period */
        period: 'AM' | 'ED' | 'PM'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Request absences details */
  getAbsencesUsingGET: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
      }
      query: {
        /** Date of event in format YYYY-MM-DD */
        date: string
        /** Time period */
        period: 'AM' | 'ED' | 'PM'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /** Request absences */
  getAbsencesForReasonUsingGET: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
        /** Absent reason (e.g Refused, AcceptableAbsence) */
        absentReason:
          | 'AcceptableAbsence'
          | 'ApprovedCourse'
          | 'NotRequired'
          | 'Refused'
          | 'RefusedIncentiveLevelWarning'
          | 'RestDay'
          | 'RestInCellOrSick'
          | 'SessionCancelled'
          | 'UnacceptableAbsence'
      }
      query: {
        /** Date of event in format YYYY-MM-DD */
        fromDate: string
        /** Date of event in format YYYY-MM-DD defaults to fromDate */
        toDate: string
        /** Time period */
        period: 'AM' | 'ED' | 'PM'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AbsencesResponse']
        }
      }
    }
  }
  /** Request attendance details */
  getAttendanceForOffendersThatHaveScheduleActivityUsingGET: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
      }
      query: {
        /** Date of event in format YYYY-MM-DD */
        date: string
        /** Time period */
        period: 'AM' | 'ED' | 'PM'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /** Request attendance details */
  getAttendanceForBookingsOverDateRangeByPostUsingPOST: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
      }
      query: {
        /** Date of event in format YYYY-MM-DD */
        fromDate: string
        /** Date of event in format YYYY-MM-DD defaults to fromDate */
        toDate: string
        /** Time period. Leave blank for AM + PM */
        period: 'AM' | 'ED' | 'PM'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Request attendance details */
  getAttendanceForEventLocationUsingGET_1: {
    parameters: {
      path: {
        /** Prison id (LEI) */
        prison: string
        /** Location id of event */
        'event-location': number
      }
      query: {
        /** Date of event in format YYYY-MM-DD */
        date: string
        /** Time period */
        period: 'AM' | 'ED' | 'PM'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  getCellMoveReasonUsingGET: {
    parameters: {
      path: {
        /** bookingId */
        bookingId: number
        /** bedAssignmentId */
        bedAssignmentId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CellMoveReasonResponse']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  makeCellMoveUsingPOST: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['CellMoveResponse']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CellMoveDetails']
      }
    }
  }
  /** All scheduled events for offender. */
  getEvents: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
      query: {
        /** Returned events must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Returned events must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEventDto'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of cells  by group at agency location which have capacity. */
  getCellsWithCapacityForGroup: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
        /** The group name */
        group: string
      }
      query: {
        /** Cell attribute */
        attribute: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CellWithAttributes'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of cell locations by group at agency location. */
  getLocationGroup: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
        /** The group name */
        name: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationPrefixFromGroup: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
        /** The group name */
        group: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['LocationPrefixDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Return all court locations */
  getCourtNamesUsingGET: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CourtLocationsResponse']
        }
      }
    }
  }
  /** Return information about all courts. */
  getCourtsUsingGET: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Court'][]
        }
      }
    }
  }
  /** Return video link appointments */
  getVideoLinkAppointmentsUsingPOST: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkAppointmentsResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  findAvailableVideoLinkBookingOptionsUsingPOST: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkBookingOptions']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VideoLinkBookingSearchSpecification']
      }
    }
  }
  createVideoLinkBookingUsingPOST: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': number
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VideoLinkBookingSpecification']
      }
    }
  }
  getVideoLinkBookingsByPrisonDateAndCourtUsingGET: {
    parameters: {
      path: {
        /** Return video link bookings for this prison only */
        agencyId: string
        /** Return video link bookings for this date only. ISO-8601 date format */
        date: string
      }
      query: {
        /** The name a court.  If present the response will only contain video link bookings for this court. Otherwise all bookings will be returned. */
        court?: string
        /** The identifier of a court.  If present the response will only contain video link bookings for this court. Otherwise all bookings will be returned. Takes precedence over court. */
        courtId?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkBookingResponse'][]
        }
      }
    }
  }
  /** Return a video Link Booking */
  getVideoLinkBookingUsingGET: {
    parameters: {
      path: {
        /** Video link booking id */
        videoBookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkBookingResponse']
        }
      }
    }
  }
  updateVideoLinkBookingUsingPUT: {
    parameters: {
      path: {
        /** Video link booking id */
        videoBookingId: number
      }
    }
    responses: {
      /** No Content */
      204: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VideoLinkBookingUpdateSpecification']
      }
    }
  }
  deleteVideoLinkBookingUsingDELETE: {
    parameters: {
      path: {
        /** Video link booking id */
        videoBookingId: number
      }
    }
    responses: {
      /** No Content */
      204: never
    }
  }
  updateVideoLinkBookingCommentUsingPUT: {
    parameters: {
      path: {
        /** Video link booking id */
        videoLinkBookingId: number
      }
    }
    responses: {
      /** No Content */
      204: never
    }
    requestBody: {
      content: {
        'application/json': string
        'text/plain': string
      }
    }
  }
  /** Return details of Video Link Booking Events (Create, Update, Delete) in CSV format. Restrict the response to events occurring within 'days' of start-date. */
  getVideoLinkBookingEventsUsingGET: {
    parameters: {
      query: {
        /** The earliest date for which to return event details. */
        'start-date': string
        /** Return details of events occurring within this number of days of start-date */
        days: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'text/csv': string
        }
      }
    }
  }
  /** List of all the Video Link Booking rooms in the prison. */
  getVideoLinkBookingRooms: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['LocationIdAndDescription'][]
        }
      }
    }
  }
}

// export interface external {}
