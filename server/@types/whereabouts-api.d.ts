/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/court/video-link-bookings/{videoLinkBookingId}/comment': {
    /** @description Update the comment for a Video Link Booking */
    put: operations['updateVideoLinkBookingComment']
  }
  '/court/video-link-bookings/{videoBookingId}': {
    /**
     * A video Link Booking
     * @description Return a video Link Booking
     */
    get: operations['getVideoLinkBooking']
    /** @description Update a Video Link Booking */
    put: operations['updateVideoLinkBooking']
    /** @description Delete a Video Link Booking */
    delete: operations['deleteVideoLinkBooking']
  }
  '/attendance/{id}': {
    /**
     * Updates existing attendance information
     * @description Updates the attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used.
     */
    put: operations['putAttendance']
  }
  '/court/video-link-bookings': {
    /**
     * Video Link Bookings
     * @description Return details of Video Link Bookings in CSV format. Restrict the response to bookings with a main start time within 'days' of start-date.
     */
    get: operations['getVideoLinkBookingsByStartDate']
    /** @description Create a Video Link Booking */
    post: operations['createVideoLinkBooking']
  }
  '/court/video-link-bookings/date/{date}': {
    /** @description Return all video link bookings for the specified date and prisons, optionally filtering by court. */
    post: operations['getVideoLinkBookingsBySearchDetails']
  }
  '/court/video-link-booking-check': {
    /** @description Check that a potential video link booking, described by the supplied specification, can be made.  If not then return information about some alternatives. */
    post: operations['findAvailableVideoLinkBookingOptions']
  }
  '/court/video-link-appointments': {
    /**
     * Video link appointments
     * @description Return video link appointments
     */
    post: operations['getVideoLinkAppointments']
  }
  '/cell/make-cell-move': {
    /** @description Make a cell move for an offender. Triggers the creation of a MOVED_CELL case note. */
    post: operations['makeCellMove']
  }
  '/attendances': {
    /**
     * Create new attendance records for multiple offenders (This endpoint does not trigger IEP warnings)
     * @description Stores new attendance record for multiple offenders, posts attendance details back up to PNOMIS
     */
    post: operations['postAttendances']
  }
  '/attendances/{prison}': {
    /**
     * Request attendance details
     * @description Returns set of attendance details for set of booking ids
     */
    get: operations['getAttendanceForBookings']
    /**
     * Request attendance details
     * @description Returns set of attendance details for set of booking ids
     */
    post: operations['getAttendanceForBookingsByPost']
  }
  '/attendances/{prison}/attendance-over-date-range': {
    /**
     * Request attendance details
     * @description Returns set of attendance details for set of booking ids
     */
    post: operations['getAttendanceForBookingsOverDateRangeByPost']
  }
  '/attendance': {
    /**
     * Create new attendance
     * @description Stores new attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used.
     */
    post: operations['postAttendance']
  }
  '/appointment': {
    /**
     * createAppointment
     * @description Create an appointment
     */
    post: operations['createAppointment']
  }
  '/video-link-rooms/{agencyId}': {
    /**
     * getVideoLinkBookingRooms
     * @description List of all the Video Link Booking rooms in the prison.
     */
    get: operations['getVideoLinkBookingRooms']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/locations/{agencyId}/{group}/location-prefix': {
    /**
     * getLocationPrefixFromGroup
     * @description Get location prefix by group
     */
    get: operations['getLocationPrefixFromGroup']
  }
  '/locations/groups/{agencyId}/{name}': {
    /**
     * getLocationGroup
     * @description List of cell locations by group at agency location.
     */
    get: operations['getLocationGroup']
  }
  '/locations/cellsWithCapacity/{agencyId}/{group}': {
    /**
     * getCellsWithCapacityForGroup
     * @description List of cells by group at agency location which have capacity.
     */
    get: operations['getCellsWithCapacityForGroup']
  }
  '/events/{offenderNo}': {
    /**
     * getEvents
     * @description All scheduled events for offender.  This endpoint filters out cancelled events.
     */
    get: operations['getEvents']
  }
  '/events/video-link-booking-events': {
    /**
     * Video Link Booking Events
     * @description Return details of Video Link Booking Events (Create, Update, Delete) in CSV format. Restrict the response to events occurring within 'days' of start-date.
     */
    get: operations['getVideoLinkBookingEvents']
  }
  '/court/hearing-type': {
    /**
     * Return all court hearing types
     * @description Get court hearing types
     */
    get: operations['getCourtHearingTypes']
  }
  '/court/courts': {
    /**
     * All courts
     * @description Return information about all courts.
     */
    get: operations['getCourts']
  }
  '/court/courts/{courtId}/email': {
    /**
     * Court email address
     * @description Return information about email address.
     */
    get: operations['getEmailByCourtId']
  }
  '/court/court-hearing-types': {
    /**
     * All court hearing types
     * @description Return a list of all court hearing types.
     */
    get: operations['getCourtHearingTypes_1']
  }
  '/court/all-courts': {
    /**
     * Return all court locations
     * @description All court locations
     */
    get: operations['getCourtNames']
  }
  '/cell/cell-move-reason/booking/{bookingId}/bed-assignment-sequence/{bedAssignmentId}': {
    /** @description Return cell move reason */
    get: operations['getCellMoveReason']
  }
  '/attendances/{prison}/{event-location}': {
    /**
     * Request attendance details
     * @description Returns set of attendance details
     */
    get: operations['getAttendanceForEventLocation']
  }
  '/attendances/{prison}/unaccounted-for': {
    /**
     * Request unaccounted for prisoners
     * @description Return a set of prisoners that haven't attended a scheduled activity
     */
    get: operations['getPrisonersUnaccountedFor']
  }
  '/attendances/{prison}/absences': {
    /**
     * Request absences details
     * @description Returns set of attendance details for attendances with an absent reason
     */
    get: operations['getAbsences']
  }
  '/attendances/{prison}/absences-for-scheduled-activities/{absentReason}': {
    /**
     * Request absences
     * @description Return a set of absences for all offenders that have scheduled activity
     */
    get: operations['getAbsencesForReason']
  }
  '/attendances/offender/{offenderNo}/unacceptable-absences': {
    /**
     * Request unacceptable absence details
     * @description Returns unacceptable absence attendance details for an offender
     */
    get: operations['getAttendanceDetailsForOffender']
  }
  '/attendances/offender/{offenderNo}/unacceptable-absence-count': {
    /** @description Return counts of unacceptable absences and totals over time for an offender */
    get: operations['getAttendanceSummary']
  }
  '/attendances/changes': {
    /** @description Return all changes relating to an attendance */
    get: operations['getAttendanceChanges']
  }
  '/attendance-statistics/{prison}/over-date-range': {
    /**
     * Request attendance statistics
     * @description Request attendance statistics
     */
    get: operations['getAttendanceForEventLocation_1']
  }
  '/appointments/{agencyId}': {
    /**
     * getAppointments
     * @description List of appointments for the given agency that match the search criteria.
     */
    get: operations['getAppointments']
  }
  '/appointment/{id}': {
    /**
     * getAppointment
     * @description Return appointment details
     */
    get: operations['getAppointment']
    /**
     * deleteAppointment
     * @description Delete an appointment
     */
    delete: operations['deleteAppointment']
  }
  '/agencies/{agencyId}/locations/whereabouts': {
    /**
     * getWhereabouts
     * @description Whereabouts details (e.g. whether enabled) for prison.
     */
    get: operations['getWhereabouts']
  }
  '/agencies/{agencyId}/locations/groups': {
    /**
     * getAvailableLocationGroups
     * @description List of all available Location Groups at agency.
     */
    get: operations['getAvailableLocationGroups']
  }
  '/absence-reasons': {
    get: operations['reasons']
  }
  '/appointment/recurring/{id}': {
    /**
     * deleteRecurringAppointmentSequence
     * @description Delete the whole sequence of a recurring appointment
     */
    delete: operations['deleteRecurringAppointmentSequence']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    VideoLinkAppointmentSpecification: {
      /** Format: int64 */
      locationId: number
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
    }
    VideoLinkBookingUpdateSpecification: {
      courtId: string
      comment?: string
      pre?: components['schemas']['VideoLinkAppointmentSpecification']
      main: components['schemas']['VideoLinkAppointmentSpecification']
      post?: components['schemas']['VideoLinkAppointmentSpecification']
    }
    UpdateAttendanceDto: {
      attended: boolean
      paid: boolean
      /** @enum {string} */
      absentReason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      absentSubReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      comments?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status?: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    VideoLinkBookingSpecification: {
      /** Format: int64 */
      bookingId: number
      court?: string
      courtId?: string
      /** @enum {string} */
      courtHearingType?:
        | 'APPEAL'
        | 'APPLICATION'
        | 'BACKER_TRIAL'
        | 'BAIL'
        | 'CIVIL'
        | 'COMMITTAL_FOR_SENTENCE'
        | 'CUSTODY_TIME_LIMIT_APPLICATIONS'
        | 'IMMIGRATION_DEPORTATION'
        | 'FAMILY'
        | 'TRIAL'
        | 'FURTHER_CASE_MANAGEMENT'
        | 'FUTURE_TRIAL_REVIEW'
        | 'GROUND_RULES'
        | 'MENTION_DEFENDANT_MUST_ATTEND'
        | 'MENTION_TO_FIX'
        | 'NEWTON'
        | 'PLEA'
        | 'PLEA_TRIAL_PREPARATION'
        | 'PRE_TRIAL_REVIEW'
        | 'PROCEEDS_OF_CRIME_APPLICATIONS'
        | 'REMAND'
        | 'SECTION_28'
        | 'SENTENCE'
        | 'TRIBUNAL'
        | 'OTHER'
      madeByTheCourt: boolean
      comment?: string
      pre?: components['schemas']['VideoLinkAppointmentSpecification']
      main: components['schemas']['VideoLinkAppointmentSpecification']
      post?: components['schemas']['VideoLinkAppointmentSpecification']
    }
    /** @description Video link bookings search details parameters */
    VideoLinkBookingSearchDetails: {
      courtId: string
      prisonIds: string[]
    }
    LocationTimeslot: {
      /** Format: int64 */
      locationId: number
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
    }
    VideoLinkBookingResponse: {
      /** Format: int64 */
      videoLinkBookingId: number
      /** Format: int64 */
      bookingId: number
      agencyId: string
      court?: string
      /** @enum {string} */
      courtHearingType?:
        | 'APPEAL'
        | 'APPLICATION'
        | 'BACKER_TRIAL'
        | 'BAIL'
        | 'CIVIL'
        | 'COMMITTAL_FOR_SENTENCE'
        | 'CUSTODY_TIME_LIMIT_APPLICATIONS'
        | 'IMMIGRATION_DEPORTATION'
        | 'FAMILY'
        | 'TRIAL'
        | 'FURTHER_CASE_MANAGEMENT'
        | 'FUTURE_TRIAL_REVIEW'
        | 'GROUND_RULES'
        | 'MENTION_DEFENDANT_MUST_ATTEND'
        | 'MENTION_TO_FIX'
        | 'NEWTON'
        | 'PLEA'
        | 'PLEA_TRIAL_PREPARATION'
        | 'PRE_TRIAL_REVIEW'
        | 'PROCEEDS_OF_CRIME_APPLICATIONS'
        | 'REMAND'
        | 'SECTION_28'
        | 'SENTENCE'
        | 'TRIBUNAL'
        | 'OTHER'
      courtId?: string
      comment?: string
      pre?: components['schemas']['LocationTimeslot']
      main: components['schemas']['LocationTimeslot']
      post?: components['schemas']['LocationTimeslot']
    }
    Interval: {
      start: components['schemas']['LocalTime']
      end: components['schemas']['LocalTime']
    }
    LocalTime: {
      /** Format: int32 */
      hour?: number
      /** Format: int32 */
      minute?: number
      /** Format: int32 */
      second?: number
      /** Format: int32 */
      nano?: number
    }
    LocationAndInterval: {
      /** Format: int64 */
      locationId: number
      interval: components['schemas']['Interval']
    }
    VideoLinkBookingSearchSpecification: {
      agencyId: string
      /** Format: date */
      date: string
      preAppointment?: components['schemas']['LocationAndInterval']
      mainAppointment: components['schemas']['LocationAndInterval']
      postAppointment?: components['schemas']['LocationAndInterval']
      /** Format: int64 */
      vlbIdToExclude?: number
    }
    VideoLinkBookingOption: {
      pre?: components['schemas']['LocationAndInterval']
      main: components['schemas']['LocationAndInterval']
      post?: components['schemas']['LocationAndInterval']
    }
    VideoLinkBookingOptions: {
      matched: boolean
      alternatives: components['schemas']['VideoLinkBookingOption'][]
    }
    VideoLinkAppointmentDto: {
      /** Format: int64 */
      id: number
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      appointmentId: number
      /** Format: int64 */
      videoLinkBookingId: number
      /** Format: int64 */
      mainAppointmentId?: number
      court: string
      courtId?: string
      /** @enum {string} */
      hearingType: 'MAIN' | 'PRE' | 'POST'
      createdByUsername?: string
      madeByTheCourt?: boolean
      /** Format: date-time */
      startTime?: string
      /** Format: date-time */
      endTime?: string
      /** Format: int64 */
      locationId?: number
    }
    VideoLinkAppointmentsResponse: {
      appointments?: components['schemas']['VideoLinkAppointmentDto'][]
    }
    CellMoveDetails: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
      internalLocationDescriptionDestination: string
      cellMoveReasonCode: string
      commentText: string
    }
    CellMoveResponse: {
      cellMoveResult: components['schemas']['CellMoveResult']
    }
    CellMoveResult: {
      /** Format: int64 */
      bookingId: number
      agencyId: string
      /** Format: int64 */
      assignedLivingUnitId: number
      assignedLivingUnitDesc: string
      /** Format: int32 */
      bedAssignmentHistorySequence: number
      /** Format: int64 */
      caseNoteId?: number
    }
    /** @description Attendance parameters */
    AttendancesDto: {
      bookingActivities: components['schemas']['BookingActivity'][]
      /** Format: int64 */
      eventLocationId: number
      /** @enum {string} */
      period: 'AM' | 'PM' | 'ED'
      prisonId: string
      /** Format: date */
      eventDate: string
      /** @enum {string} */
      reason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      attended: boolean
      paid: boolean
      comments?: string
    }
    BookingActivity: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      activityId: number
    }
    AttendanceDto: {
      /** Format: int64 */
      id?: number
      /** Format: int64 */
      bookingId?: number
      /** Format: int64 */
      eventId?: number
      /** Format: int64 */
      eventLocationId?: number
      /** @enum {string} */
      period?: 'AM' | 'PM' | 'ED'
      prisonId?: string
      attended?: boolean
      /** @enum {string} */
      absentReason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      absentSubReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      paid?: boolean
      /** Format: date */
      eventDate?: string
      comments?: string
      /** Format: date-time */
      createDateTime?: string
      createUserId?: string
      /** Format: date-time */
      modifyDateTime?: string
      modifyUserId?: string
      /** Format: int64 */
      caseNoteId?: number
      locked?: boolean
      cellLocation?: string
      absentReasonDescription?: string
      absentSubReasonDescription?: string
    }
    AttendancesResponse: {
      attendances?: components['schemas']['AttendanceDto'][]
    }
    /** @description Attendance details */
    CreateAttendanceDto: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      eventId: number
      /** Format: int64 */
      eventLocationId: number
      /** @enum {string} */
      period: 'AM' | 'PM' | 'ED'
      prisonId: string
      attended: boolean
      paid: boolean
      /** @enum {string} */
      absentReason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      absentSubReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      /** Format: date */
      eventDate: string
      comments?: string
    }
    CreateAppointmentSpecification: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      locationId: number
      appointmentType: string
      comment?: string
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      repeat?: components['schemas']['Repeat']
    }
    Repeat: {
      /** @enum {string} */
      repeatPeriod: 'WEEKLY' | 'DAILY' | 'WEEKDAYS' | 'MONTHLY' | 'FORTNIGHTLY'
      /** Format: int64 */
      count: number
    }
    CreatedAppointmentDetailsDto: {
      /** Format: int64 */
      appointmentEventId: number
      /** Format: int64 */
      bookingId: number
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      appointmentType: string
      /** Format: int64 */
      locationId: number
    }
    LocationIdAndDescription: {
      /** Format: int64 */
      locationId: number
      description: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    Location: {
      /** Format: int64 */
      locationId: number
      locationType: string
      description: string
      locationUsage?: string
      agencyId: string
      /** Format: int64 */
      parentLocationId?: number
      /** Format: int32 */
      currentOccupancy: number
      locationPrefix: string
      /** Format: int32 */
      operationalCapacity: number
      userDescription?: string
      internalLocationCode: string
    }
    CellAttribute: {
      code: string
      description: string
    }
    CellWithAttributes: {
      /** Format: int64 */
      id: number
      description: string
      /** Format: int32 */
      noOfOccupants: number
      /** Format: int32 */
      capacity: number
      userDescription?: string
      attributes: components['schemas']['CellAttribute'][]
    }
    ScheduledEventDto: {
      /** Format: int64 */
      bookingId: number
      eventClass?: string
      /** Format: int64 */
      eventId?: number
      eventStatus?: string
      eventType?: string
      eventTypeDesc?: string
      eventSubType?: string
      eventSubTypeDesc?: string
      /** Format: date */
      eventDate?: string
      /** Format: date-time */
      startTime?: string
      /** Format: date-time */
      endTime?: string
      eventLocation?: string
      /** Format: int64 */
      eventLocationId?: number
      agencyId?: string
      eventSource?: string
      eventSourceCode?: string
      eventSourceDesc?: string
      eventOutcome?: string
      performance?: string
      outcomeComment?: string
      paid?: boolean
      payRate?: number
      locationCode?: string
      createUserId?: string
    }
    Court: {
      id: string
      name: string
      email?: string
    }
    CourtEmailDto: {
      email: string
    }
    CourtLocationsResponse: {
      courtLocations?: string[]
    }
    CellMoveReasonDto: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      bedAssignmentsSequence: number
      /** Format: int64 */
      caseNoteId: number
    }
    CellMoveReasonResponse: {
      cellMoveReason: components['schemas']['CellMoveReasonDto']
    }
    /** @description Prisoner Schedule */
    PrisonerScheduleDto: {
      /** @description Offender number (e.g. NOMS Number) */
      offenderNo: string
      /**
       * Format: int64
       * @description Activity id if any. Used to attend or pay the event
       */
      eventId?: number
      /**
       * Format: int64
       * @description Booking id for offender
       */
      bookingId?: number
      /**
       * Format: int64
       * @description The number which (uniquely) identifies the internal location associated with the Scheduled Event (Prisoner Schedule)
       */
      locationId: number
      /** @description Offender first name */
      firstName: string
      /** @description Offender last name */
      lastName: string
      /** @description Offender cell */
      cellLocation: string
      /** @description Event code */
      event: string
      /** @description Event type, e.g. VISIT, APP, PRISON_ACT */
      eventType: string
      /** @description Description of event code */
      eventDescription: string
      /** @description Location of the event */
      eventLocation: string
      /**
       * Format: int64
       * @description Id of an internal event location
       */
      eventLocationId?: number
      /** @description The event's status. Includes 'CANC', meaning cancelled for 'VISIT' */
      eventStatus: string
      /** @description Comment */
      comment: string
      /**
       * Format: date-time
       * @description Date and time at which event starts
       */
      startTime: string
      /**
       * Format: date-time
       * @description Date and time at which event ends
       */
      endTime?: string
      /** @description Attendance, possible values are the codes in the 'PS_PA_OC' reference domain */
      eventOutcome?: string
      /** @description Possible values are the codes in the 'PERFORMANCE' reference domain */
      performance?: string
      /** @description No-pay reason */
      outcomeComment?: string
      /** @description Activity paid flag */
      paid?: boolean
      /** @description Amount paid per activity session in pounds */
      payRate?: number
      /** @description Activity excluded flag */
      excluded?: boolean
      /**
       * @description Activity time slot
       * @enum {string}
       */
      timeSlot?: 'AM' | 'PM' | 'ED'
      /** @description The code for the activity location */
      locationCode?: string
      /** @description Event scheduled has been suspended */
      suspended?: boolean
    }
    ScheduledResponse: {
      scheduled: components['schemas']['PrisonerScheduleDto'][]
    }
    AbsenceDto: {
      /** Format: int64 */
      attendanceId?: number
      /** Format: int64 */
      bookingId?: number
      offenderNo?: string
      /** Format: int64 */
      eventId?: number
      /** Format: int64 */
      eventLocationId?: number
      /** Format: date */
      eventDate?: string
      /** @enum {string} */
      period?: 'AM' | 'PM' | 'ED'
      /** @enum {string} */
      reason?:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      /** @enum {string} */
      subReason?:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      subReasonDescription?: string
      eventDescription?: string
      comments?: string
      cellLocation?: string
      firstName?: string
      lastName?: string
      suspended?: boolean
    }
    AbsencesResponse: {
      description: string
      absences: components['schemas']['AbsenceDto'][]
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    AttendanceHistoryDto: {
      /** Format: date */
      eventDate: string
      activity?: string
      activityDescription?: string
      location?: string
      comments?: string
    }
    PageAttendanceHistoryDto: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AttendanceHistoryDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      unpaged?: boolean
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    AttendanceSummary: {
      /** Format: int32 */
      acceptableAbsence: number
      /** Format: int32 */
      unacceptableAbsence: number
      /** Format: int32 */
      total: number
    }
    AttendanceChangeDto: {
      /** Format: int64 */
      id: number
      /** Format: int64 */
      attendanceId: number
      /** Format: int64 */
      eventId: number
      /** Format: int64 */
      eventLocationId: number
      /** Format: int64 */
      bookingId: number
      /** @enum {string} */
      changedFrom:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'Attended'
      /** @enum {string} */
      changedTo:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
        | 'Attended'
      /** Format: date-time */
      changedOn?: string
      changedBy?: string
      prisonId?: string
    }
    AttendanceChangesResponse: {
      changes?: components['schemas']['AttendanceChangeDto'][]
    }
    PaidReasons: {
      /** Format: int32 */
      approvedCourse?: number
      /** Format: int32 */
      notRequired?: number
      /** Format: int32 */
      acceptableAbsence?: number
      acceptableAbsenceDescription: string
      approvedCourseDescription: string
      notRequiredDescription: string
    }
    Stats: {
      /** Format: int32 */
      scheduleActivities: number
      /** Format: int32 */
      notRecorded: number
      paidReasons?: components['schemas']['PaidReasons']
      unpaidReasons?: components['schemas']['UnpaidReasons']
      /** Format: int32 */
      suspended: number
      /** Format: int32 */
      attended: number
    }
    UnpaidReasons: {
      /** Format: int32 */
      restDay?: number
      /** Format: int32 */
      restInCellOrSick?: number
      /** Format: int32 */
      refused?: number
      /** Format: int32 */
      refusedIncentiveLevelWarning?: number
      /** Format: int32 */
      sessionCancelled?: number
      /** Format: int32 */
      unacceptableAbsence?: number
      /** Format: int32 */
      unacceptableAbsenceIncentiveLevelWarning?: number
      refusedDescription: string
      refusedIncentiveLevelWarningDescription: string
      sessionCancelledDescription: string
      unacceptableAbsenceDescription: string
      unacceptableAbsenceIncentiveLevelWarningDescription: string
      restDayDescription: string
      restInCellOrSickDescription: string
    }
    AppointmentSearchDto: {
      /** Format: int64 */
      id: number
      agencyId: string
      /** Format: int64 */
      locationId: number
      locationDescription: string
      appointmentTypeCode: string
      appointmentTypeDescription: string
      offenderNo: string
      firstName: string
      lastName: string
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      createUserId: string
    }
    AppointmentDetailsDto: {
      appointment: components['schemas']['AppointmentDto']
      videoLinkBooking?: components['schemas']['VideoLinkBookingDto']
      recurring?: components['schemas']['RecurringAppointmentDto']
    }
    AppointmentDto: {
      /** Format: int64 */
      id: number
      agencyId: string
      /** Format: int64 */
      locationId: number
      appointmentTypeCode: string
      offenderNo?: string
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime?: string
      createUserId?: string
      comment?: string
    }
    RecurringAppointmentDto: {
      /** Format: int64 */
      id: number
      /** @enum {string} */
      repeatPeriod: 'WEEKLY' | 'DAILY' | 'WEEKDAYS' | 'MONTHLY' | 'FORTNIGHTLY'
      /** Format: int64 */
      count: number
      /** Format: date-time */
      startTime: string
    }
    VideoLinkBookingDto: {
      /** Format: int64 */
      id: number
      main: components['schemas']['VideoLinkAppointmentDto']
      pre?: components['schemas']['VideoLinkAppointmentDto']
      post?: components['schemas']['VideoLinkAppointmentDto']
    }
    WhereaboutsConfig: {
      enabled: boolean
    }
    LocationGroup: {
      name: string
      key: string
      children: components['schemas']['LocationGroup'][]
    }
    AbsentReasonDto: {
      /** @enum {string} */
      code:
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      name: string
    }
    AbsentReasonsDto: {
      paidReasons: components['schemas']['AbsentReasonDto'][]
      unpaidReasons: components['schemas']['AbsentReasonDto'][]
      triggersIEPWarning: (
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      )[]
      triggersAbsentSubReason: (
        | 'ApprovedCourse'
        | 'AcceptableAbsence'
        | 'SessionCancelled'
        | 'RestInCellOrSick'
        | 'RestDay'
        | 'UnacceptableAbsence'
        | 'UnacceptableAbsenceIncentiveLevelWarning'
        | 'NotRequired'
        | 'Refused'
        | 'RefusedIncentiveLevelWarning'
      )[]
      paidSubReasons: components['schemas']['AbsentSubReasonDto'][]
      unpaidSubReasons: components['schemas']['AbsentSubReasonDto'][]
    }
    AbsentSubReasonDto: {
      /** @enum {string} */
      code:
        | 'Activities'
        | 'Behaviour'
        | 'Courses'
        | 'ExternalMoves'
        | 'Healthcare'
        | 'Operational'
        | 'OverAllocated'
        | 'Visits'
        | 'NotListed'
      name: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /** @description Update the comment for a Video Link Booking */
  updateVideoLinkBookingComment: {
    parameters: {
      path: {
        /** @description Video link booking id */
        videoLinkBookingId: number
      }
    }
    requestBody?: {
      content: {
        'text/plain': string
      }
    }
    responses: {
      /** @description No Content */
      204: never
    }
  }
  /**
   * A video Link Booking
   * @description Return a video Link Booking
   */
  getVideoLinkBooking: {
    parameters: {
      path: {
        /** @description Video link booking id */
        videoBookingId: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkBookingResponse']
        }
      }
    }
  }
  /** @description Update a Video Link Booking */
  updateVideoLinkBooking: {
    parameters: {
      path: {
        /** @description Video link booking id */
        videoBookingId: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['VideoLinkBookingUpdateSpecification']
      }
    }
    responses: {
      /** @description No Content */
      204: never
    }
  }
  /** @description Delete a Video Link Booking */
  deleteVideoLinkBooking: {
    parameters: {
      path: {
        /** @description Video link booking id */
        videoBookingId: number
      }
    }
    responses: {
      /** @description No Content */
      204: never
    }
  }
  /**
   * Updates existing attendance information
   * @description Updates the attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used.
   */
  putAttendance: {
    parameters: {
      path: {
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendanceDto']
      }
    }
    responses: {
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Video Link Bookings
   * @description Return details of Video Link Bookings in CSV format. Restrict the response to bookings with a main start time within 'days' of start-date.
   */
  getVideoLinkBookingsByStartDate: {
    parameters: {
      query: {
        /** @description The earliest booking start time for which to return bookings for. */
        'start-date': string
        /** @description Return details of bookings occurring within this number of days of start-date */
        days?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/csv': string
        }
      }
    }
  }
  /** @description Create a Video Link Booking */
  createVideoLinkBooking: {
    requestBody: {
      content: {
        'application/json': components['schemas']['VideoLinkBookingSpecification']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** @description Return all video link bookings for the specified date and prisons, optionally filtering by court. */
  getVideoLinkBookingsBySearchDetails: {
    parameters: {
      path: {
        /** @description Return video link bookings for this date only. ISO-8601 date format */
        date: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VideoLinkBookingSearchDetails']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkBookingResponse'][]
        }
      }
    }
  }
  /** @description Check that a potential video link booking, described by the supplied specification, can be made.  If not then return information about some alternatives. */
  findAvailableVideoLinkBookingOptions: {
    requestBody: {
      content: {
        'application/json': components['schemas']['VideoLinkBookingSearchSpecification']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkBookingOptions']
        }
      }
    }
  }
  /**
   * Video link appointments
   * @description Return video link appointments
   */
  getVideoLinkAppointments: {
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoLinkAppointmentsResponse']
        }
      }
    }
  }
  /** @description Make a cell move for an offender. Triggers the creation of a MOVED_CELL case note. */
  makeCellMove: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CellMoveDetails']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['CellMoveResponse']
        }
      }
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['CellMoveResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create new attendance records for multiple offenders (This endpoint does not trigger IEP warnings)
   * @description Stores new attendance record for multiple offenders, posts attendance details back up to PNOMIS
   */
  postAttendances: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AttendancesDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /**
   * Request attendance details
   * @description Returns set of attendance details for set of booking ids
   */
  getAttendanceForBookings: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
        /** @description Booking ids (bookings=1&bookings=2) */
        bookings: number[]
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /**
   * Request attendance details
   * @description Returns set of attendance details for set of booking ids
   */
  getAttendanceForBookingsByPost: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /**
   * Request attendance details
   * @description Returns set of attendance details for set of booking ids
   */
  getAttendanceForBookingsOverDateRangeByPost: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        fromDate: string
        /** @description Date of event in format YYYY-MM-DD defaults to fromDate */
        toDate?: string
        /** @description Time period. Leave blank for AM + PM */
        period?: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /**
   * Create new attendance
   * @description Stores new attendance record, posts attendance details back up to PNOMIS. IEP warnings are triggered when certain absence reasons are used.
   */
  postAttendance: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAttendanceDto']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['AttendanceDto']
        }
      }
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict creating an attendance. */
      406: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * createAppointment
   * @description Create an appointment
   */
  createAppointment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentSpecification']
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['CreatedAppointmentDetailsDto'][]
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['CreatedAppointmentDetailsDto'][]
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * getVideoLinkBookingRooms
   * @description List of all the Video Link Booking rooms in the prison.
   */
  getVideoLinkBookingRooms: {
    parameters: {
      path: {
        /** @description The prison */
        agencyId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['LocationIdAndDescription'][]
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  /**
   * getLocationPrefixFromGroup
   * @description Get location prefix by group
   */
  getLocationPrefixFromGroup: {
    parameters: {
      path: {
        /** @description The prison */
        agencyId: string
        /**
         * @description The group name
         * @example Houseblock 1
         */
        group: string
      }
    }
    responses: {
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * getLocationGroup
   * @description List of cell locations by group at agency location.
   */
  getLocationGroup: {
    parameters: {
      path: {
        /** @description The prison */
        agencyId: string
        /** @description The group name */
        name: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
    }
  }
  /**
   * getCellsWithCapacityForGroup
   * @description List of cells by group at agency location which have capacity.
   */
  getCellsWithCapacityForGroup: {
    parameters: {
      query: {
        /** @description Cell attribute */
        attribute?: string
      }
      path: {
        /** @description The prison */
        agencyId: string
        /** @description The group name */
        group: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CellWithAttributes'][]
        }
      }
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * getEvents
   * @description All scheduled events for offender.  This endpoint filters out cancelled events.
   */
  getEvents: {
    parameters: {
      query: {
        /** @description Returned events must be scheduled on or after this date (in YYYY-MM-DD format).  This date must be on or after today. */
        fromDate?: string
        /** @description Returned events must be scheduled on or before this date (in YYYY-MM-DD format).  This date must be on or after the fromDate. */
        toDate?: string
      }
      path: {
        /** @example A1234AA */
        offenderNo: string
      }
    }
    responses: {
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ScheduledEventDto'][]
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ScheduledEventDto'][]
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ScheduledEventDto'][]
        }
      }
    }
  }
  /**
   * Video Link Booking Events
   * @description Return details of Video Link Booking Events (Create, Update, Delete) in CSV format. Restrict the response to events occurring within 'days' of start-date.
   */
  getVideoLinkBookingEvents: {
    parameters: {
      query: {
        /** @description The earliest date for which to return event details. */
        'start-date': string
        /** @description Return details of events occurring within this number of days of start-date */
        days?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/csv': string
        }
      }
    }
  }
  /**
   * Return all court hearing types
   * @description Get court hearing types
   */
  getCourtHearingTypes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': (
            | 'APPEAL'
            | 'APPLICATION'
            | 'BACKER_TRIAL'
            | 'BAIL'
            | 'CIVIL'
            | 'COMMITTAL_FOR_SENTENCE'
            | 'CUSTODY_TIME_LIMIT_APPLICATIONS'
            | 'IMMIGRATION_DEPORTATION'
            | 'FAMILY'
            | 'TRIAL'
            | 'FURTHER_CASE_MANAGEMENT'
            | 'FUTURE_TRIAL_REVIEW'
            | 'GROUND_RULES'
            | 'MENTION_DEFENDANT_MUST_ATTEND'
            | 'MENTION_TO_FIX'
            | 'NEWTON'
            | 'PLEA'
            | 'PLEA_TRIAL_PREPARATION'
            | 'PRE_TRIAL_REVIEW'
            | 'PROCEEDS_OF_CRIME_APPLICATIONS'
            | 'REMAND'
            | 'SECTION_28'
            | 'SENTENCE'
            | 'TRIBUNAL'
            | 'OTHER'
          )[]
        }
      }
    }
  }
  /**
   * All courts
   * @description Return information about all courts.
   */
  getCourts: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Court'][]
        }
      }
    }
  }
  /**
   * Court email address
   * @description Return information about email address.
   */
  getEmailByCourtId: {
    parameters: {
      path: {
        /** @description Court id */
        courtId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CourtEmailDto']
        }
      }
    }
  }
  /**
   * All court hearing types
   * @description Return a list of all court hearing types.
   */
  getCourtHearingTypes_1: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': (
            | 'APPEAL'
            | 'APPLICATION'
            | 'BACKER_TRIAL'
            | 'BAIL'
            | 'CIVIL'
            | 'COMMITTAL_FOR_SENTENCE'
            | 'CUSTODY_TIME_LIMIT_APPLICATIONS'
            | 'IMMIGRATION_DEPORTATION'
            | 'FAMILY'
            | 'TRIAL'
            | 'FURTHER_CASE_MANAGEMENT'
            | 'FUTURE_TRIAL_REVIEW'
            | 'GROUND_RULES'
            | 'MENTION_DEFENDANT_MUST_ATTEND'
            | 'MENTION_TO_FIX'
            | 'NEWTON'
            | 'PLEA'
            | 'PLEA_TRIAL_PREPARATION'
            | 'PRE_TRIAL_REVIEW'
            | 'PROCEEDS_OF_CRIME_APPLICATIONS'
            | 'REMAND'
            | 'SECTION_28'
            | 'SENTENCE'
            | 'TRIBUNAL'
            | 'OTHER'
          )[]
        }
      }
    }
  }
  /**
   * Return all court locations
   * @description All court locations
   */
  getCourtNames: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CourtLocationsResponse']
        }
      }
    }
  }
  /** @description Return cell move reason */
  getCellMoveReason: {
    parameters: {
      path: {
        bookingId: number
        bedAssignmentId: number
      }
    }
    responses: {
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['CellMoveReasonResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Request attendance details
   * @description Returns set of attendance details
   */
  getAttendanceForEventLocation: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
        /** @description Location id of event */
        'event-location': number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /**
   * Request unaccounted for prisoners
   * @description Return a set of prisoners that haven't attended a scheduled activity
   */
  getPrisonersUnaccountedFor: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledResponse']
        }
      }
    }
  }
  /**
   * Request absences details
   * @description Returns set of attendance details for attendances with an absent reason
   */
  getAbsences: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        date: string
        /** @description Time period */
        period: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendancesResponse']
        }
      }
    }
  }
  /**
   * Request absences
   * @description Return a set of absences for all offenders that have scheduled activity
   */
  getAbsencesForReason: {
    parameters: {
      query: {
        /** @description Date of event in format YYYY-MM-DD */
        fromDate: string
        /** @description Date of event in format YYYY-MM-DD defaults to fromDate */
        toDate?: string
        /** @description Time period */
        period?: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
        /** @description Absent reason (e.g Refused, AcceptableAbsence) */
        absentReason:
          | 'ApprovedCourse'
          | 'AcceptableAbsence'
          | 'SessionCancelled'
          | 'RestInCellOrSick'
          | 'RestDay'
          | 'UnacceptableAbsence'
          | 'UnacceptableAbsenceIncentiveLevelWarning'
          | 'NotRequired'
          | 'Refused'
          | 'RefusedIncentiveLevelWarning'
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AbsencesResponse']
        }
      }
    }
  }
  /**
   * Request unacceptable absence details
   * @description Returns unacceptable absence attendance details for an offender
   */
  getAttendanceDetailsForOffender: {
    parameters: {
      query: {
        /** @description Start date of range to summarise in format YYYY-MM-DD */
        fromDate: string
        /** @description End date of range to summarise in format YYYY-MM-DD */
        toDate: string
        pageable: components['schemas']['Pageable']
      }
      path: {
        /** @description offender or Prison number or Noms id */
        offenderNo: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PageAttendanceHistoryDto']
        }
      }
    }
  }
  /** @description Return counts of unacceptable absences and totals over time for an offender */
  getAttendanceSummary: {
    parameters: {
      query: {
        /** @description Start date of range to summarise in format YYYY-MM-DD */
        fromDate: string
        /** @description End date of range to summarise in format YYYY-MM-DD */
        toDate: string
      }
      path: {
        /** @description offender or Prison number or Noms id */
        offenderNo: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendanceSummary']
        }
      }
    }
  }
  /** @description Return all changes relating to an attendance */
  getAttendanceChanges: {
    parameters: {
      query: {
        /** @description Date and Time of change in format YYYY-MM-DDT09:10 */
        fromDateTime: string
        /** @description Date and Time of the change in format YYYY-MM-DDT:09:45 */
        toDateTime?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AttendanceChangesResponse']
        }
      }
    }
  }
  /**
   * Request attendance statistics
   * @description Request attendance statistics
   */
  getAttendanceForEventLocation_1: {
    parameters: {
      query: {
        /** @description Time period. Leave blank for AM + PM */
        period?: 'AM' | 'PM' | 'ED'
        /** @description From date of event in format YYYY-MM-DD */
        fromDate: string
        /** @description To date of event in format YYYY-MM-DD */
        toDate: string
      }
      path: {
        /** @description Prison id (LEI) */
        prison: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Stats']
        }
      }
    }
  }
  /**
   * getAppointments
   * @description List of appointments for the given agency that match the search criteria.
   */
  getAppointments: {
    parameters: {
      query: {
        /** @description Date the appointments are scheduled */
        date: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /**
         * @description The location prefix of any offenders' residence associated with a returned appointment
         * @example Block A
         */
        offenderLocationPrefix?: string
        /** @description Location id */
        locationId?: number
      }
      path: {
        /** @description The agency Id */
        agencyId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentSearchDto'][]
        }
      }
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * getAppointment
   * @description Return appointment details
   */
  getAppointment: {
    parameters: {
      path: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentDetailsDto']
        }
      }
      /** @description Appointment not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * deleteAppointment
   * @description Delete an appointment
   */
  deleteAppointment: {
    parameters: {
      path: {
        id: number
      }
    }
    responses: {
      /** @description Appointment not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * getWhereabouts
   * @description Whereabouts details (e.g. whether enabled) for prison.
   */
  getWhereabouts: {
    parameters: {
      path: {
        /** @description The prison */
        agencyId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['WhereaboutsConfig']
        }
      }
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['WhereaboutsConfig']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['WhereaboutsConfig']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['WhereaboutsConfig']
        }
      }
    }
  }
  /**
   * getAvailableLocationGroups
   * @description List of all available Location Groups at agency.
   */
  getAvailableLocationGroups: {
    parameters: {
      path: {
        /** @description The prison */
        agencyId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** @description Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reasons: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AbsentReasonsDto']
        }
      }
    }
  }
  /**
   * deleteRecurringAppointmentSequence
   * @description Delete the whole sequence of a recurring appointment
   */
  deleteRecurringAppointmentSequence: {
    parameters: {
      path: {
        /** @description The id of the recurring appointment sequence. */
        id: number
      }
    }
    responses: {
      /** @description Recurring appointment sequence not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
