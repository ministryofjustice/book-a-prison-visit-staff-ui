/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/restricted-patient-search/match-restricted-patients': {
    /**
     * Match prisoners by criteria
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByCriteria']
  }
  '/prisoner-search/release-date-by-prison': {
    /**
     * Match prisoners who have a release date within a range, and optionally by prison
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByReleaseDateAndPrison']
  }
  '/prisoner-search/prisoner-numbers': {
    /**
     * Match prisoners by a list of prisoner numbers
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByNumbers']
  }
  '/prisoner-search/possible-matches': {
    /**
     * Search for possible matches by criteria, searching by prison number, PNC number, and/or name and date of birth, returning collated results by order of search. This will also search aliases for possible matches. Use when there is manual input, e.g. a user can select the correct match from search results.
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findPossibleMatchesBySearchCriteria']
  }
  '/prisoner-search/match': {
    /**
     * Match prisoners by criteria, to search across a list of specific prisons use /match-prisoners
     * @deprecated
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByCriteria_1']
  }
  '/prisoner-search/match-prisoners': {
    /**
     * Match prisoners by criteria, searching by prisoner identifier or name and returning results for the criteria matched first. Typically used when the matching data is of high quality where the first match is expected to be a near perfect match.
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByCriteria_2']
  }
  '/prisoner-search/booking-ids': {
    /**
     * Match prisoners by a list of booking ids
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    post: operations['findByIds']
  }
  '/prisoner-detail': {
    /**
     * Find prisoners by exact or wildcard terms for specified fields and return a paginated result set
     * @description
     *       Search terms and identifiers can be provided in either or mixed case and are converted to the appropriate case.
     *       This endpoint will find both exact values (full term matched) or wildcards supporting the '*' and '?' symbols.
     *       The '*' symbol will match any number of characters e.g. firstName='J*' will match 'John', 'Jane', and 'James'.
     *       The '?' symbol will match any letter substituted at that position. e.g. firstName='t?ny' will match 'Tony' and 'Tiny'
     *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     */
    post: operations['prisonerDetailSearch']
  }
  '/physical-detail': {
    /**
     * *** BETA *** Physical details search for prisoners within a prison / group of prisons - returns a paginated result set
     * @description
     *       BETA endpoint - physical details are not currently re-indexed if they change so results will be out of date / incorrect.
     *       Search by physical details.
     *       If a cell location is provided then only one prison can be supplied, otherwise multiple prisons are allowed.
     *       If lenient is set to false (default) then all supplied physical details must match in order for results to be returned.
     *       If lenient is set to true then at least one physical detail must match.
     *       Searches will return results for partial string matches, so searching for an ethnicity of white will return all
     *       prisoners with ethnicity of White: Eng./Welsh/Scot./N.Irish/British, White: Irish etc.
     *       Results are ordered so that prisoners that match the most criteria are returned first, then secondary order is by
     *       prisoner number.
     *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     */
    post: operations['prisonerDetailSearch_1']
  }
  '/match-prisoners': {
    /**
     * Match for an prisoner by criteria. This is a more lenient version to other match endpoints that includes alias and fuzzy date of birth matching. It will return the best group of matching prisoners based on the request
     * @description Specify the request criteria to match against, role required is ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH
     */
    post: operations['matchPrisoners']
  }
  '/keyword': {
    /**
     * Search for prisoners by keyword or identifiers within a list of prisons and return a paginated result set
     * @description
     *       Words and identifiers can be provided in either or mixed case and will be matched against all indexed text and keyword fields.
     *       Identifiers within the [and, or, not, exact] terms are detected and converted to the appropriate case.
     *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     */
    post: operations['keywordSearch']
  }
  '/global-search': {
    /**
     * Match prisoners by criteria
     * @description Requires ROLE_GLOBAL_SEARCH role or ROLE_PRISONER_SEARCH role
     */
    post: operations['globalFindByCriteria']
  }
  '/prisoner/{id}': {
    /**
     * Get prisoner by prisoner number (AKA NOMS number)
     * @description Requires ROLE_PRISONER_SEARCH or ROLE_VIEW_PRISONER_DATA role
     */
    get: operations['findByPrisonNumber']
  }
  '/prisoner-search/prison/{prisonId}': {
    /**
     * Get all prisoners in a prison, including restricted patients supported by a POM
     * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
     */
    get: operations['findByPrison']
  }
  '/prison/{prisonId}/prisoners': {
    /**
     * Search for prisoners within a particular prison establishment
     * @description
     *       This search is optimised for clients that have a simple search term typically containing the prisoner's name
     *       or prisoner number. The user typically is certain the prisoner is within the establishment and knows key information
     *       about the prisoner.
     *
     *       Requires ROLE_PRISONER_IN_PRISON_SEARCH or ROLE_PRISONER_SEARCH role.
     *
     *       Sort fields supported are: firstName, lastName, prisonerNumber, dateOfBirth, cellLocation e.g "sort=firstName,lastName,desc"
     *
     *       Examples:
     *
     *       "/prison/BXI/prisoners?term=John&sort=firstName,lastName,desc&page=2&size=20"
     *       This will return all people in HMP Brixton whose first or last names begins with JOHN.
     *       Results will be ordered by firstName, lastName descending.
     *       Page 3 will be returned with a maximum of 20 results per page.
     *
     *       "/prison/WWI/prisoners?sort=cellLocation"
     *       This will return all people in HMP Wandsworth.
     *       Results will be ordered by cell location ascending.
     *       Page 1 will be returned with a maximum of 10 results per page.
     *
     *       "/prison/WWI/prisoners?cellLocationPrefix=WWI-2&term=smith"
     *       "/prison/WWI/prisoners?cellLocationPrefix=2&term=smith"
     *       This will return all people in HMP Wandsworth block 2 whose name starts with SMITH.
     *
     *       "/prison/WWI/prisoners?cellLocationPrefix=2-A-3-001"
     *       This will return all people in HMP Wandsworth cell WWI-2-A-3-001
     *
     *       "/prison/WWI/prisoners?term=A1234KJ"
     *       "/prison/WWI/prisoners?term=A1234KJ bananas"
     *       This will return the single prisoner with prisoner number A1234KJ in HMP Wandsworth.
     *       An empty page will be returned if not found.
     *
     *       "/prison/WWI/prisoners?term=A J&fromDob=1956-01-01&toDob=2000-01-02"
     *       This will return all people in HMP Wandsworth. Born on or after 1956-01-01 and on or before 2000-01-02,
     *       whose name begins with A J, e.g Alan Jones born on 1956-01-01.
     *
     *       "/prison/WWI/prisoners?alerts=TACT&alerts=PEEP"
     *       This will return all people in HMP Wandsworth. With the alerts TACT or PEEP.
     */
    get: operations['search']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Search Criteria for Prisoner Search */
    RestrictedPatientSearchCriteria: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA,
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description List of supporting Prison Ids to restrict the search by. Unrestricted if not supplied or null
       * @example [
       *   "MDI"
       * ]
       */
      supportingPrisonIds?: string[]
    }
    /** @description List of parts of the body that have other marks. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
    BodyPartDetail: {
      /**
       * @description Part of the body that has the mark. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023.
       * @example Head
       * @enum {string}
       */
      bodyPart?:
        | 'Ankle'
        | 'Arm'
        | 'Ear'
        | 'Elbow'
        | 'Face'
        | 'Finger'
        | 'Foot'
        | 'Hand'
        | 'Head'
        | 'Knee'
        | 'Leg'
        | 'Lip'
        | 'Neck'
        | 'Nose'
        | 'Shoulder'
        | 'Thigh'
        | 'Toe'
        | 'Torso'
      /**
       * @description Optional free text comment describing the mark
       * @example Skull and crossbones covering chest
       */
      comment?: string
    }
    /** @description Incentive level */
    CurrentIncentive: {
      level: components['schemas']['IncentiveLevel']
      /**
       * @description Date time of the incentive
       * @example 2021-07-05T10:35:17
       */
      dateTime: string
      /**
       * Format: date
       * @description Schedule new review date
       * @example 2022-11-10
       */
      nextReviewDate: string
    }
    /** @description Incentive level */
    IncentiveLevel: {
      /**
       * @description code
       * @example STD
       */
      code?: string
      /**
       * @description description
       * @example Standard
       */
      description: string
    }
    PagePrisoner: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    Prisoner: {
      /**
       * @description Prisoner Number
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description PNC Number
       * @example 12/394773H
       */
      pncNumber?: string
      /**
       * @description PNC Number
       * @example 12/394773H
       */
      pncNumberCanonicalShort?: string
      /**
       * @description PNC Number
       * @example 2012/394773H
       */
      pncNumberCanonicalLong?: string
      /**
       * @description CRO Number
       * @example 29906/12J
       */
      croNumber?: string
      /**
       * @description Booking No.
       * @example 0001200924
       */
      bookingId?: string
      /**
       * @description Book Number
       * @example 38412A
       */
      bookNumber?: string
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Middle Names
       * @example John James
       */
      middleNames?: string
      /**
       * @description Last name
       * @example Larsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description Gender
       * @example Female
       */
      gender: string
      /**
       * @description Ethnicity
       * @example White: Eng./Welsh/Scot./N.Irish/British
       */
      ethnicity: string
      /**
       * @description Youth Offender?
       * @example true
       */
      youthOffender: boolean
      /**
       * @description Marital Status
       * @example Widowed
       */
      maritalStatus: string
      /**
       * @description Religion
       * @example Church of England (Anglican)
       */
      religion: string
      /**
       * @description Nationality
       * @example Egyptian
       */
      nationality: string
      /**
       * @description Status of the prisoner
       * @example ACTIVE IN
       */
      status: string
      /**
       * @description Last Movement Type Code of prisoner
       * @example CRT
       */
      lastMovementTypeCode?: string
      /**
       * @description Last Movement Reason of prisoner
       * @example CA
       */
      lastMovementReasonCode?: string
      /**
       * @description In/Out Status
       * @example IN
       * @enum {string}
       */
      inOutStatus?: 'IN' | 'OUT' | 'TRN'
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Prison Name
       * @example HMP Leeds
       */
      prisonName?: string
      /**
       * @description In prison cell location
       * @example A-1-002
       */
      cellLocation?: string
      /** @description Aliases Names and Details */
      aliases?: components['schemas']['PrisonerAlias'][]
      /** @description Alerts */
      alerts?: components['schemas']['PrisonerAlert'][]
      /**
       * @description Cell Sharing Risk Assessment
       * @example HIGH
       */
      csra?: string
      /**
       * @description Prisoner Category
       * @example C
       */
      category?: string
      /**
       * @description Legal Status
       * @example SENTENCED
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description The prisoner's imprisonment status code.
       * @example LIFE
       */
      imprisonmentStatus?: string
      /**
       * @description The prisoner's imprisonment status description.
       * @example Serving Life Imprisonment
       */
      imprisonmentStatusDescription?: string
      /**
       * @description Most serious offence for this sentence
       * @example Robbery
       */
      mostSeriousOffence: string
      /**
       * @description Indicates that the prisoner has been recalled
       * @example false
       */
      recall?: boolean
      /**
       * @description Indicates that the prisoner has an indeterminate sentence
       * @example true
       */
      indeterminateSentence?: boolean
      /**
       * Format: date
       * @description Start Date for this sentence
       * @example 2020-04-03
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description Actual of most likely Release Date
       * @example 2023-05-02
       */
      releaseDate?: string
      /**
       * Format: date
       * @description Release Date Confirmed
       * @example 2023-05-01
       */
      confirmedReleaseDate?: string
      /**
       * Format: date
       * @description Sentence Expiry Date
       * @example 2023-05-01
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description Licence Expiry Date
       * @example 2023-05-01
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDC Eligibility Date
       * @example 2023-05-01
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description HDC Actual Date
       * @example 2023-05-01
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description HDC End Date
       * @example 2023-05-02
       */
      homeDetentionCurfewEndDate?: string
      /**
       * Format: date
       * @description Top-up supervision start date
       * @example 2023-04-29
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description Top-up supervision expiry date
       * @example 2023-05-01
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: int32
       * @description Days added to sentence term due to adjustments.
       * @example 10
       */
      additionalDaysAwarded?: number
      /**
       * Format: date
       * @description Release date for Non determinant sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.
       * @example 2023-05-01
       */
      nonDtoReleaseDate?: string
      /**
       * @description Indicates which type of non-DTO release date is the effective release date. One of 'ARD’, 'CRD’, ‘NPD’ or 'PRRD’.
       * @example ARD
       * @enum {string}
       */
      nonDtoReleaseDateType?: 'ARD' | 'CRD' | 'NPD' | 'PRRD'
      /**
       * Format: date
       * @description Date prisoner was received into the prison
       * @example 2023-05-01
       */
      receptionDate?: string
      /**
       * Format: date
       * @description Parole  Eligibility Date
       * @example 2023-05-01
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description Automatic Release Date. If automaticReleaseOverrideDate is available then it will be set as automaticReleaseDate
       * @example 2023-05-01
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description Post Recall Release Date. if postRecallReleaseOverrideDate is available then it will be set as postRecallReleaseDate
       * @example 2023-05-01
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description Conditional Release Date. If conditionalReleaseOverrideDate is available then it will be set as conditionalReleaseDate
       * @example 2023-05-01
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description Actual Parole Date
       * @example 2023-05-01
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description Tariff Date
       * @example 2023-05-01
       */
      tariffDate?: string
      /**
       * Format: date
       * @description Release on Temporary Licence Date
       * @example 2023-05-01
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * @description current prison or outside with last movement information.
       * @example Outside - released from Leeds
       */
      locationDescription?: string
      /**
       * @description Indicates a restricted patient
       * @example true
       */
      restrictedPatient: boolean
      /**
       * @description Supporting prison ID for POM
       * @example LEI
       */
      supportingPrisonId?: string
      /**
       * @description Which hospital the prisoner has been discharged to
       * @example HAZLWD
       */
      dischargedHospitalId?: string
      /**
       * @description Hospital name to which the prisoner was discharged
       * @example Hazelwood House
       */
      dischargedHospitalDescription?: string
      /**
       * Format: date
       * @description Date of discharge
       * @example 2020-05-01
       */
      dischargeDate?: string
      /**
       * @description Any additional discharge details
       * @example Psychiatric Hospital Discharge to Hazelwood House
       */
      dischargeDetails?: string
      currentIncentive?: components['schemas']['CurrentIncentive']
      /**
       * Format: int32
       * @description Height in centimetres of the prisoner
       * @example 200
       */
      heightCentimetres?: number
      /**
       * Format: int32
       * @description Weight in kilograms of the prisoner
       * @example 102
       */
      weightKilograms?: number
      /**
       * @description Hair colour. From PROFILE_CODES table where PROFILE_TYPE = HAIR. Allowable values extracted 07/02/2023.
       * @example Blonde
       * @enum {string}
       */
      hairColour?:
        | 'Bald'
        | 'Balding'
        | 'Black'
        | 'Blonde'
        | 'Brown'
        | 'Brunette'
        | 'Dark'
        | 'Dyed'
        | 'Ginger'
        | 'Grey'
        | 'Light'
        | 'Mouse'
        | 'Multi-coloured'
        | 'Red'
        | 'White'
      /**
       * @description Right eye colour. From PROFILE_CODES table where PROFILE_TYPE = R_EYE_C. Allowable values extracted 07/02/2023.
       * @example Green
       * @enum {string}
       */
      rightEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Left eye colour. From PROFILE_CODES table where PROFILE_TYPE = L_EYE_C. Allowable values extracted 07/02/2023.
       * @example Hazel
       * @enum {string}
       */
      leftEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Facial hair. From PROFILE_CODES table where PROFILE_TYPE = FACIAL_HAIR. Allowable values extracted 07/02/2023.
       * @example Clean Shaven
       * @enum {string}
       */
      facialHair?:
        | 'Full Beard'
        | 'Clean Shaven'
        | 'Goatee Beard'
        | 'Moustache Only'
        | 'Not Applicable (Female Offender)'
        | 'No Facial Hair'
        | 'Sideburns'
      /**
       * @description Shape of face. From PROFILE_CODES table where PROFILE_TYPE = FACE. Allowable values extracted 07/02/2023.
       * @example Round
       * @enum {string}
       */
      shapeOfFace?: 'Angular' | 'Bullet' | 'Oval' | 'Round' | 'Square' | 'Triangular'
      /**
       * @description Build. From PROFILE_CODES table where PROFILE_TYPE = BUILD. Allowable values extracted 07/02/2023.
       * @example Muscular
       * @enum {string}
       */
      build?:
        | 'Fat'
        | 'Frail'
        | 'Heavy'
        | 'Medium'
        | 'Muscular'
        | 'Obese'
        | 'Proportional'
        | 'Slight'
        | 'Small'
        | 'Stocky'
        | 'Stooped'
        | 'Thin'
      /**
       * Format: int32
       * @description UK shoe size
       * @example 10
       */
      shoeSize?: number
      /** @description List of parts of the body that have tattoos. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
      tattoos?: components['schemas']['BodyPartDetail'][]
      /** @description List of parts of the body that have scars. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
      scars?: components['schemas']['BodyPartDetail'][]
      /** @description List of parts of the body that have marks. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
      marks?: components['schemas']['BodyPartDetail'][]
      /** @description List of parts of the body that have other marks. From REFERENCE_CODES table where DOMAIN = BODY_PART. Allowable values extracted 08/02/2023. */
      otherMarks?: components['schemas']['BodyPartDetail'][]
    }
    /** @description Alerts */
    PrisonerAlert: {
      /**
       * @description Alert Type
       * @example H
       */
      alertType: string
      /**
       * @description Alert Code
       * @example HA
       */
      alertCode: string
      /**
       * @description Active
       * @example true
       */
      active: boolean
      /**
       * @description Expired
       * @example true
       */
      expired: boolean
    }
    /** @description Aliases Names and Details */
    PrisonerAlias: {
      /**
       * @description First Name
       * @example Robert
       */
      firstName: string
      /**
       * @description Middle names
       * @example Trevor
       */
      middleNames?: string
      /**
       * @description Last name
       * @example Lorsen
       */
      lastName: string
      /**
       * Format: date
       * @description Date of birth
       * @example 1975-04-02
       */
      dateOfBirth: string
      /**
       * @description Gender
       * @example Male
       */
      gender?: string
      /**
       * @description Ethnicity
       * @example White : Irish
       */
      ethnicity?: string
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Search Criteria for Release Date Search */
    ReleaseDateSearch: {
      /**
       * Format: date
       * @description The lower bound for the release date range of which to search - defaults to today if not provided
       * @example 2022-04-20
       */
      earliestReleaseDate?: string
      /**
       * Format: date
       * @description The upper bound for the release date range of which to search. A required field.
       * @example 2022-05-20
       */
      latestReleaseDate: string
      /**
       * @description List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
       * @example [
       *   "MDI"
       * ]
       */
      prisonIds?: string[]
    }
    PrisonerNumbers: {
      /**
       * @description List of prisoner numbers to search by
       * @example [
       *   "A1234AA"
       * ]
       */
      prisonerNumbers: string[]
    }
    /** @description Search Criteria for possible match */
    PossibleMatchCriteria: {
      /**
       * @description Prisoner first name
       * @example john
       */
      firstName?: string
      /**
       * @description Prisoner last Name
       * @example smith
       */
      lastName?: string
      /**
       * Format: date
       * @description Prisoner date of birth
       * @example 1996-02-10
       */
      dateOfBirth?: string
      /**
       * @description Police National Computer (PNC) number (This will match both long and short PNC formats)
       * @example 2018/0123456X
       */
      pncNumber?: string
      /**
       * @description The Prisoner NOMIS Id (aka prison number/offender no in DPS)
       * @example A1234AB
       */
      nomsNumber?: string
    }
    /** @description Search Criteria for Prisoner Search */
    PrisonSearch: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA,
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description Prison Id, Prison Id or OUT or TRN
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Include aliases in search
       * @default false
       * @example false
       */
      includeAliases: boolean
    }
    /** @description Search Criteria for Prisoner Search */
    SearchCriteria: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA,
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
       * @example [
       *   "MDI"
       * ]
       */
      prisonIds?: string[]
      /**
       * @description Include aliases in search
       * @default false
       * @example false
       */
      includeAliases: boolean
    }
    BookingIds: {
      /**
       * @description List of bookingIds to search by
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      bookingIds: number[]
    }
    /** @description Pagination options. Will default to the first page if omitted. */
    PaginationRequest: {
      /**
       * Format: int32
       * @description The page number required in the paginated response
       * @example 0
       */
      page: number
      /**
       * Format: int32
       * @description The number of results to return for paginated response
       * @example 10
       */
      size: number
    }
    PrisonerDetailRequest: {
      /**
       * @description Prisoner first name
       * @example john
       */
      firstName?: string
      /**
       * @description Prisoner last name
       * @example smith
       */
      lastName?: string
      /**
       * @description Prisoner number (aka. offenderId, nomisId)
       * @example A1234AA
       */
      nomsNumber?: string
      /**
       * @description Police National Computer (PNC) number
       * @example 2018/0123456X
       */
      pncNumber?: string
      /**
       * @description Criminal Records Office (CRO) number
       * @example SF80/655108T
       */
      croNumber?: string
      /**
       * @description Fuzzy matching. Allow a one character difference in spelling in word lengths below five and two differences above.
       * @example false
       */
      fuzzyMatch?: boolean
      /**
       * @description List of prison codes to filter results by
       * @example ['LEI', 'MDI']
       */
      prisonIds: string[]
      /**
       * @description Include aliases in search
       * @default true
       * @example true
       */
      includeAliases: boolean
      pagination: components['schemas']['PaginationRequest']
    }
    PrisonerDetailResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    ErrorResponse: {
      /**
       * Format: int32
       * @description Status of Error Code
       * @example 400
       */
      status: number
      /**
       * @description Developer Information message
       * @example System is down
       */
      developerMessage?: string
      /**
       * Format: int32
       * @description Internal Error Code
       * @example 20012
       */
      errorCode: number
      /**
       * @description Error message information
       * @example Prisoner Not Found
       */
      userMessage: string
      /**
       * @description Additional information about the error
       * @example Hard disk failure
       */
      moreInfo?: string
    }
    /** @description List of body parts that have a different mark */
    BodyPart: {
      /**
       * @description Body part that has the physical mark, searching on the description in the type BODY_PART in the REFERENCE_CODES table. Allowable values extracted 08/02/2023.
       * @example Arm
       * @enum {string}
       */
      bodyPart?:
        | 'Ankle'
        | 'Arm'
        | 'Ear'
        | 'Elbow'
        | 'Face'
        | 'Finger'
        | 'Foot'
        | 'Hand'
        | 'Head'
        | 'Knee'
        | 'Leg'
        | 'Lip'
        | 'Neck'
        | 'Nose'
        | 'Shoulder'
        | 'Thigh'
        | 'Toe'
        | 'Torso'
      /**
       * @description Comment on the physical mark.
       * @example dragon
       */
      comment?: string
    }
    PhysicalDetailRequest: {
      /**
       * @description List of prison codes to filter results by
       * @example ['LEI', 'MDI']
       */
      prisonIds: string[]
      /**
       * @description Filter for the prisoners cell location. A block wing or cell can be specified. With prison id can be included or absent so HEI-3-1 and 3-1 are equivalent when the prison id is HEI
       * @example 3-1
       */
      cellLocationPrefix?: string
      /**
       * @description Gender, searching on the description in the domain SEX in the REFERENCE_CODES table.
       * @example Male
       * @enum {string}
       */
      gender?: 'Female' | 'Male' | 'Not Known / Not Recorded' | 'Not Specified (Indeterminate)' | 'Refused'
      /**
       * @description Ethnicity, searching on the description in the domain ETHNICITY in the REFERENCE_CODES table.
       * @example White : Irish
       * @enum {string}
       */
      ethnicity?:
        | 'Asian/Asian British: Indian'
        | 'Asian/Asian British: Pakistani'
        | 'Asian/Asian British: Bangladeshi'
        | 'Asian/Asian British: Chinese'
        | "Asian/Asian British: Any other backgr'nd"
        | 'Black/Black British: Caribbean'
        | 'Black/Black British: African'
        | "Black/Black British: Any other Backgr'nd"
        | 'Mixed: White and Black Caribbean'
        | 'Mixed: White and Black African'
        | 'Mixed: White and Asian'
        | 'Mixed: Any other background'
        | 'Needs to be confirmed following Merge'
        | 'Prefer not to say'
        | 'Chinese'
        | 'Other: Arab'
        | 'Other: Any other background'
        | 'White: Eng./Welsh/Scot./N.Irish/British'
        | 'White : Irish'
        | 'White: Gypsy or Irish Traveller'
        | 'White : Irish Traveller/Gypsy'
        | 'White: Any other background'
      /**
       * Format: int32
       * @description Minimum height of the prisoner in centimetres
       * @example 170
       */
      minHeight?: number
      /**
       * Format: int32
       * @description Maximum height of the prisoner in centimetres
       * @example 198
       */
      maxHeight?: number
      /**
       * Format: int32
       * @description Minimum weight of the prisoner in kilograms
       * @example 80
       */
      minWeight?: number
      /**
       * Format: int32
       * @description Maximum weight of the prisoner in kilograms
       * @example 90
       */
      maxWeight?: number
      /**
       * @description Hair colour, searching on the description in the type HAIR in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Brunette
       * @enum {string}
       */
      hairColour?:
        | 'Bald'
        | 'Balding'
        | 'Black'
        | 'Blonde'
        | 'Brown'
        | 'Brunette'
        | 'Dark'
        | 'Dyed'
        | 'Ginger'
        | 'Grey'
        | 'Light'
        | 'Mouse'
        | 'Multi-coloured'
        | 'Red'
        | 'White'
      /**
       * @description Right eye colour, searching on the description in the type R_EYE_C in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Green
       * @enum {string}
       */
      rightEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Left eye colour, searching on the description in the type L_EYE_C in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Hazel
       * @enum {string}
       */
      leftEyeColour?: 'Blue' | 'Brown' | 'Clouded' | 'Green' | 'Grey' | 'Hazel' | 'Missing' | 'Pink' | 'White'
      /**
       * @description Facial hair, searching on the description in the type FACIAL_HAIR in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Goatee Beard
       * @enum {string}
       */
      facialHair?:
        | 'Full Beard'
        | 'Clean Shaven'
        | 'Goatee Beard'
        | 'Moustache Only'
        | 'Not Applicable (Female Offender)'
        | 'No Facial Hair'
        | 'Sideburns'
      /**
       * @description Shape of face, searching on the description in the type FACE in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Bullet
       * @enum {string}
       */
      shapeOfFace?: 'Angular' | 'Bullet' | 'Oval' | 'Round' | 'Square' | 'Triangular'
      /**
       * @description Physical build, searching on the description in the type BUILD in the PROFILE_CODES table. Allowable values extracted 07/02/2023.
       * @example Medium
       * @enum {string}
       */
      build?:
        | 'Fat'
        | 'Frail'
        | 'Heavy'
        | 'Medium'
        | 'Muscular'
        | 'Obese'
        | 'Proportional'
        | 'Slight'
        | 'Small'
        | 'Stocky'
        | 'Stooped'
        | 'Thin'
      /**
       * Format: int32
       * @description Minimum UK shoe size of the prisoner
       * @example 5
       */
      minShoeSize?: number
      /**
       * Format: int32
       * @description Maximum UK shoe size of the prisoner
       * @example 10
       */
      maxShoeSize?: number
      /** @description List of body parts that have tattoos */
      tattoos?: components['schemas']['BodyPart'][]
      /** @description List of body parts that have marks */
      marks?: components['schemas']['BodyPart'][]
      /** @description List of body parts that have scars */
      scars?: components['schemas']['BodyPart'][]
      /** @description List of body parts that have a different mark */
      otherMarks?: components['schemas']['BodyPart'][]
      /**
       * @description
       *         Whether all terms are required to match. If set to true then only matches on all fields will return a result.
       *         If set to false then matches will return a higher score than non matches, but all will be returned.
       *         Prison and cell location will always be required to match.
       * @example false
       */
      lenient: boolean
      pagination: components['schemas']['PaginationRequest']
    }
    PhysicalDetailResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    MatchRequest: {
      /**
       * @description Prisoner first name
       * @example john
       */
      firstName?: string
      /**
       * @description Prisoner last Name
       * @example smith
       */
      lastName: string
      /**
       * Format: date
       * @description Prisoner date of birth
       * @example 1996-02-10
       */
      dateOfBirth?: string
      /**
       * @description Police National Computer (PNC) number
       * @example 2018/0123456X
       */
      pncNumber?: string
      /**
       * @description Criminal Records Office (CRO) number
       * @example SF80/655108T
       */
      croNumber?: string
      /**
       * @description The Prisoner NOMIS Id (aka prison number/offender no in DPS)
       * @example A1234AB
       */
      nomsNumber?: string
    }
    /** @description List of prisoners that share the same possibility of being the match */
    PrisonerMatch: {
      prisoner: components['schemas']['Prisoner']
    }
    PrisonerMatches: {
      /** @description List of prisoners that share the same possibility of being the match */
      matches: components['schemas']['PrisonerMatch'][]
      /**
       * @description How the match was performed
       * @enum {string}
       */
      matchedBy:
        | 'ALL_SUPPLIED'
        | 'ALL_SUPPLIED_ALIAS'
        | 'HMPPS_KEY'
        | 'EXTERNAL_KEY'
        | 'NAME'
        | 'PARTIAL_NAME'
        | 'PARTIAL_NAME_DOB_LENIENT'
        | 'NOTHING'
    }
    KeywordRequest: {
      /**
       * @description Match where any of the keywords are present in any text field
       * @example smith james john
       */
      orWords?: string
      /**
       * @description Match where all keywords are present in any text field
       * @example smith james
       */
      andWords?: string
      /**
       * @description Filter results where any of these words are present in any text field
       * @example jonas
       */
      notWords?: string
      /**
       * @description Match only prisoners where the full phrase is present in any text field
       * @example John Smith
       */
      exactPhrase?: string
      /**
       * @description Fuzzy matching. Allow a one character difference in spelling in word lengths below five and two differences above.
       * @example false
       */
      fuzzyMatch?: boolean
      /**
       * @description List of prison codes to filter results
       * @example [
       *   "LEI",
       *   "MDI"
       * ]
       */
      prisonIds: string[]
      pagination: components['schemas']['PaginationRequest']
      /**
       * @description The type of search. When set to DEFAULT (which is the default when not provided) search order is by calculated relevance (AKA score). An ESTABLISHMENT type will order results by name and is designed for using this API for a single quick search field for prisoners within a specific prison
       * @enum {string}
       */
      type: 'DEFAULT' | 'ESTABLISHMENT'
    }
    KeywordResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Prisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Search Criteria for Global Prisoner Search */
    GlobalSearchCriteria: {
      /**
       * @description Prisoner identifier, one of prisoner number, book number, booking ID or PNC
       * @example A1234AA
       */
      prisonerIdentifier?: string
      /**
       * @description First Name
       * @example John
       */
      firstName?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName?: string
      /**
       * @description Gender, F - Female, M - Male, NK - Not Known / Not Recorded or NS - Not Specified (Indeterminate)
       * @example M
       * @enum {string}
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'ALL'
      /**
       * @description Location, All or Inside or Outside
       * @example IN
       */
      location?: string
      /**
       * Format: date
       * @description Date of birth
       * @example 1970-02-28
       */
      dateOfBirth?: string
      /**
       * @description Include aliases in search
       * @default false
       * @example false
       */
      includeAliases: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Match prisoners by criteria
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findByCriteria: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestrictedPatientSearchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  /**
   * Match prisoners who have a release date within a range, and optionally by prison
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findByReleaseDateAndPrison: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReleaseDateSearch']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  /**
   * Match prisoners by a list of prisoner numbers
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findByNumbers: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerNumbers']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  /**
   * Search for possible matches by criteria, searching by prison number, PNC number, and/or name and date of birth, returning collated results by order of search. This will also search aliases for possible matches. Use when there is manual input, e.g. a user can select the correct match from search results.
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findPossibleMatchesBySearchCriteria: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PossibleMatchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  /**
   * Match prisoners by criteria, to search across a list of specific prisons use /match-prisoners
   * @deprecated
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findByCriteria_1: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonSearch']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  /**
   * Match prisoners by criteria, searching by prisoner identifier or name and returning results for the criteria matched first. Typically used when the matching data is of high quality where the first match is expected to be a near perfect match.
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findByCriteria_2: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  /**
   * Match prisoners by a list of booking ids
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findByIds: {
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingIds']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
  }
  /**
   * Find prisoners by exact or wildcard terms for specified fields and return a paginated result set
   * @description
   *       Search terms and identifiers can be provided in either or mixed case and are converted to the appropriate case.
   *       This endpoint will find both exact values (full term matched) or wildcards supporting the '*' and '?' symbols.
   *       The '*' symbol will match any number of characters e.g. firstName='J*' will match 'John', 'Jane', and 'James'.
   *       The '?' symbol will match any letter substituted at that position. e.g. firstName='t?ny' will match 'Tony' and 'Tiny'
   *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
   */
  prisonerDetailSearch: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerDetailRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetailResponse']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * *** BETA *** Physical details search for prisoners within a prison / group of prisons - returns a paginated result set
   * @description
   *       BETA endpoint - physical details are not currently re-indexed if they change so results will be out of date / incorrect.
   *       Search by physical details.
   *       If a cell location is provided then only one prison can be supplied, otherwise multiple prisons are allowed.
   *       If lenient is set to false (default) then all supplied physical details must match in order for results to be returned.
   *       If lenient is set to true then at least one physical detail must match.
   *       Searches will return results for partial string matches, so searching for an ethnicity of white will return all
   *       prisoners with ethnicity of White: Eng./Welsh/Scot./N.Irish/British, White: Irish etc.
   *       Results are ordered so that prisoners that match the most criteria are returned first, then secondary order is by
   *       prisoner number.
   *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
   */
  prisonerDetailSearch_1: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PhysicalDetailRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['PhysicalDetailResponse']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Match for an prisoner by criteria. This is a more lenient version to other match endpoints that includes alias and fuzzy date of birth matching. It will return the best group of matching prisoners based on the request
   * @description Specify the request criteria to match against, role required is ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH
   */
  matchPrisoners: {
    requestBody: {
      content: {
        'application/json': components['schemas']['MatchRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerMatches']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Search for prisoners by keyword or identifiers within a list of prisons and return a paginated result set
   * @description
   *       Words and identifiers can be provided in either or mixed case and will be matched against all indexed text and keyword fields.
   *       Identifiers within the [and, or, not, exact] terms are detected and converted to the appropriate case.
   *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
   */
  keywordSearch: {
    requestBody: {
      content: {
        'application/json': components['schemas']['KeywordRequest']
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['KeywordResponse']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Match prisoners by criteria
   * @description Requires ROLE_GLOBAL_SEARCH role or ROLE_PRISONER_SEARCH role
   */
  globalFindByCriteria: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GlobalSearchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  /**
   * Get prisoner by prisoner number (AKA NOMS number)
   * @description Requires ROLE_PRISONER_SEARCH or ROLE_VIEW_PRISONER_DATA role
   */
  findByPrisonNumber: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Prisoner']
        }
      }
    }
  }
  /**
   * Get all prisoners in a prison, including restricted patients supported by a POM
   * @description Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role
   */
  findByPrison: {
    parameters: {
      query?: {
        'include-restricted-patients'?: boolean
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      path: {
        prisonId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
  /**
   * Search for prisoners within a particular prison establishment
   * @description
   *       This search is optimised for clients that have a simple search term typically containing the prisoner's name
   *       or prisoner number. The user typically is certain the prisoner is within the establishment and knows key information
   *       about the prisoner.
   *
   *       Requires ROLE_PRISONER_IN_PRISON_SEARCH or ROLE_PRISONER_SEARCH role.
   *
   *       Sort fields supported are: firstName, lastName, prisonerNumber, dateOfBirth, cellLocation e.g "sort=firstName,lastName,desc"
   *
   *       Examples:
   *
   *       "/prison/BXI/prisoners?term=John&sort=firstName,lastName,desc&page=2&size=20"
   *       This will return all people in HMP Brixton whose first or last names begins with JOHN.
   *       Results will be ordered by firstName, lastName descending.
   *       Page 3 will be returned with a maximum of 20 results per page.
   *
   *       "/prison/WWI/prisoners?sort=cellLocation"
   *       This will return all people in HMP Wandsworth.
   *       Results will be ordered by cell location ascending.
   *       Page 1 will be returned with a maximum of 10 results per page.
   *
   *       "/prison/WWI/prisoners?cellLocationPrefix=WWI-2&term=smith"
   *       "/prison/WWI/prisoners?cellLocationPrefix=2&term=smith"
   *       This will return all people in HMP Wandsworth block 2 whose name starts with SMITH.
   *
   *       "/prison/WWI/prisoners?cellLocationPrefix=2-A-3-001"
   *       This will return all people in HMP Wandsworth cell WWI-2-A-3-001
   *
   *       "/prison/WWI/prisoners?term=A1234KJ"
   *       "/prison/WWI/prisoners?term=A1234KJ bananas"
   *       This will return the single prisoner with prisoner number A1234KJ in HMP Wandsworth.
   *       An empty page will be returned if not found.
   *
   *       "/prison/WWI/prisoners?term=A J&fromDob=1956-01-01&toDob=2000-01-02"
   *       This will return all people in HMP Wandsworth. Born on or after 1956-01-01 and on or before 2000-01-02,
   *       whose name begins with A J, e.g Alan Jones born on 1956-01-01.
   *
   *       "/prison/WWI/prisoners?alerts=TACT&alerts=PEEP"
   *       This will return all people in HMP Wandsworth. With the alerts TACT or PEEP.
   */
  search: {
    parameters: {
      query?: {
        /**
         * @description The primary search term. Whe absent all prisoners will be returned at the prison
         * @example john smith
         */
        term?: string
        /**
         * @description alert codes to filter by. Zero or more can be supplied. When multiple supplied the filter is effectively and OR
         * @example XTACT
         */
        alerts?: string[]
        /**
         * @description Offenders with a DOB >= this date
         * @example 1970-01-02
         */
        fromDob?: string
        /**
         * @description Offenders with a DOB <= this date
         * @example 1975-01-02
         */
        toDob?: string
        /**
         * @description Filter for the prisoners cell location. A block wing or cell can be specified. With prison id can be included or absent so HEI-3-1 and 3-1 are equivalent when the prison id is HEI
         * @example 3-1
         */
        cellLocationPrefix?: string
        /**
         * @description Filter for the prisoners on an incentive level.
         * @example STD
         */
        incentiveLevelCode?: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      path: {
        prisonId: string
      }
    }
    responses: {
      /** @description Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
      /** @description Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
