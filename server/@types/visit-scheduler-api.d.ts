/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/config/prisons/supported': {
    /**
     * Get supported prisons
     * @description Get all supported prisons id's
     */
    get: operations['getSupportedPrisons']
  }
  '/location-groups/group': {
    /**
     * Create location group
     * @description Create location group
     */
    post: operations['createLocationGroup']
  }
  '/location-groups/group/{reference}': {
    /**
     * Get location group
     * @description Get location group by reference
     */
    get: operations['getLocationGroup']
    /**
     * Update location group
     * @description Update existing location group by reference
     */
    put: operations['updateLocationGroup']
    /**
     * Delete location group
     * @description Delete location group by reference
     */
    delete: operations['deleteSessionLocationGroup']
  }
  '/location-groups/{prisonCode}': {
    /**
     * Get location groups
     * @description Get all location groups for given prison
     */
    get: operations['getLocationGroups']
  }
  '/migrate-visits': {
    /** Migrate a visit */
    post: operations['migrateVisit']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/visit-session-templates': {
    /**
     * Get session templates
     * @description Get session templates by given parameters
     */
    get: operations['getSessionTemplates']
  }
  '/visit-session-templates/template': {
    /**
     * Create a session template
     * @description Create a session templates
     */
    post: operations['createSessionTemplate']
  }
  '/visit-session-templates/template/{reference}': {
    /**
     * Get session template
     * @description Get session template by reference
     */
    get: operations['getSessionTemplate']
    /**
     * Update a session template
     * @description Update a session templates
     */
    put: operations['updateSessionTemplate']
    /**
     * Delete session template by reference
     * @description Delete session template by reference
     */
    delete: operations['deleteSessionTemplate']
  }
  '/visit-sessions': {
    /**
     * Returns all visit sessions which are within the reservable time period - whether or not they are full
     * @description Retrieve all visits for a specified prisoner
     */
    get: operations['getVisitSessions']
  }
  '/visit-sessions/capacity': {
    /**
     * Returns the session capacity for the given sessions
     * @description Returns the session capacity for the given sessions
     */
    get: operations['getSessionCapacity']
  }
  '/visit-sessions/schedule': {
    /**
     * Returns session scheduled for given prison and date
     * @description Returns session scheduled for given prison and date
     */
    get: operations['getSessionSchedule']
  }
  '/visit-support': {
    /**
     * Available Support
     * @description Retrieve all available support types
     */
    get: operations['getSupportTypes']
  }
  '/visits/search': {
    /**
     * Get visits
     * @description Retrieve visits with optional filters, sorted by start timestamp descending
     */
    get: operations['getVisitsByFilterPageable']
  }
  '/visits/slot/reserve': {
    /** Reserve a slot (date/time slot) for a visit (a starting point) */
    post: operations['reserveVisitSlot']
  }
  '/visits/{applicationReference}/book': {
    /** Book a visit (end of flow) */
    put: operations['bookVisit']
  }
  '/visits/{applicationReference}/slot/change': {
    /** Change a reserved slot and associated details for a visit (before booking) */
    put: operations['changeReservedVisitSlot']
  }
  '/visits/{reference}': {
    /**
     * Get a visit
     * @description Retrieve visit by visit reference (excludes Reserved and CHANGING)
     */
    get: operations['getVisitByReference']
  }
  '/visits/{reference}/cancel': {
    /** Cancel an existing booked visit */
    put: operations['cancelVisit']
    /**
     * Cancel an existing visit
     * @deprecated
     */
    patch: operations['cancelVisit_1']
  }
  '/visits/{reference}/change': {
    /** Change a booked visit, (a starting point) */
    put: operations['changeBookedVisit']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ChangeVisitSlotRequestDto: {
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp?: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp?: string
      visitContact?: components['schemas']['ContactDto']
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction?: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /** @description List of additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto'][]
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
    }
    /** @description Contact */
    ContactDto: {
      /**
       * @description Contact Name
       * @example John Smith
       */
      name: string
      /**
       * @description Contact Phone Number
       * @example 01234 567890
       */
      telephone: string
    }
    /** @description Contact associated with the visit */
    CreateLegacyContactOnVisitRequestDto: {
      /**
       * @description Contact Name
       * @default UNKNOWN
       * @example John Smith
       */
      name: string
      /**
       * @description Contact Phone Number
       * @default UNKNOWN
       * @example 01234 567890
       */
      telephone: string
    }
    /** @description Create legacy data */
    CreateLegacyDataRequestDto: {
      /**
       * Format: int64
       * @description NOMIS lead visitor ID
       * @example 1234556
       */
      leadVisitorId: number
    }
    CreateSessionTemplateDto: {
      /**
       * @description biWeekly time table
       * @example true
       */
      biWeekly: boolean
      /**
       * Format: int32
       * @description closed capacity
       * @example 10
       */
      closedCapacity: number
      /**
       * @description day of week fpr visit
       * @example MONDAY
       * @enum {string}
       */
      dayOfWeek: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
      /**
       * Format: HH:mm
       * @example 13:45
       */
      endTime: string
      /**
       * @description enhanced privilege
       * @example true
       */
      enhanced: boolean
      /** @description list of group references for permitted session location groups */
      locationGroupReferences?: string[]
      /**
       * @description Name for Session template
       * @example Monday Xmas
       */
      name: string
      /**
       * Format: int32
       * @description open capacity
       * @example 50
       */
      openCapacity: number
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
      /**
       * Format: HH:mm
       * @example 13:45
       */
      startTime: string
      /**
       * Format: date
       * @description The start of the Validity period for the session template
       * @example 2019-12-02
       */
      validFromDate: string
      /**
       * Format: date
       * @description The end of the Validity period for the session template
       * @example 2019-12-02
       */
      validToDate?: string
      /**
       * @description visit room
       * @example A1
       */
      visitRoom: string
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    ErrorResponse: {
      developerMessage?: string
      /** Format: int32 */
      errorCode?: number
      /** Format: int32 */
      status: number
      userMessage?: string
    }
    GetDlqResult: {
      messages: components['schemas']['DlqMessage'][]
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
    }
    Message: {
      attributes?: {
        [key: string]: string | undefined
      }
      body?: string
      md5OfBody?: string
      md5OfMessageAttributes?: string
      messageAttributes?: {
        [key: string]: components['schemas']['MessageAttributeValue'] | undefined
      }
      messageId?: string
      receiptHandle?: string
    }
    MessageAttributeValue: {
      binaryListValues?: {
        char?: string
        direct?: boolean
        /** Format: double */
        double?: number
        /** Format: float */
        float?: number
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        readOnly?: boolean
        /** Format: int32 */
        short?: number
      }[]
      binaryValue?: {
        char?: string
        direct?: boolean
        /** Format: double */
        double?: number
        /** Format: float */
        float?: number
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        readOnly?: boolean
        /** Format: int32 */
        short?: number
      }
      dataType?: string
      stringListValues?: string[]
      stringValue?: string
    }
    /** @description Migrate visit request */
    MigrateVisitRequestDto: {
      /**
       * Format: date-time
       * @description The date and time of when the visit was created in NOMIS
       */
      createDateTime?: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      legacyData?: components['schemas']['CreateLegacyDataRequestDto']
      /**
       * Format: date-time
       * @description The date and time of when the visit was modified in NOMIS
       */
      modifyDateTime?: string
      /**
       * @description Outcome Status
       * @default NOT_RECORDED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      visitContact?: components['schemas']['CreateLegacyContactOnVisitRequestDto']
      /** @description Visit notes */
      visitNotes?: components['schemas']['VisitNoteDto'][]
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Room
       * @example A1
       */
      visitRoom: string
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'RESERVED' | 'CHANGING' | 'BOOKED' | 'CANCELLED'
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description List of visitors associated with the visit */
      visitors?: components['schemas']['VisitorDto'][]
    }
    /** @description Visit Outcome */
    OutcomeDto: {
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
      /**
       * @description Outcome text
       * @example Because he got covid
       */
      text?: string
    }
    PageVisitDto: {
      content?: components['schemas']['VisitDto'][]
      empty?: boolean
      first?: boolean
      last?: boolean
      /** Format: int32 */
      number?: number
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      /** Format: int32 */
      size?: number
      sort?: components['schemas']['SortObject']
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      /** Format: int32 */
      pageNumber?: number
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      sort?: components['schemas']['SortObject']
      unpaged?: boolean
    }
    /** @description list of locations for group */
    PermittedSessionLocationDto: {
      /**
       * @description Level four location code
       * @example 001
       */
      levelFourCode?: string
      /**
       * @description Level one location code
       * @example w
       */
      levelOneCode: string
      /**
       * @description Level three location code
       * @example 1
       */
      levelThreeCode?: string
      /**
       * @description Level two location code
       * @example c
       */
      levelTwoCode?: string
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    ReserveVisitSlotDto: {
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      visitContact?: components['schemas']['ContactDto']
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Room
       * @example A1
       */
      visitRoom: string
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description List of additional support associated with the visit */
      visitorSupport?: components['schemas']['VisitorSupportDto'][]
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
    }
    RetryDlqResult: {
      messages: components['schemas']['Message'][]
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Session Capacity */
    SessionCapacityDto: {
      /**
       * Format: int32
       * @description closed capacity
       * @example 10
       */
      closed: number
      /**
       * Format: int32
       * @description open capacity
       * @example 50
       */
      open: number
    }
    SessionLocationGroupDto: {
      /** @description list of locations for group */
      locations: components['schemas']['PermittedSessionLocationDto'][]
      /**
       * @description Group name
       * @example Main group
       */
      name: string
      /**
       * @description Reference
       * @example v9-d7-ed-7u
       */
      reference: string
    }
    /** @description Session schedule */
    SessionScheduleDto: {
      capacity: components['schemas']['SessionCapacityDto']
      /**
       * Format: HH:mm
       * @example 13:45
       */
      endTime: string
      /**
       * @description prisoner location group
       * @example Wing C
       */
      prisonerLocationGroupNames: string[]
      /**
       * Format: date
       * @description The end date of sessionTemplate
       * @example 2020-11-01
       */
      sessionTemplateEndDate?: string
      /**
       * @description The session template frequency
       * @example BI_WEEKLY
       * @enum {string}
       */
      sessionTemplateFrequency: 'BI_WEEKLY' | 'WEEKLY' | 'ONE_OFF'
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * Format: HH:mm
       * @example 13:45
       */
      startTime: string
    }
    SessionTemplateDto: {
      /**
       * @description biWeekly
       * @example true
       */
      biWeekly: boolean
      /**
       * Format: int32
       * @description closed capacity
       * @example 10
       */
      closedCapacity: number
      /**
       * @description day of week for visit
       * @example MONDAY
       * @enum {string}
       */
      dayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
      /**
       * Format: HH:mm
       * @example 13:45
       */
      endTime: string
      /**
       * @description enhanced privilege
       * @example true
       */
      enhanced: boolean
      /**
       * @description name
       * @example Monday Session
       */
      name: string
      /**
       * Format: int32
       * @description open capacity
       * @example 50
       */
      openCapacity: number
      /** @description list of permitted session location groups */
      permittedLocationGroups: components['schemas']['SessionLocationGroupDto'][]
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
      /**
       * @description Reference
       * @example v9d.7ed.7u
       */
      reference: string
      /**
       * Format: HH:mm
       * @example 13:45
       */
      startTime: string
      /**
       * Format: date
       * @description The start of the Validity period for the session template
       * @example 2019-12-02
       */
      validFromDate: string
      /**
       * Format: date
       * @description The end of the Validity period for the session template
       * @example 2019-12-02
       */
      validToDate?: string
      /**
       * @description visit room
       * @example A1
       */
      visitRoom: string
      /**
       * @description visit type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Support Type */
    SupportTypeDto: {
      /**
       * @description Support description
       * @example Face covering exemption
       */
      description: string
      /**
       * @description Support type name
       * @example MASK_EXEMPT
       */
      type: string
    }
    UpdateSessionTemplateDto: {
      /**
       * @description biWeekly time table
       * @example true
       */
      biWeekly: boolean
      /**
       * Format: int32
       * @description closed capacity
       * @example 10
       */
      closedCapacity: number
      /**
       * Format: HH:mm
       * @example 13:45
       */
      endTime: string
      /**
       * @description enhanced privilege
       * @example true
       */
      enhanced: boolean
      /** @description list of group references for permitted session location groups */
      locationGroupReferences?: string[]
      /**
       * @description Name for Session template
       * @example Monday Xmas
       */
      name: string
      /**
       * Format: int32
       * @description open capacity
       * @example 50
       */
      openCapacity: number
      /**
       * Format: HH:mm
       * @example 13:45
       */
      startTime: string
      /**
       * Format: date
       * @description The start of the Validity period for the session template
       * @example 2019-12-02
       */
      validFromDate: string
      /**
       * Format: date
       * @description The end of the Validity period for the session template
       * @example 2019-12-02
       */
      validToDate?: string
    }
    /** @description Visit */
    VisitDto: {
      /**
       * @description Application Reference
       * @example dfs-wjs-eqr
       */
      applicationReference: string
      /**
       * Format: date-time
       * @description The visit created date and time
       */
      createdTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      /**
       * Format: date-time
       * @description The visit modified date and time
       */
      modifiedTimestamp: string
      /**
       * @description Outcome Status
       * @example VISITOR_CANCELLED
       * @enum {string}
       */
      outcomeStatus?:
        | 'ADMINISTRATIVE_CANCELLATION'
        | 'ADMINISTRATIVE_ERROR'
        | 'BATCH_CANCELLATION'
        | 'CANCELLATION'
        | 'COMPLETED_NORMALLY'
        | 'ESTABLISHMENT_CANCELLED'
        | 'NOT_RECORDED'
        | 'NO_VISITING_ORDER'
        | 'PRISONER_CANCELLED'
        | 'PRISONER_COMPLETED_EARLY'
        | 'PRISONER_REFUSED_TO_ATTEND'
        | 'TERMINATED_BY_STAFF'
        | 'VISITOR_CANCELLED'
        | 'VISITOR_COMPLETED_EARLY'
        | 'VISITOR_DECLINED_ENTRY'
        | 'VISITOR_DID_NOT_ARRIVE'
        | 'VISITOR_FAILED_SECURITY_CHECKS'
        | 'VISIT_ORDER_CANCELLED'
        | 'SUPERSEDED_CANCELLATION'
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Visit Reference
       * @example v9-d7-ed-7u
       */
      reference: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      visitContact?: components['schemas']['ContactDto']
      /** @description Visit Notes */
      visitNotes: components['schemas']['VisitNoteDto'][]
      /**
       * @description Visit Restriction
       * @example OPEN
       * @enum {string}
       */
      visitRestriction: 'OPEN' | 'CLOSED' | 'UNKNOWN'
      /**
       * @description Visit Room
       * @example A1 L3
       */
      visitRoom: string
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus: 'RESERVED' | 'CHANGING' | 'BOOKED' | 'CANCELLED'
      /**
       * @description Visit Type
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
      /** @description List of additional support associated with the visit */
      visitorSupport: components['schemas']['VisitorSupportDto'][]
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
    }
    /** @description VisitNote */
    VisitNoteDto: {
      /**
       * @description Note text
       * @example Visitor is concerned that his mother in-law is coming!
       */
      text: string
      /**
       * @description Note type
       * @example VISITOR_CONCERN
       * @enum {string}
       */
      type: 'VISITOR_CONCERN' | 'VISIT_OUTCOMES' | 'VISIT_COMMENT' | 'STATUS_CHANGED_REASON'
    }
    /** @description Visit Session */
    VisitSessionDto: {
      /**
       * Format: int32
       * @description The count of closed visit bookings already reserved or booked for this session
       * @example 1
       */
      closedVisitBookedCount?: number
      /**
       * Format: int32
       * @description The number of closed visits which may take place within this session
       * @example 1
       */
      closedVisitCapacity: number
      /**
       * Format: date-time
       * @description The end timestamp for this visit session
       */
      endTimestamp: string
      /**
       * Format: int32
       * @description The count of open visit bookings already reserved or booked for this session
       * @example 1
       */
      openVisitBookedCount?: number
      /**
       * Format: int32
       * @description The number of concurrent visits which may take place within this session
       * @example 1
       */
      openVisitCapacity: number
      /**
       * @description The prison id
       * @example LEI
       */
      prisonId: string
      /** @description Session conflicts */
      sessionConflicts?: ('NON_ASSOCIATION' | 'DOUBLE_BOOKED')[]
      /**
       * @description Session Template Reference
       * @example v9d.7ed.7u
       */
      sessionTemplateReference: string
      /**
       * Format: date-time
       * @description The start timestamp for this visit session
       */
      startTimestamp: string
      /**
       * @description The Name of the visit room in which this visit session takes place
       * @example Visit room 1
       */
      visitRoomName: string
      /**
       * @description The type of visits taking place within this session
       * @example SOCIAL
       * @enum {string}
       */
      visitType: 'SOCIAL'
    }
    /** @description Visitor */
    VisitorDto: {
      /**
       * Format: int64
       * @description Person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description true if visitor is the contact for the visit otherwise false
       * @example true
       */
      visitContact?: boolean
    }
    /** @description Visitor support */
    VisitorSupportDto: {
      /**
       * @description Support text description
       * @example visually impaired assistance
       */
      text?: string
      /**
       * @description Support type
       * @example OTHER
       */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  getSupportedPrisons: {
    /**
     * Get supported prisons
     * @description Get all supported prisons id's
     */
    responses: {
      /** @description Supported prisons returned */
      200: {
        content: {
          'application/json': string[]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createLocationGroup: {
    /**
     * Create location group
     * @description Create location group
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionLocationGroupDto']
      }
    }
    responses: {
      /** @description Created location group */
      200: {
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create location group */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroup: {
    /**
     * Get location group
     * @description Get location group by reference
     */
    parameters: {
      /**
       * @description reference
       * @example afe~dcb~fc
       */
      path: {
        reference: string
      }
    }
    responses: {
      /** @description Location groups returned for given prison */
      200: {
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location group not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateLocationGroup: {
    /**
     * Update location group
     * @description Update existing location group by reference
     */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionLocationGroupDto']
      }
    }
    responses: {
      /** @description Updated location group */
      200: {
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update location group */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location group not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSessionLocationGroup: {
    /**
     * Delete location group
     * @description Delete location group by reference
     */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    responses: {
      /** @description Session templates deleted */
      200: {
        content: {
          'application/json': string
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session location group not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroups: {
    /**
     * Get location groups
     * @description Get all location groups for given prison
     */
    parameters: {
      /**
       * @description prisonCode
       * @example MDI
       */
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Location groups returned for given prison */
      200: {
        content: {
          'application/json': components['schemas']['SessionLocationGroupDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateVisit: {
    /** Migrate a visit */
    requestBody: {
      content: {
        'application/json': components['schemas']['MigrateVisitRequestDto']
      }
    }
    responses: {
      /** @description Visit migrated */
      201: {
        content: {
          'application/json': string
        }
      }
      /** @description Incorrect request to migrate a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to migrate a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  getSessionTemplates: {
    /**
     * Get session templates
     * @description Get session templates by given parameters
     */
    parameters: {
      /**
       * @description Filter results by prison id/code
       * @example MDI
       */
      /**
       * @description Filter results by day of week
       * @example MONDAY
       */
      /**
       * @description Filter results by that when the session template is valid from
       * @example 2021-11-03
       */
      /**
       * @description Filter results by that when the session template is valid to
       * @example 2021-11-03
       */
      query: {
        prisonCode: string
        dayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
        validFrom?: string
        validTo?: string
      }
    }
    responses: {
      /** @description Session templates returned */
      200: {
        content: {
          'application/json': components['schemas']['SessionTemplateDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createSessionTemplate: {
    /**
     * Create a session template
     * @description Create a session templates
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSessionTemplateDto']
      }
    }
    responses: {
      /** @description Session templates created */
      200: {
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to create session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionTemplate: {
    /**
     * Get session template
     * @description Get session template by reference
     */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    responses: {
      /** @description Session templates returned */
      200: {
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session Template not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSessionTemplate: {
    /**
     * Update a session template
     * @description Update a session templates
     */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSessionTemplateDto']
      }
    }
    responses: {
      /** @description Session templates updated */
      200: {
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to update session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session Template not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSessionTemplate: {
    /**
     * Delete session template by reference
     * @description Delete session template by reference
     */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    responses: {
      /** @description Session templates deleted */
      200: {
        content: {
          'application/json': string
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Session Template not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitSessions: {
    /**
     * Returns all visit sessions which are within the reservable time period - whether or not they are full
     * @description Retrieve all visits for a specified prisoner
     */
    parameters: {
      /**
       * @description Query by NOMIS Prison Identifier
       * @example MDI
       */
      /**
       * @description Filter results by prisoner id
       * @example A12345DC
       */
      /**
       * @description Override the default minimum number of days notice from the current date
       * @example 2
       */
      /**
       * @description Override the default maximum number of days to book-ahead from the current date
       * @example 28
       */
      query: {
        prisonId: string
        prisonerId?: string
        min?: number
        max?: number
      }
    }
    responses: {
      /** @description Visit session information returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitSessionDto'][]
        }
      }
      /** @description Incorrect request to Get visit sessions */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionCapacity: {
    /**
     * Returns the session capacity for the given sessions
     * @description Returns the session capacity for the given sessions
     */
    parameters: {
      /**
       * @description Query by NOMIS Prison Identifier
       * @example CLI
       */
      /**
       * @description Session date
       * @example 2020-11-01
       */
      /**
       * @description Session start time
       * @example 13:30:00
       */
      /**
       * @description Session end time
       * @example 14:30:00
       */
      query: {
        prisonId: string
        sessionDate: string
        sessionStartTime: string
        sessionEndTime: string
      }
    }
    responses: {
      /** @description the session capacity for the given sessions */
      200: {
        content: {
          'application/json': components['schemas']['SessionCapacityDto']
        }
      }
      /** @description Incorrect request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Capacity not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSessionSchedule: {
    /**
     * Returns session scheduled for given prison and date
     * @description Returns session scheduled for given prison and date
     */
    parameters: {
      /**
       * @description Query by NOMIS Prison Identifier
       * @example MDI
       */
      /**
       * @description Query by session scheduled date
       * @example 2020-11-01
       */
      query: {
        prisonId: string
        date: string
      }
    }
    responses: {
      /** @description Session scheduled information returned */
      200: {
        content: {
          'application/json': components['schemas']['SessionScheduleDto'][]
        }
      }
      /** @description Incorrect request to get session scheduled */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSupportTypes: {
    /**
     * Available Support
     * @description Retrieve all available support types
     */
    responses: {
      /** @description Available Support information returned */
      200: {
        content: {
          'application/json': components['schemas']['SupportTypeDto'][]
        }
      }
      /** @description Incorrect request to Get Available Support */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitsByFilterPageable: {
    /**
     * Get visits
     * @description Retrieve visits with optional filters, sorted by start timestamp descending
     */
    parameters: {
      /**
       * @description Filter results by prisoner id
       * @example A12345DC
       */
      /**
       * @description Filter results by prison id/code
       * @example MDI
       */
      /**
       * @description Filter results by visits that start on or after the given timestamp
       * @example 2021-11-03T09:00:00
       */
      /**
       * @description Filter results by visits that start on or before the given timestamp
       * @example 2021-11-03T09:00:00
       */
      /**
       * @description Filter results by visitor (contact id)
       * @example 12322
       */
      /**
       * @description Filter results by visit status
       * @example BOOKED
       */
      /**
       * @description Pagination page number, starting at zero
       * @example 0
       */
      /**
       * @description Pagination size per page
       * @example 50
       */
      query: {
        prisonerId?: string
        prisonId?: string
        startDateTime?: string
        endDateTime?: string
        visitorId?: number
        visitStatus: ('RESERVED' | 'CHANGING' | 'BOOKED' | 'CANCELLED')[]
        page: number
        size: number
      }
    }
    responses: {
      /** @description Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['PageVisitDto']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to retrieve visits */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reserveVisitSlot: {
    /** Reserve a slot (date/time slot) for a visit (a starting point) */
    requestBody: {
      content: {
        'application/json': components['schemas']['ReserveVisitSlotDto']
      }
    }
    responses: {
      /** @description Visit slot reserved */
      201: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to reserve a slot */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to reserve a slot */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  bookVisit: {
    /** Book a visit (end of flow) */
    parameters: {
      /**
       * @description applicationReference
       * @example dfs-wjs-eqr
       */
      path: {
        applicationReference: string
      }
    }
    responses: {
      /** @description Visit updated */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to book a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to book a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  changeReservedVisitSlot: {
    /** Change a reserved slot and associated details for a visit (before booking) */
    parameters: {
      /**
       * @description applicationReference
       * @example dfs-wjs-eqr
       */
      path: {
        applicationReference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeVisitSlotRequestDto']
      }
    }
    responses: {
      /** @description Visit slot changed */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to changed a visit slot */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to changed a visit slot */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit slot not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitByReference: {
    /**
     * Get a visit
     * @description Retrieve visit by visit reference (excludes Reserved and CHANGING)
     */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    responses: {
      /** @description Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to Get visits for prisoner */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions retrieve a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelVisit: {
    /** Cancel an existing booked visit */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OutcomeDto']
      }
    }
    responses: {
      /** @description Visit cancelled */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to cancel a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to cancel a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelVisit_1: {
    /**
     * Cancel an existing visit
     * @deprecated
     */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OutcomeDto']
      }
    }
    responses: {
      /** @description Visit cancelled */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to cancel a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to cancel a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  changeBookedVisit: {
    /** Change a booked visit, (a starting point) */
    parameters: {
      /**
       * @description reference
       * @example v9-d7-ed-7u
       */
      path: {
        reference: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReserveVisitSlotDto']
      }
    }
    responses: {
      /** @description Visit created */
      201: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** @description Incorrect request to change a booked visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to change a booked visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
