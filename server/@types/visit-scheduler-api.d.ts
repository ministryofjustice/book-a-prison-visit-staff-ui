/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/visits/{visitId}': {
    /** Retrieve visit by visit id */
    get: operations['getVisitById']
    put: operations['updateVisit']
    /** Delete a visit by visit id */
    delete: operations['deleteVisit']
  }
  '/visits': {
    /** Retrieve visits with optional filters, sorted by startTimestamp ascending */
    get: operations['getVisitsByFilter']
    post: operations['createVisit']
  }
  '/visit-session-templates': {
    /** Get all session templates */
    get: operations['getSessionTemplates']
    post: operations['createSessionTemplate']
  }
  '/visit-sessions': {
    /** Retrieve all visits for a specified prisoner */
    get: operations['getVisitSessions']
  }
  '/visit-session-templates/{templateId}': {
    /** Get all session templates */
    get: operations['getSessionTemplate']
    /** Delete a session template by id */
    delete: operations['deleteSessionTemplate']
  }
}

export interface components {
  schemas: {
    /** @description Main Contact associated with the visit */
    CreateContactOnVisitRequest: {
      /**
       * @description Contact Name
       * @example John Smith
       */
      contactName: string
      /**
       * @description Contact Phone
       * @example 01234 567890
       */
      contactPhone: string
    }
    /** @description List of visitors associated with the visit */
    CreateVisitorOnVisitRequest: {
      /**
       * Format: int64
       * @description NOMIS person ID
       * @example 1234556
       */
      nomisPersonId: number
      /**
       * @description Lead Visitor
       * @example true
       */
      leadVisitor: boolean
    }
    UpdateVisitRequest: {
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId?: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId?: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp?: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp?: string
      /**
       * @description Visit Type
       * @example STANDARD_SOCIAL
       * @enum {string}
       */
      visitType?: 'STANDARD_SOCIAL' | 'OFFICIAL' | 'FAMILY'
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus?:
        | 'RESERVED'
        | 'BOOKED'
        | 'CANCELLED_BY_PRISONER'
        | 'CANCELLED_BY_VISITOR'
        | 'CANCELLED_BY_PRISON'
        | 'ATTENDED'
      /**
       * @description Visit Room
       * @example A1
       */
      visitRoom?: string
      /** @description Reasonable Adjustments */
      reasonableAdjustments?: string
      /** @description Visitor Concerns */
      visitorConcerns?: string
      mainContact?: components['schemas']['CreateContactOnVisitRequest']
      /** @description List of visitors associated with the visit */
      contactList?: components['schemas']['CreateVisitorOnVisitRequest'][]
      /**
       * Format: int64
       * @description Session Id identifying the visit session template
       * @example 123456
       */
      sessionId?: number
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
    }
    /** @description Contact */
    ContactDto: {
      /**
       * Format: int64
       * @description Visit id
       * @example 123
       */
      visitId: number
      /**
       * @description Main Contact Name
       * @example John Smith
       */
      contactName: string
      /**
       * @description Main Contact Phone
       * @example 01234 567890
       */
      contactPhone: string
    }
    /** @description Visit */
    VisitDto: {
      /**
       * Format: int64
       * @description Visit id
       * @example 123
       */
      id: number
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Visit Room
       * @example A1 L3
       */
      visitRoom: string
      /**
       * @description Visit Type
       * @example STANDARD_SOCIAL
       */
      visitType: string
      /**
       * @description Visit Type Description
       * @example Standard Social
       */
      visitTypeDescription: string
      /**
       * @description Visit Status
       * @example RESERVED
       */
      visitStatus: string
      /**
       * @description Visit Status Description
       * @example Reserved
       */
      visitStatusDescription: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      /** @description Reasonable Adjustments */
      reasonableAdjustments?: string
      /** @description Visitor Concerns */
      visitorConcerns?: string
      mainContact?: components['schemas']['ContactDto']
      /** @description List of visitors associated with the visit */
      visitors: components['schemas']['VisitorDto'][]
      /**
       * Format: int64
       * @description Session Id identifying the visit session template
       * @example 123
       */
      sessionId?: number
    }
    /** @description Visitor */
    VisitorDto: {
      /**
       * Format: int64
       * @description Visit id
       * @example 123
       */
      visitId: number
      /**
       * Format: int64
       * @description person ID (nomis) of the visitor
       * @example 1234
       */
      nomisPersonId: number
      /**
       * @description indicates lead visitor for this visit
       * @example true
       */
      leadVisitor: boolean
    }
    CreateVisitRequest: {
      /**
       * @description Prisoner Id
       * @example AF34567G
       */
      prisonerId: string
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * Format: date-time
       * @description The date and time of the visit
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The finishing date and time of the visit
       */
      endTimestamp: string
      /**
       * @description Visit Type
       * @example STANDARD_SOCIAL
       * @enum {string}
       */
      visitType: 'STANDARD_SOCIAL' | 'OFFICIAL' | 'FAMILY'
      /**
       * @description Visit Status
       * @example RESERVED
       * @enum {string}
       */
      visitStatus:
        | 'RESERVED'
        | 'BOOKED'
        | 'CANCELLED_BY_PRISONER'
        | 'CANCELLED_BY_VISITOR'
        | 'CANCELLED_BY_PRISON'
        | 'ATTENDED'
      /**
       * @description Visit Room
       * @example A1
       */
      visitRoom: string
      /** @description Reasonable Adjustments */
      reasonableAdjustments?: string
      /** @description Visitor Concerns */
      visitorConcerns?: string
      mainContact?: components['schemas']['CreateContactOnVisitRequest']
      /** @description List of visitors associated with the visit */
      contactList?: components['schemas']['CreateVisitorOnVisitRequest'][]
      /**
       * Format: int64
       * @description Session Id identifying the visit session template
       * @example 123456
       */
      sessionId?: number
    }
    CreateSessionTemplateRequest: {
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
      startTime: components['schemas']['LocalTime']
      endTime: components['schemas']['LocalTime']
      /**
       * Format: date
       * @description The start date of the session template
       * @example 2019-12-02
       */
      startDate: string
      /**
       * Format: date
       * @description The expiry date of the session template
       * @example 2019-12-02
       */
      expiryDate?: string
      /**
       * @description visit type
       * @example STANDARD_SOCIAL
       * @enum {string}
       */
      visitType: 'STANDARD_SOCIAL' | 'OFFICIAL' | 'FAMILY'
      /**
       * @description visit room
       * @example A1
       */
      visitRoom: string
      /** @description restrictions */
      restrictions?: string
      /**
       * @description frequency
       * @enum {string}
       */
      frequency: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'SINGLE'
      /**
       * Format: int32
       * @description closed capacity
       */
      closedCapacity: number
      /**
       * Format: int32
       * @description open capacity
       */
      openCapacity: number
    }
    /**
     * @description The end time of the generated visit session(s)
     * @example 13:45
     */
    LocalTime: {
      /** Format: int32 */
      hour?: number
      /** Format: int32 */
      minute?: number
      /** Format: int32 */
      second?: number
      /** Format: int32 */
      nano?: number
    }
    SessionTemplateDto: {
      /**
       * Format: int64
       * @description session id
       * @example 123
       */
      sessionTemplateId: number
      /**
       * @description prisonId
       * @example MDI
       */
      prisonId: string
      startTime: components['schemas']['LocalTime']
      endTime: components['schemas']['LocalTime']
      /**
       * Format: date
       * @description The start date of the session template
       * @example 2019-12-02
       */
      startDate: string
      /**
       * Format: date
       * @description The expiry date of the session template
       * @example 2019-12-02
       */
      expiryDate?: string
      /**
       * @description visit type
       * @example STANDARD_SOCIAL
       * @enum {string}
       */
      visitType: 'STANDARD_SOCIAL' | 'OFFICIAL' | 'FAMILY'
      /**
       * @description visit room
       * @example A1
       */
      visitRoom: string
      /** @description restrictions */
      restrictions?: string
      /**
       * @description frequency
       * @example A1
       * @enum {string}
       */
      frequency: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'SINGLE'
      /**
       * Format: int32
       * @description closed capacity
       */
      closedCapacity: number
      /**
       * Format: int32
       * @description open capacity
       */
      openCapacity: number
    }
    /** @description Visit Session */
    VisitSession: {
      /**
       * Format: int64
       * @description session id
       * @example 123
       */
      sessionTemplateId: number
      /**
       * @description The Name of the visit room in which this visit session takes place
       * @example Visit room 1
       */
      visitRoomName: string
      /**
       * @description The type of visits taking place within this session - code
       * @example STANDARD_SOCIAL
       */
      visitType: string
      /**
       * @description The type of visits taking place within this session - description
       * @example Standard social
       */
      visitTypeDescription: string
      /**
       * @description The prison id
       * @example LEI
       */
      prisonId: string
      /**
       * @description Description of any session restrictions
       * @example A wing only
       */
      restrictions?: string
      /**
       * Format: int32
       * @description The number of concurrent visits which may take place within this session
       * @example 1
       */
      openVisitCapacity: number
      /**
       * Format: int32
       * @description The count of open visit bookings already reserved or booked for this session
       * @example 1
       */
      openVisitBookedCount: number
      /**
       * Format: int32
       * @description The number of closed visits which may take place within this session
       * @example 1
       */
      closedVisitCapacity: number
      /**
       * Format: int32
       * @description The count of closed visit bookings already reserved or booked for this session
       * @example 1
       */
      closedVisitBookedCount: number
      /**
       * Format: date-time
       * @description The start timestamp for this visit session
       */
      startTimestamp: string
      /**
       * Format: date-time
       * @description The end timestamp for this visit session
       */
      endTimestamp: string
    }
  }
}

export interface operations {
  /** Retrieve visit by visit id */
  getVisitById: {
    parameters: {
      path: {
        visitId: number
      }
    }
    responses: {
      /** Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** Incorrect request to Get visits for prisoner */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions retrieve a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateVisit: {
    parameters: {
      path: {
        visitId: number
      }
    }
    responses: {
      /** Visit updated */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** Incorrect request to update a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to update a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Visit not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVisitRequest']
      }
    }
  }
  /** Delete a visit by visit id */
  deleteVisit: {
    parameters: {
      path: {
        visitId: number
      }
    }
    responses: {
      /** Visit deleted */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to delete a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieve visits with optional filters, sorted by startTimestamp ascending */
  getVisitsByFilter: {
    parameters: {
      query: {
        /** Filter results by prisoner id */
        prisonerId?: string
        /** Filter results by prison id */
        prisonId?: string
        /** Filter results by visits that start on or after the given timestamp */
        startTimestamp?: string
        /** Filter results by visits that start on or before the given timestamp */
        endTimestamp?: string
        /** Filter results by visitor (contact id) */
        nomisPersonId?: number
      }
    }
    responses: {
      /** Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitDto'][]
        }
      }
      /** Incorrect request to Get visits for prisoner */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to retrieve visits */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createVisit: {
    responses: {
      /** Visit created */
      201: {
        content: {
          'application/json': components['schemas']['VisitDto']
        }
      }
      /** Incorrect request to create a visit */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to create a visit */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVisitRequest']
      }
    }
  }
  /** Get all session templates */
  getSessionTemplates: {
    responses: {
      /** Session templates returned */
      200: {
        content: {
          'application/json': components['schemas']['SessionTemplateDto'][]
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createSessionTemplate: {
    responses: {
      /** Session Template created */
      201: {
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** Incorrect request to create a session template */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to create a session template */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSessionTemplateRequest']
      }
    }
  }
  /** Retrieve all visits for a specified prisoner */
  getVisitSessions: {
    parameters: {
      query: {
        /** Query by NOMIS Prison Identifier */
        prisonId: string
        /** Filter results by prisoner id */
        prisonerId?: string
        /** Override the default minimum number of days notice from the current date */
        min?: number
        /** Override the default maximum number of days to book-ahead from the current date */
        max?: number
      }
    }
    responses: {
      /** Visit session information returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitSession'][]
        }
      }
      /** Incorrect request to Get visit sessions */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all session templates */
  getSessionTemplate: {
    parameters: {
      path: {
        templateId: number
      }
    }
    responses: {
      /** Session templates returned */
      200: {
        content: {
          'application/json': components['schemas']['SessionTemplateDto']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to view session templates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Delete a session template by id */
  deleteSessionTemplate: {
    parameters: {
      path: {
        templateId: number
      }
    }
    responses: {
      /** Visit deleted */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to delete a session template */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}

// export interface external {}
